<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[死锁]]></title>
      <url>/2018/04/15/%E6%AD%BB%E9%94%81/</url>
      <content type="html"><![CDATA[<div align="center" style="display:none"><br><img src="/photo/back.jpg" height="330" width="495"><br></div>


<font size="4"><br><strong>死锁：</strong>是指两个或两个以上的进程在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力作<br>用，它们都将无法推进下去。<br><br>（1）因为系统资源不足<br><br>（2）进程运行推进顺序不合适<br><br>（3）资源分配不当等<br><br><br>如果系统资源充足，进程的资源请求都能够得到满足，死锁出现的可能性就很低，否则就会因争夺有限的资源而陷入死锁。其次，进程运行推进顺序与速度不同，也可能产生死锁。<br><br><br><strong>死锁的4个必要条件：</strong><br><br>（1） 互斥：一个资源每次只能被一个进程使用。<br><br>（2） 请求与保持：一个进程因请求资源而阻塞时，对已获得的资源保持不放。<br><br>（3） 不剥夺： 进程已获得的资源，在未使用完之前，不能强行剥夺。<br><br>（4） 循环等待： 若干进程之间形成一种头尾相连的循环等待资源关系。<br><br><br>这四个条件是死锁的必要条件，只要系统发生死锁，这些条件必然成立，而只要上述条件之一不满足，就不会发生死锁。<br></font>
]]></content>
      
        
        <tags>
            
            <tag> operating system </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2018/04/15/hello-world/</url>
      <content type="html"><![CDATA[<p><img src="/photo/1.png" alt="alt post-cover"></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[my first log]]></title>
      <url>/2018/04/15/article-title/</url>
      <content type="html"><![CDATA[<h2 id="tags"><a href="#tags" class="headerlink" title="tags:"></a>tags:</h2><p><img src="/photo/2.JPG" alt="Alt text"><br><strong><em>this is my first blog</em></strong><br><br><strong>hello world!</strong></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[多线程编程优点]]></title>
      <url>/2018/01/04/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E5%A5%BD%E5%A4%84/</url>
      <content type="html"><![CDATA[<div align="center" style="display:none"><br><img src="/photo/3.JPG" height="330" width="495"><br></div>

<font size="4" color="red">线程：</font><br><font size="4">一种CPU利用的基本单元，它是形成多线程计算机的基础。线程是CPU使用的基本单元。</font><br><br><font size="4" color="red">进程：</font><br><font size="4">可看做是正在执行的程序。进程需要一定的资源（CPU时间、内存、文件和I/O设备）来完成其任务。</font><br><br><font size="4" color="red">【注】：</font><br><font size="4">进程是CPU分配资源的基本单位，线程是CPU调度的基本单位。</font>

<p><strong><font size="4" color="red"><br>多线程编程具有如下4个优点：<br></font></strong></p>
<p><strong><font size="4" color="red">①响应度高：</font></strong></p>
<font size="4">如果对一个交互程序采用多线程，那么即使其部分阻塞或执行比较冗长的操作，该程序仍能继续执行，从而增加了对用户的响应程度。例如：多线程web浏览器在用一个线程装入图像时，能通过另一个线程与用户交互。<br></font>

<p><strong><font size="4" color="red">②资源共享：</font></strong></p>
<font size="4">线程默认共享它们所属进程的内存和资源。代码和数据共享的优点是它能允许一个应用程序在同一地址空间有多个不同的活动线程。<br></font>

<p><strong><font size="4" color="red">③经济：</font></strong></p>
<font size="4">进程创建所需要的内存和资源的分配比价昂贵，由于线程能共享它们所属进程的资源，所以创建和切换线程会更加经济。实际地测量进程创建和管理与线程创建和管理的差别较为困难，但是前者通常要比后者花费更多时间。例如：对于Solaris，进程创建要比线程创建慢30倍，而进程切换要比线程切换慢5倍。<br></font>

<p><strong><font size="4" color="red">④多处理器体系结构的利用：</font></strong></p>
<font size="4">多线程的优点之一是能充分使用多处理器体系结构，以便每个进程能并行运行在不同的处理器上。不管有多少cpu，单线程进程只能运行在一个cpu上。在多cpu上使用多线程加强了并发功能。<br></font>]]></content>
      
        <categories>
            
            <category> 线程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> operating system，programming </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
