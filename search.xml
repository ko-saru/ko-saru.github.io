<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[设计模式（二）]]></title>
      <url>/2018/04/26/design-patterns2/</url>
      <content type="html"><![CDATA[<p><div align="center" style="display:none"><br><img src="/photo/bg.jpg" height="330" width="495"><br></div><br><strong><font size="5">三、Java的23种设计模式</font></strong><br></p>
<p></p><h1>A、创建模式</h1><hr><p></p>
<p></p><p><font size="4"><br>从这一块开始，我们详细介绍Java中23种设计模式的概念，应用场景等情况，并结合他们的特点及设计模式的原则进行分析。<br>首先，简单工厂模式不属于23种设计模式，简单工厂一般分为：普通简单工厂、多方法简单工厂、静态方法简单工厂。<br></font><br></p><p></p>
<p></p><h2>0、简单工厂模式</h2><font size="4">简单工厂模式分为三种：</font><br><strong><em><h3>I.普通简单工厂模式</h3></em></strong><font size="4">就是建立一个工厂类，对实现了同一接口的一些类进行实例的创建。首先看关系图：</font><br><br><img src="/photo/4-26/1.png" alt="alt text"><br><p></p>
<p><font size="4">举例如下：（我们举一个发送邮件和短信的例子,可以考虑生产鼠标等，包括dell、hp）</font></p>
<p><font size="4">首先，创建二者的共同接口：</font><br></p>
<pre><code>public interface Sender {  
    public void Send();  
}  
</code></pre><p><font size="4">其次，创建实现类：</font><br></p>
<pre><code>public class MailSender implements Sender {  
    @Override  
    public void Send() {  
        System.out.println(&quot;this is mailsender!&quot;);  
    }  
}

public class SmsSender implements Sender {  
    @Override  
    public void Send() {  
        System.out.println(&quot;this is sms sender!&quot;);  
    }  
} 
</code></pre><p><font size="4">最后，建工厂类：</font><br> </p>
<pre><code>public class SendFactory {  

    public Sender produce(String type) {  
        if (&quot;mail&quot;.equals(type)) {  
            return new MailSender();  
        } else if (&quot;sms&quot;.equals(type)) {  
            return new SmsSender();  
        } else {  
            System.out.println(&quot;请输入正确的类型!&quot;);  
            return null;  
        }  
    }  
}
</code></pre><p><font size="4">我们来测试下：</font><br> </p>
<pre><code>public class FactoryTest {  

    public static void main(String[] args) {  
        SendFactory factory = new SendFactory();  
        Sender sender = factory.produce(&quot;sms&quot;);  
        sender.Send();  
    }  
}
</code></pre><p><font size="4">输出：this is sms sender!</font><br><br><strong><em><h3>II.多方法简单工厂模式（多方法）</h3></em></strong><font size="4">是对普通工厂方法模式的改进，在普通工厂方法模式中，如果传递的字符串出错，则不能正确创建对象，而多个工厂方法模式是提供多个工厂方法，分别创建对象。关系图：</font><br><br><img src="/photo/4-26/2.jpg" alt="alt text"><br></p>
<p><font size="4">将上面的代码做下修改，改动下SendFactory类就行，如下：</font><br> </p>
<pre><code>public class SendFactory {  

    public Sender produceMail(){  
        return new MailSender();  
    }  

    public Sender produceSms(){  
        return new SmsSender();  
    }  
} 
</code></pre><p><font size="4">测试类如下：</font><br>  </p>
<pre><code>public class FactoryTest {  

    public static void main(String[] args) {  
        SendFactory factory = new SendFactory();  
        Sender sender = factory.produceMail();  
        sender.Send();  
    }  
} 
</code></pre><p><font size="4">输出：this is mailsender!</font><br><br><strong><em><h3>III.静态方法简单工厂模式（多个静态方法）</h3></em></strong>  <font size="4">将上面的多个工厂方法模式里的方法置为静态的，不需要创建实例，直接调用即可。</font><br></p>
<pre><code>public class SendFactory {  

    public static Sender produceMail(){  
        return new MailSender();  
    }  

    public static Sender produceSms(){  
        return new SmsSender();  
    }  
}  
public class FactoryTest {  

    public static void main(String[] args) {      
        Sender sender = SendFactory.produceMail();  
        sender.Send();  
    }  
}  
</code></pre><p><font size="4">输出：this is mailsender!</font><br></p>
<p><font size="4">总体来说，工厂模式适合：凡是出现了大量的产品需要创建，并且具有共同的接口时，可以通过工厂方法模式进行创建。在以上的三种模式中，第一种如果传入的字符串有误，不能正确创建对象，第三种相对于第二种，不需要实例化工厂类，所以，大多数情况下，我们会选用第三种——静态工厂方法模式。</font><br></p><h2>1、工厂方法模式（Factory Method）</h2><p></p>
<p><font size="4">简单工厂模式有一个问题就是，类的创建依赖工厂类，也就是说，如果想要拓展程序，必须对工厂类进行修改，这违背了闭包原则，所以，从设计角度考虑，有一定的问题，如何解决？就用到工厂方法模式，创建多个工厂类，这样一旦需要增加新的功能，直接增加新的工厂类就可以了，不需要修改之前的代码。因为工厂方法不太好理解，我们先看看图，然后就和代码，就比较容易理解。</font><br><br><img src="/photo/4-26/3.jpg" alt="alt text"><br></p>
<p><font size="4">请看例子：</font><br></p>
<pre><code>public interface Sender {  
    public void Send();  
}  
</code></pre><p><font size="4">两个实现类：</font><br></p>
<pre><code>public class MailSender implements Sender {  
    @Override  
    public void Send() {  
        System.out.println(&quot;this is mailsender!&quot;);  
    }  
} 
public class SmsSender implements Sender {  

    @Override  
    public void Send() {  
        System.out.println(&quot;this is sms sender!&quot;);  
    }  
} 
</code></pre><p><font size="4">两个工厂类：</font><br></p>
<pre><code>public class SendMailFactory implements Provider {  

    @Override  
    public Sender produce(){  
        return new MailSender();  
    }  
} 
public class SendSmsFactory implements Provider{  

    @Override  
    public Sender produce() {  
        return new SmsSender();  
    }  
}  
</code></pre><p><font size="4">再提供一个接口：</font><br></p>
<pre><code>public interface Provider {  
    public Sender produce();  
} 
</code></pre><p><font size="4">测试类：</font><br></p>
<pre><code>public class Test {  

    public static void main(String[] args) {  
        Provider provider = new SendMailFactory();  
        Sender sender = provider.produce();  
        sender.Send();  
    }  
}
</code></pre><p><font size="4">其实这个模式的好处就是，如果你现在想增加一个功能：发及时信息，则只需做一个实现类，实现Sender接口，同时做一个工厂类，实现Provider接口，就OK了，无需去改动现成的代码。这样做，拓展性较好！</font><br></p><h2>2、抽象工厂模式（Abstract Factory）</h2><font size="4">工厂方法模式和抽象工厂模式不好分清楚，可以参照<a href="http://ichennan.com/2016/08/09/DesignPattern.html" target="_blank" rel="noopener">三者间比较</a>。他们的区别如下：</font><br><br><strong><font size="4">工厂方法模式：</font></strong><br><font size="4">一个抽象产品类，可以派生出多个具体产品类。</font><br><font size="4">一个抽象工厂类，可以派生出多个具体工厂类。</font><br><font size="4">每个具体工厂类只能创建一个具体产品类的实例。</font><br><br><strong><font size="4">抽象工厂模式：</font></strong><br><font size="4">多个抽象产品类，每个抽象产品类可以派生出多个具体产品类。</font><br><font size="4">一个抽象工厂类，可以派生出多个具体工厂类。</font><br><font size="4">每个具体工厂类可以创建多个具体产品类的实例，也就是创建的是一个产品线下的多个产品。</font><br><br><strong><font size="4">区别：</font></strong><br><p></p>
<p><font size="4">工厂方法模式只有一个抽象产品类，而抽象工厂模式有多个。</font><br><font size="4">工厂方法模式的具体工厂类只能创建一个具体产品类的实例，而抽象工厂模式可以创建多个。</font><br><font size="4">工厂方法创建 “一种” 产品，他的着重点在于”怎么创建”，也就是说如果你开发，你的大量代码很可能围绕着这种产品的构造，初始化这些细节上面。也因为如此，类似的产品之间有很多可以复用的特征，所以会和模版方法相随。</font><br><font size="4">抽象工厂需要创建一些列产品，着重点在于”创建哪些”产品上，也就是说，如果你开发，你的主要任务是划分不同差异的产品线，并且尽量保持每条产品线接口一致，从而可以从同一个抽象工厂继承。</font><br><br><strong><font size="4">对于java来说，你能见到的大部分抽象工厂模式都是这样的：</font></strong><br></p>
<p><font size="4">—它的里面是一堆工厂方法，每个工厂方法返回某种类型的对象。</font><br></p>
<p><font size="4">比如说工厂可以生产鼠标和键盘。那么抽象工厂的实现类（它的某个具体子类）的对象都可以生产鼠标和键盘，但可能工厂A生产的是罗技的键盘和鼠标，工厂B是微软的。</font><br></p>
<p><font size="4">这样A和B就是工厂，对应于抽象工厂；<br>每个工厂生产的鼠标和键盘就是产品，对应于工厂方法；</font><br></p>
<p><font size="4">用了工厂方法模式，你替换生成键盘的工厂方法，就可以把键盘从罗技换到微软。但是用了抽象工厂模式，你只要换家工厂，就可以同时替换鼠标和键盘一套。如果你要的产品有几十个，当然用抽象工厂模式一次替换全部最方便（这个工厂会替你用相应的工厂方法）</font><br></p>
<p><font size="4">所以说抽象工厂就像工厂，而工厂方法则像是工厂的一种产品生产线。</font><br></p>
]]></content>
      
        <categories>
            
            <category> design patterns </category>
            
        </categories>
        
        
        <tags>
            
            <tag> technology </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式（一）]]></title>
      <url>/2018/04/26/design-patternsmd/</url>
      <content type="html"><![CDATA[<div align="center" style="display:none"><br><img src="/photo/design.jpg" height="330" width="495"><br></div>

<p><strong><font size="5">一、设计模式的分类</font></strong><br></p>
<p><font size="4">总体来说设计模式分为三大类：</font><br></p>
<p><font size="4" color="red">创建型模式（5种）：</font><font size="4">工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。</font><br><font size="4" color="red">结构型模式（7种）：</font><font size="4">适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。</font><br><font size="4" color="red">行为型模式（11种）：</font><font size="4">策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。<br></font><br></p>
<p><font size="4"> 其实还有两类：并发模式和线程池模式。用如下图来整体描述：</font><br><br><img src="/photo/picture.jpg" alt="alt text"><br><br><strong><font size="5">二、设计模式的六大原则</font></strong><br></p>
<p><font size="4" color="red">总原则：开闭原则（Open Close Principle）</font><br></p>
<p><font size="4"><br>开闭原则就是说<strong>对扩展开放，对修改关闭</strong>。在程序需要进行拓展的时候，不能去修改原有的代码，而是要扩展原有代码，实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类等，后面的具体设计中我们会提到这点。<br></font><br></p>
<p><font size="4" color="red">1、单一职责原则</font><br></p>
<p><font size="4"><br>不要存在多于一个导致类变更的原因，也就是说每个类应该实现单一的职责，如若不然，就应该把类拆分。<br></font><br></p>
<p><font size="4" color="red">2、里氏替换原则（Liskov Substitution Principle）</font><br></p>
<p><font size="4"><br>里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。 LSP是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。—— From Baidu 百科</font></p>
<p>历史替换原则中，子类对父类的方法尽量不要重写和重载。因为父类代表了定义好的结构，通过这个规范的接口与外界交互，子类不应该随便破坏它。<br><br></p>
<p><font size="4" color="red">3、依赖倒转原则（Dependence Inversion Principle）</font><br></p>
<p><font size="4"><br>这个是开闭原则的基础，具体内容：面向接口编程，依赖于抽象而不依赖于具体。写代码时用到具体类时，不与具体类交互，而与具体类的上层接口交互。<br></font><br></p>
<p><font size="4" color="red">4、接口隔离原则（Interface Segregation Principle）</font><br></p>
<p><font size="4"><br>这个原则的意思是：每个接口中不存在子类用不到却必须实现的方法，如果不然，就要将接口拆分。使用多个隔离的接口，比使用单个接口（多个接口方法集合到一个的接口）要好。<br></font><br></p>
<p><font size="4" color="red">5、迪米特法则（最少知道原则）（Demeter Principle）</font><br></p>
<p><font size="4"><br>就是说：一个类对自己依赖的类知道的越少越好。也就是说无论被依赖的类多么复杂，都应该将逻辑封装在方法的内部，通过public方法提供给外部。这样当被依赖的类变化时，才能最小的影响该类。</font></p>
<p>最少知道原则的另一个表达方式是：只与直接的朋友通信。类之间只要有耦合关系，就叫朋友关系。耦合分为依赖、关联、聚合、组合等。我们称出现为成员变量、方法参数、方法返回值中的类为直接朋友。局部变量、临时变量则不是直接的朋友。我们要求陌生的类不要作为局部变量出现在类中。<br><br></p>
<p><font size="4" color="red">6、合成复用原则（Composite Reuse Principle）</font><br></p>
<p><font size="4"><br>原则是尽量首先使用合成/聚合的方式，而不是使用继承。<br></font><br></p>
]]></content>
      
        <categories>
            
            <category> design patterns </category>
            
        </categories>
        
        
        <tags>
            
            <tag> technology </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[死锁]]></title>
      <url>/2018/04/15/%E6%AD%BB%E9%94%81/</url>
      <content type="html"><![CDATA[<div align="center" style="display:none"><br><img src="/photo/back.jpg" height="330" width="495"><br></div>


<font size="4"><br><strong>死锁：</strong>是指两个或两个以上的进程在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去。<br><br>（1）因为系统资源不足<br><br>（2）进程运行推进顺序不合适<br><br>（3）资源分配不当等<br><br>如果系统资源充足，进程的资源请求都能够得到满足，死锁出现的可能性就很低，否则就会因争夺有限的资源而陷入死锁。其次，进程运行推进顺序与速度不同，也可能产生死锁。<br><br><strong><font size="4" color="red">死锁的4个必要条件：</font></strong><br>（1） 互斥：一个资源每次只能被一个进程使用。<br><br>（2） 请求与保持：一个进程因请求资源而阻塞时，对已获得的资源保持不放。<br><br>（3） 不剥夺： 进程已获得的资源，在未使用完之前，不能强行剥夺。<br><br>（4） 循环等待： 若干进程之间形成一种头尾相连的循环等待资源关系。<br><br>这四个条件是死锁的必要条件，只要系统发生死锁，这些条件必然成立，而只要上述条件之一不满足，就不会发生死锁。<br></font>
]]></content>
      
        
        <tags>
            
            <tag> operating system </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[归并排序]]></title>
      <url>/2018/04/15/hello-world/</url>
      <content type="html"><![CDATA[<p><div align="center" style="display:none"><br><img src="/photo/1.png" height="330" width="495"><br></div><br>思想：分治思想</p>
<p>时间复杂度：O(nlgn)</p>
<p>稳定性：稳定</p>
<p>归并过程：<br><img src="/photo/merge.jpg" alt="alt text"></p>
<p>代码如下：</p>
<pre><code>public class MergeSort {

    public static void merge(int[] a, int low, int mid, int high) {
        int[] temp = new int[high - low + 1];
        int i = low;// 左指针
        int j = mid + 1;// 右指针
        int k = 0;
        // 把较小的数先移到新数组中
        while (i &lt;= mid &amp;&amp; j &lt;= high) {
            if (a[i] &lt; a[j]) {
                temp[k++] = a[i++];
            } else {
                temp[k++] = a[j++];
            }
        }
        // 把左边剩余的数移入数组
        while (i &lt;= mid) {
            temp[k++] = a[i++];
        }
        // 把右边边剩余的数移入数组
        while (j &lt;= high) {
            temp[k++] = a[j++];
        }
        // 把新数组中的数覆盖nums数组
        for (int k2 = 0; k2 &lt; temp.length; k2++) {
            a[k2 + low] = temp[k2];
        }
    }

    public static void mergeSort(int[] a, int low, int high) {
        int mid = (low + high) / 2;
        if (low &lt; high) {
            // 左边
            mergeSort(a, low, mid);
            // 右边
            mergeSort(a, mid + 1, high);
            // 左右归并
            merge(a, low, mid, high);
            System.out.println(Arrays.toString(a));
        }

    }

    public static void main(String[] args) {
        int a[] = { 51, 46, 20, 18, 65, 97, 82, 30, 77, 50 };
        mergeSort(a, 0, a.length - 1);
        System.out.println(&quot;排序结果：&quot; + Arrays.toString(a));
    }
}
</code></pre>]]></content>
      
        <categories>
            
            <category> 代码 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[大数相乘]]></title>
      <url>/2018/04/15/article-title/</url>
      <content type="html"><![CDATA[<p><div align="center" style="display:none"><br><img src="/photo/4.JPG" height="330" width="495"><br></div><br><strong>代码如下：</strong><br></p>
<pre><code>public class Mutiply {

    public static void main(String[] args){

        String str1 = &quot;7832974972840919321747983209327&quot;;
        String str2 = &quot;1987432091904327543957&quot;;
        System.out.println(multiply(str1,str2));

    }
    public static String multiply(String num1,String num2){

        int len1 = num1.length();
        int len2 = num2.length();
        //结果最大长度len1+len2,最小为len1+len2-1
        int[] num = new int[len1+len2]; //数组默认初始化均为0
        for(int i=0;i&lt;len2;i++){

            int n1 = num2.charAt(len2-1-i)-&apos;0&apos;;
            int tmp = 0; //表示进位
            for(int j=0;j&lt;len1;j++){
                int n2 = num1.charAt(len1-1-j)-&apos;0&apos;;
                tmp = tmp + num[i+j] + n1*n2;
                num[i+j] = tmp%10;
                tmp = tmp/10;
            }
            num[len1+i] = tmp; //下面的数与上面最高位相乘得到的那个进位

        }
        //现在数组中存的是从个位开始到高位，所以需要倒过来
        //先找到数组中从后面开始不为0的数，该数为最高位。
        int i = len1+len2-1;
        while(i&gt;=0 &amp;&amp; num[i]==0){
            i--;
        }
        String result = &quot;&quot;;
        while(i&gt;=0){
            result+=num[i--];
        }
        return result;
    }
}
</code></pre>]]></content>
      
        <categories>
            
            <category> 代码 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> programming </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[多线程编程优点]]></title>
      <url>/2018/01/04/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E5%A5%BD%E5%A4%84/</url>
      <content type="html"><![CDATA[<div align="center" style="display:none"><br><img src="/photo/3.JPG" height="330" width="495"><br></div>

<font size="4" color="red">线程：</font><font size="4">一种CPU利用的基本单元，它是形成多线程计算机的基础。线程是CPU使用的基本单元。</font><br><br><font size="4" color="red">进程：</font><font size="4">可看做是正在执行的程序。进程需要一定的资源（CPU时间、内存、文件和I/O设备）来完成其任务。</font><br><br><font size="4" color="red">【注】：</font><font size="4">进程是CPU分配资源的基本单位，线程是CPU调度的基本单位。</font>

<p><strong><font size="4" color="red"><br>多线程编程具有如下4个优点：<br></font></strong></p>
<p><strong><font size="4" color="red">①响应度高：</font></strong><font size="4">如果对一个交互程序采用多线程，那么即使其部分阻塞或执行比较冗长的操作，该程序仍能继续执行，从而增加了对用户的响应程度。例如：多线程web浏览器在用一个线程装入图像时，能通过另一个线程与用户交互。<br></font><br></p>
<p><strong><font size="4" color="red">②资源共享：</font></strong><font size="4">线程默认共享它们所属进程的内存和资源。代码和数据共享的优点是它能允许一个应用程序在同一地址空间有多个不同的活动线程。<br></font><br></p>
<p><strong><font size="4" color="red">③经济：</font></strong><font size="4">进程创建所需要的内存和资源的分配比价昂贵，由于线程能共享它们所属进程的资源，所以创建和切换线程会更加经济。实际地测量进程创建和管理与线程创建和管理的差别较为困难，但是前者通常要比后者花费更多时间。例如：对于Solaris，进程创建要比线程创建慢30倍，而进程切换要比线程切换慢5倍。<br></font><br></p>
<p><strong><font size="4" color="red">④多处理器体系结构的利用：</font></strong><font size="4">多线程的优点之一是能充分使用多处理器体系结构，以便每个进程能并行运行在不同的处理器上。不管有多少cpu，单线程进程只能运行在一个cpu上。在多cpu上使用多线程加强了并发功能。<br></font></p>
]]></content>
      
        <categories>
            
            <category> 线程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> operating system </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
