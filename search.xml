<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[puzzle game]]></title>
      <url>/2018/05/24/game/</url>
      <content type="html"><![CDATA[<html lang="en"><br><head><br>    <meta charset="UTF-8"><br>    <title>puzzle game</title><br>    <script type="text/javascript" src="https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js"></script><br>    <script type="text/javascript" src="js/puzzleGame.js"></script><br>    <script async type="text/javascript" src="js/canvas.js"></script><br>    <link rel="stylesheet" href="css/puzzleGame.css"><br></head><br><body><br>    <canvas id="canvas"></canvas><br>    <div id="focus"><br>        <ul><br>            <li><div class="pic" style="center center;"><br>                <img src="images/software/1.jpg"><br>            </div></li><br>            <li><div class="pic" style="center center;"><br>                <img src="images/software/2.jpg"><br>            </div></li><br>            <li><div class="pic" style="center center;"><br>                <img src="images/software/3.jpg"><br>            </div></li><br>            <li><div class="pic" style="center center;"><br>                <img src="images/software/4.jpg"><br>            </div></li><br>            <li><div class="pic" style="center center;"><br>                <img src="images/software/5.jpg"><br>            </div></li><br>            <li><div class="pic" style="center center;"><br>                <img src="images/software/6.jpg"><br>            </div></li><br>            <li><div class="pic" style="center center;"><br>                <img src="images/software/7.jpg"><br>            </div></li><br>            <li><div class="pic" style="center center;"><br>                <img src="images/software/8.jpg"><br>            </div></li><br>        </ul><br>    </div><br>    <div id="wrap"><br>        <h1 align="center" style="color:white">软件学院拼图</h1><br>        <div id="left"><br>            <ul><br>                <li id="start"><br>                    <p style="color:white">开始游戏:</p><span>开始</span><br>                </li><br>                <li id="level"><br>                    <p style="color:white">选择难度:</p><span>3x3</span><br>                </li><br>                <li id="photo"><br>                    <p style="color:white">更换拼图:</p><span>更换图片</span><br>                </li><br>                <li id="album"><br>                    <p style="color:white">预览相册：</p><span>浏览相册</span><br>                </li><br>                <li id="change"><br>                    <p style="color:white">更换相册：</p><span>更换相册</span><br>                </li><br>            </ul><br>        </div><br>        <div id="right"><br>            <div id="imgArea"></div><br>        </div><br>    </div><br></body><br></html>]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[动态粒子效果展示]]></title>
      <url>/2018/05/15/test/</url>
      <content type="html"><![CDATA[<p><div align="center" style="display:none"><br><img src="/photo/5-15/a.jpg" height="330" width="495"><br></div></p>
<iframe width="100%" height="300" src="https://c.runoob.com/iframe/4506" allowfullscreen="allowfullscreen" frameborder="0"></iframe>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Java中compareTo与compare方法比较]]></title>
      <url>/2018/05/08/compareTo&amp;compare/</url>
      <content type="html"><![CDATA[<p><div align="center" style="display:none"><br><img src="/photo/5-8/1.jpg" height="330" width="495"><br></div></p>
<p></p><h1>java中compareTo和compare方法之比较</h1><hr><p></p>
<p><font size="4">这两个方法经常搞混淆，现对其进行总结以加深记忆。 </font><br> </p>
<p><font size="4">1,compareTo(Object o)方法是java.lang.Comparable<t>接口中的方法，当需要对某个类的对象进行排序时，该类需要实现Comparable<t>接口的，必须重写public int compareTo (T o)方法，比如MapReduce中Map函数和Reduce函数处理的<key,value>,其中需要根据key对键值对进行排序，所以，key实现了WritableComparable<t>接口，实现这个接口可同时用于序列化和反序列化。WritableComparable<t>接口(用于序列化和反序列化)是Writable接口和Comparable<t>接口的组合； </t></t></t></key,value></t></t></font><br> </p>
<p><font size="4">2,compare(Object o1,Object o2)方法是java.util.Comparator<t>接口的方法，它实际上用的是待比较对象的compareTo(Object o)方法。 </t></font><br> </p>
<p><font size="4">下面我们写一来看看上面两个方法是怎么用的： </font><br> </p>
<p><font size="4">首先，写一个User类，代码如下：</font><br> </p>
<pre><code>public class User implements Comparable&lt;Object&gt;{
    int id;
    String name;

    public User(int id,String name){
        this.id = id;
        this.name = name;
    }
    /*
     * Getters and Setters
    */
    public int getId() {
        return id;
    }
    public void setId(int id) {
        this.id = id;
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }

    @Override
    public int compareTo(Object o) {
        if(this ==o){
            return 0;            
        }
        else if (o!=null &amp;&amp; o instanceof User) {   
            User u = (User) o; 
            if(id&lt;=u.id){
                return -1;
            }else{
                   return 1;
            }
        }else{
               return -1;
        }
    }
}
</code></pre><p><font size="4">接下来，我们写一个测试类Test:</font><br> </p>
<pre><code>public class Test{
    //编写Comparator,根据User的id对User进行排序
    private static final Comparator&lt;User&gt; COMPARATOR = new Comparator&lt;User&gt;() {
       public int compare(User o1, User o2) {
           return o1.compareTo(o2);//运用User类的compareTo方法比较两个对象       
      }
   };

    public static void main(String[] args) {
        ArrayList&lt;User&gt; student = new ArrayList&lt;User&gt;();
        User user1 = new User(1,&quot;yueliming&quot;);
        User user2 = new User(2,&quot;yueliming&quot;);

        Collections.sort(student, COMPARATOR);//用我们写好的Comparator对student进行排序
        for(int i=0;i&lt;student.size();i++){
            System.out.println(student.get(i).getId());
        }
    }
}
</code></pre>]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[深入理解Java枚举类型(enum)]]></title>
      <url>/2018/05/07/enum/</url>
      <content type="html"><![CDATA[<p><div align="center" style="display:none"><br><img src="/photo/5-7/1.jpg" height="330" width="495"><br></div></p>
<p></p><h1>深入理解Java枚举类型(enum)</h1><hr><p></p>
<p></p><h2><font color="red">理解枚举类型</font></h2><p></p>
<p><font size="4">枚举类型是Java 5中新增特性的一部分，它是一种特殊的数据类型，之所以特殊是因为它既是一种类(class)类型却又比类类型多了些特殊的约束，但是这些约束的存在也造就了枚举类型的简洁性、安全性以及便捷性。下面先来看看什么是枚举？如何定义枚举？</font><br></p>
<p></p><h2><font color="red">枚举的定义</font></h2><p></p>
<p><font size="4">回忆一下下面的程序，这是在没有枚举类型时定义常量常见的方式</font><br></p>
<pre><code>public class DayDemo {

    public static final int MONDAY =1;

    public static final int TUESDAY=2;

    public static final int WEDNESDAY=3;

    public static final int THURSDAY=4;

    public static final int FRIDAY=5;

    public static final int SATURDAY=6;

    public static final int SUNDAY=7;

}
</code></pre><p><font size="4">上述的常量定义常量的方式称为int枚举模式，这样的定义方式并没有什么错，但它存在许多不足，如在类型安全和使用方便性上并没有多少好处，如果存在定义int值相同的变量，混淆的几率还是很大的，编译器也不会提出任何警告，因此这种方式在枚举出现后并不提倡，现在我们利用枚举类型来重新定义上述的常量，同时也感受一把枚举定义的方式，如下定义周一到周日的常量</font><br></p>
<pre><code>//枚举类型，使用关键字enum
enum Day {
    MONDAY, TUESDAY, WEDNESDAY,
    THURSDAY, FRIDAY, SATURDAY, SUNDAY
}
</code></pre><p><font size="4">相当简洁，在定义枚举类型时我们使用的关键字是enum，与class关键字类似，只不过前者是定义枚举类型，后者是定义类类型。枚举类型Day中分别定义了从周一到周日的值，这里要注意，值一般是大写的字母，多个值之间以逗号分隔。同时我们应该知道的是枚举类型可以像类(class)类型一样，定义为一个单独的文件，当然也可以定义在其他类内部，更重要的是枚举常量在类型安全性和便捷性都很有保证，如果出现类型问题编译器也会提示我们改进，但务必记住枚举表示的类型其取值是必须有限的，也就是说每个值都是可以枚举出来的，比如上述描述的一周共有七天。那么该如何使用呢？如下：</font><br></p>
<pre><code>public class EnumDemo {

    public static void main(String[] args){
        //直接引用
        Day day =Day.MONDAY;
    }

}
//定义枚举类型
enum Day {
    MONDAY, TUESDAY, WEDNESDAY,
    THURSDAY, FRIDAY, SATURDAY, SUNDAY
}
</code></pre><p><font size="4">就像上述代码那样，直接引用枚举的值即可，这便是枚举类型的最简单模型。</font><br></p>
<p></p><h2><font color="red">枚举实现原理</font></h2><p></p>
<p><font size="4">我们大概了解了枚举类型的定义与简单使用后，现在有必要来了解一下枚举类型的基本实现原理。实际上在使用关键字enum创建枚举类型并编译后，编译器会为我们生成一个相关的类，这个类继承了Java API中的java.lang.Enum类，也就是说通过关键字enum创建枚举类型在编译后事实上也是一个类类型而且该类继承自java.lang.Enum类。下面我们编译前面定义的EnumDemo.java并查看生成的class文件来验证这个结论：</font><br></p>
<pre><code>//查看目录下的java文件
zejian@zejiandeMBP enumdemo$ ls
EnumDemo.java
//利用javac命令编译EnumDemo.java
zejian@zejiandeMBP enumdemo$ javac EnumDemo.java 
//查看生成的class文件，注意有Day.class和EnumDemo.class 两个
zejian@zejiandeMBP enumdemo$ ls
Day.class  EnumDemo.class  EnumDemo.java
</code></pre><p><font size="4">利用javac编译前面定义的EnumDemo.java文件后分别生成了Day.class和EnumDemo.class文件，而Day.class就是枚举类型，这也就验证前面所说的使用关键字enum定义枚举类型并编译后，编译器会自动帮助我们生成一个与枚举相关的类。我们再来看看反编译Day.class文件：</font><br></p>
<pre><code>//反编译Day.class
final class Day extends Enum
{
    //编译器为我们添加的静态的values()方法
    public static Day[] values()
    {
        return (Day[])$VALUES.clone();
    }
    //编译器为我们添加的静态的valueOf()方法，注意间接调用了Enum也类的valueOf方法
    public static Day valueOf(String s)
    {
        return (Day)Enum.valueOf(com/zejian/enumdemo/Day, s);
    }
    //私有构造函数
    private Day(String s, int i)
    {
        super(s, i);
    }
     //前面定义的7种枚举实例
    public static final Day MONDAY;
    public static final Day TUESDAY;
    public static final Day WEDNESDAY;
    public static final Day THURSDAY;
    public static final Day FRIDAY;
    public static final Day SATURDAY;
    public static final Day SUNDAY;
    private static final Day $VALUES[];

    static 
    {    
        //实例化枚举实例
        MONDAY = new Day(&quot;MONDAY&quot;, 0);
        TUESDAY = new Day(&quot;TUESDAY&quot;, 1);
        WEDNESDAY = new Day(&quot;WEDNESDAY&quot;, 2);
        THURSDAY = new Day(&quot;THURSDAY&quot;, 3);
        FRIDAY = new Day(&quot;FRIDAY&quot;, 4);
        SATURDAY = new Day(&quot;SATURDAY&quot;, 5);
        SUNDAY = new Day(&quot;SUNDAY&quot;, 6);
        $VALUES = (new Day[] {
            MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY
        });
    }
}
</code></pre><p><font size="4">从反编译的代码可以看出编译器确实帮助我们生成了一个Day类(注意该类是final类型的，将无法被继承)而且该类继承自java.lang.Enum类，该类是一个抽象类(稍后我们会分析该类中的主要方法)，除此之外，编译器还帮助我们生成了7个Day类型的实例对象分别对应枚举中定义的7个日期，这也充分说明了我们前面使用关键字enum定义的Day类型中的每种日期枚举常量也是实实在在的Day实例对象，只不过代表的内容不一样而已。注意编译器还为我们生成了两个静态方法，分别是values()和 valueOf()，稍后会分析它们的用法，到此我们也就明白了，使用关键字enum定义的枚举类型，在编译期后，也将转换成为一个实实在在的类，而在该类中，会存在每个在枚举类型中定义好变量的对应实例对象，如上述的MONDAY枚举类型对应public static final Day MONDAY;，同时编译器会为该类创建两个方法，分别是values()和valueOf()。ok~，到此相信我们对枚举的实现原理也比较清晰，下面我们深入了解一下java.lang.Enum类以及values()和valueOf()的用途。</font><br></p>
<p></p><h2><font color="red">枚举的常见方法</font></h2><p></p>
<p></p><h2><font color="red">Enum抽象类常见方法</font></h2><p></p>
<p><font size="4">Enum是所有 Java 语言枚举类型的公共基本类（注意Enum是抽象类），以下是它的常见方法：</font><br><br><img src="/photo/5-7/a.png" alt="alt text"><br></p>
<p><font size="4">这里主要说明一下ordinal()方法，该方法获取的是枚举变量在枚举类中声明的顺序，下标从0开始，如日期中的MONDAY在第一个位置，那么MONDAY的ordinal值就是0，如果MONDAY的声明位置发生变化，那么ordinal方法获取到的值也随之变化，注意在大多数情况下我们都不应该首先使用该方法，毕竟它总是变幻莫测的。compareTo(E o)方法则是比较枚举的大小，注意其内部实现是根据每个枚举的ordinal值大小进行比较的。name()方法与toString()几乎是等同的，都是输出变量的字符串形式。至于valueOf(Class<t> enumType, String name)方法则是根据枚举类的Class对象和枚举名称获取枚举常量，注意该方法是静态的，后面在枚举单例时，我们还会详细分析该方法，下面的代码演示了上述方法：</t></font><br> </p>
<pre><code>public class EnumDemo {

    public static void main(String[] args){

        //创建枚举数组
        Day[] days=new Day[]{Day.MONDAY, Day.TUESDAY, Day.WEDNESDAY,
                Day.THURSDAY, Day.FRIDAY, Day.SATURDAY, Day.SUNDAY};

        for (int i = 0; i &lt;days.length ; i++) {
            System.out.println(&quot;day[&quot;+i+&quot;].ordinal():&quot;+days[i].ordinal());
        }

        System.out.println(&quot;-------------------------------------&quot;);
        //通过compareTo方法比较,实际上其内部是通过ordinal()值比较的
        System.out.println(&quot;days[0].compareTo(days[1]):&quot;+days[0].compareTo(days[1]));
        System.out.println(&quot;days[0].compareTo(days[1]):&quot;+days[0].compareTo(days[2]));

        //获取该枚举对象的Class对象引用,当然也可以通过getClass方法
        Class&lt;?&gt; clazz = days[0].getDeclaringClass();
        System.out.println(&quot;clazz:&quot;+clazz);

        System.out.println(&quot;-------------------------------------&quot;);

        //name()
        System.out.println(&quot;days[0].name():&quot;+days[0].name());
        System.out.println(&quot;days[1].name():&quot;+days[1].name());
        System.out.println(&quot;days[2].name():&quot;+days[2].name());
        System.out.println(&quot;days[3].name():&quot;+days[3].name());

        System.out.println(&quot;-------------------------------------&quot;);

        System.out.println(&quot;days[0].toString():&quot;+days[0].toString());
        System.out.println(&quot;days[1].toString():&quot;+days[1].toString());
        System.out.println(&quot;days[2].toString():&quot;+days[2].toString());
        System.out.println(&quot;days[3].toString():&quot;+days[3].toString());

        System.out.println(&quot;-------------------------------------&quot;);

        Day d=Enum.valueOf(Day.class,days[0].name());
        Day d2=Day.valueOf(Day.class,days[0].name());
        System.out.println(&quot;d:&quot;+d);
        System.out.println(&quot;d2:&quot;+d2);
    }
 /**
 执行结果:
   day[0].ordinal():0
   day[1].ordinal():1
   day[2].ordinal():2
   day[3].ordinal():3
   day[4].ordinal():4
   day[5].ordinal():5
   day[6].ordinal():6
   -------------------------------------
   days[0].compareTo(days[1]):-1
   days[0].compareTo(days[1]):-2
   clazz:class com.zejian.enumdemo.Day
   -------------------------------------
   days[0].name():MONDAY
   days[1].name():TUESDAY
   days[2].name():WEDNESDAY
   days[3].name():THURSDAY
   -------------------------------------
   days[0].toString():MONDAY
   days[1].toString():TUESDAY
   days[2].toString():WEDNESDAY
   days[3].toString():THURSDAY
   -------------------------------------
   d:MONDAY
   d2:MONDAY
   */

}
enum Day {
    MONDAY, TUESDAY, WEDNESDAY,
    THURSDAY, FRIDAY, SATURDAY, SUNDAY
}
</code></pre><p><font size="4">到此对于抽象类Enum类的基本内容就介绍完了，这里提醒大家一点，Enum类内部会有一个构造函数，该构造函数只能有编译器调用，我们是无法手动操作的，不妨看看Enum类的主要源码：</font><br> </p>
<pre><code>//实现了Comparable
public abstract class Enum&lt;E extends Enum&lt;E&gt;&gt;
        implements Comparable&lt;E&gt;, Serializable {

    private final String name; //枚举字符串名称

    public final String name() {
        return name;
    }

    private final int ordinal;//枚举顺序值

    public final int ordinal() {
        return ordinal;
    }

    //枚举的构造方法，只能由编译器调用
    protected Enum(String name, int ordinal) {
        this.name = name;
        this.ordinal = ordinal;
    }

    public String toString() {
        return name;
    }

    public final boolean equals(Object other) {
        return this==other;
    }

    //比较的是ordinal值
    public final int compareTo(E o) {
        Enum&lt;?&gt; other = (Enum&lt;?&gt;)o;
        Enum&lt;E&gt; self = this;
        if (self.getClass() != other.getClass() &amp;&amp; // optimization
            self.getDeclaringClass() != other.getDeclaringClass())
            throw new ClassCastException();
        return self.ordinal - other.ordinal;//根据ordinal值比较大小
    }

    @SuppressWarnings(&quot;unchecked&quot;)
    public final Class&lt;E&gt; getDeclaringClass() {
        //获取class对象引用，getClass()是Object的方法
        Class&lt;?&gt; clazz = getClass();
        //获取父类Class对象引用
        Class&lt;?&gt; zuper = clazz.getSuperclass();
        return (zuper == Enum.class) ? (Class&lt;E&gt;)clazz : (Class&lt;E&gt;)zuper;
    }


    public static &lt;T extends Enum&lt;T&gt;&gt; T valueOf(Class&lt;T&gt; enumType,
                                                String name) {
        //enumType.enumConstantDirectory()获取到的是一个map集合，key值就是name值，value则是枚举变量值   
        //enumConstantDirectory是class对象内部的方法，根据class对象获取一个map集合的值       
        T result = enumType.enumConstantDirectory().get(name);
        if (result != null)
            return result;
        if (name == null)
            throw new NullPointerException(&quot;Name is null&quot;);
        throw new IllegalArgumentException(
            &quot;No enum constant &quot; + enumType.getCanonicalName() + &quot;.&quot; + name);
    }

    //.....省略其他没用的方法
}
</code></pre><p><font size="4">通过Enum源码，可以知道，Enum实现了Comparable接口，这也是可以使用compareTo比较的原因，当然Enum构造函数也是存在的，该函数只能由编译器调用，毕竟我们只能使用enum关键字定义枚举，其他事情就放心交给编译器吧。</font><br> </p>
<pre><code>//由编译器调用
protected Enum(String name, int ordinal) {
        this.name = name;
        this.ordinal = ordinal;
    }
</code></pre><p></p><h2><font color="red">编译器生成的Values方法与ValueOf方法</font></h2><p></p>
<p><font size="4">values()方法和valueOf(String name)方法是编译器生成的static方法，因此从前面的分析中，在Enum类中并没出现values()方法，但valueOf()方法还是有出现的，只不过编译器生成的valueOf()方法需传递一个name参数，而Enum自带的静态方法valueOf()则需要传递两个方法，从前面反编译后的代码可以看出，编译器生成的valueOf方法最终还是调用了Enum类的valueOf方法，下面通过代码来演示这两个方法的作用：</font><br> </p>
<pre><code>Day[] days2 = Day.values();
System.out.println(&quot;day2:&quot;+Arrays.toString(days2));
Day day = Day.valueOf(&quot;MONDAY&quot;);
System.out.println(&quot;day:&quot;+day);

/**
 输出结果:
 day2:[MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY]
 day:MONDAY
 */
</code></pre><p><font size="4">从结果可知道，values()方法的作用就是获取枚举类中的所有变量，并作为数组返回，而valueOf(String name)方法与Enum类中的valueOf方法的作用类似根据名称获取枚举变量，只不过编译器生成的valueOf方法更简洁些只需传递一个参数。这里我们还必须注意到，由于values()方法是由编译器插入到枚举类中的static方法，所以如果我们将枚举实例向上转型为Enum，那么values()方法将无法被调用，因为Enum类中并没有values()方法，valueOf()方法也是同样的道理，注意是一个参数的。</font><br> </p>
<pre><code>//正常使用
Day[] ds=Day.values();
//向上转型Enum
Enum e = Day.MONDAY;
//无法调用,没有此方法
//e.values();
</code></pre><p></p><h2><font color="red">枚举与Class对象</font></h2><p></p>
<p><font size="4">上述我们提到当枚举实例向上转型为Enum类型后，values()方法将会失效，也就无法一次性获取所有枚举实例变量，但是由于Class对象的存在，即使不使用values()方法，还是有可能一次获取到所有枚举实例变量的，在Class对象中存在如下方法：</font><br><br><img src="/photo/5-7/b.png" alt="alt text"><br></p>
<p><font size="4">因此通过getEnumConstants()方法，同样可以轻而易举地获取所有枚举实例变量下面通过代码来演示这个功能：</font><br> </p>
<pre><code>//正常使用
Day[] ds=Day.values();
//向上转型Enum
Enum e = Day.MONDAY;
//无法调用,没有此方法
//e.values();
//获取class对象引用
Class&lt;?&gt; clasz = e.getDeclaringClass();
if(clasz.isEnum()) {
    Day[] dsz = (Day[]) clasz.getEnumConstants();
    System.out.println(&quot;dsz:&quot;+Arrays.toString(dsz));
}

/**
   输出结果:
   dsz:[MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY]
 */
</code></pre><p><font size="4">正如上述代码所展示，通过Enum的class对象的getEnumConstants方法，我们仍能一次性获取所有的枚举实例常量。</font><br> </p>
<p></p><h2><font color="red">枚举的进阶用法</font></h2><p></p>
<p><font size="4">在前面的分析中，我们都是基于简单枚举类型的定义，也就是在定义枚举时只定义了枚举实例类型，并没定义方法或者成员变量，实际上使用关键字enum定义的枚举类，除了不能使用继承(因为编译器会自动为我们继承Enum抽象类而Java只支持单继承，因此枚举类是无法手动实现继承的)，可以把enum类当成常规类，也就是说我们可以向enum类中添加方法和变量，甚至是mian方法，下面就来感受一把。</font><br> </p>
<p></p><h2><font color="red">向enum类添加方法与自定义构造函数</font></h2><p></p>
<p><font size="4">重新定义一个日期枚举类，带有desc成员变量描述该日期的对于中文描述，同时定义一个getDesc方法，返回中文描述内容，自定义私有构造函数，在声明枚举实例时传入对应的中文描述，代码如下：</font><br> </p>
<pre><code>public enum Day2 {
    MONDAY(&quot;星期一&quot;),
    TUESDAY(&quot;星期二&quot;),
    WEDNESDAY(&quot;星期三&quot;),
    THURSDAY(&quot;星期四&quot;),
    FRIDAY(&quot;星期五&quot;),
    SATURDAY(&quot;星期六&quot;),
    SUNDAY(&quot;星期日&quot;);//记住要用分号结束

    private String desc;//中文描述

    /**
     * 私有构造,防止被外部调用
     * @param desc
     */
    private Day2(String desc){
        this.desc=desc;
    }

    /**
     * 定义方法,返回描述,跟常规类的定义没区别
     * @return
     */
    public String getDesc(){
        return desc;
    }

    public static void main(String[] args){
        for (Day2 day:Day2.values()) {
            System.out.println(&quot;name:&quot;+day.name()+
                    &quot;,desc:&quot;+day.getDesc());
        }
    }

    /**
     输出结果:
     name:MONDAY,desc:星期一
     name:TUESDAY,desc:星期二
     name:WEDNESDAY,desc:星期三
     name:THURSDAY,desc:星期四
     name:FRIDAY,desc:星期五
     name:SATURDAY,desc:星期六
     name:SUNDAY,desc:星期日
     */
}
</code></pre><p><font size="4">从上述代码可知，在enum类中确实可以像定义常规类一样声明变量或者成员方法。但是我们必须注意到，如果打算在enum类中定义方法，务必在声明完枚举实例后使用分号分开，倘若在枚举实例前定义任何方法，编译器都将会报错，无法编译通过，同时即使自定义了构造函数且enum的定义结束，我们也永远无法手动调用构造函数创建枚举实例，毕竟这事只能由编译器执行。</font><br> </p>
<p></p><h2><font color="red">关于覆盖enum类方法</font></h2><p></p>
<p><font size="4">既然enum类跟常规类的定义没什么区别（实际上enum还是有些约束的），那么覆盖父类的方法也不会是什么难说，可惜的是父类Enum中的定义的方法只有toString方法没有使用final修饰，因此只能覆盖toString方法，如下通过覆盖toString省去了getDesc方法：</font><br> </p>
<pre><code>public enum Day2 {
    MONDAY(&quot;星期一&quot;),
    TUESDAY(&quot;星期二&quot;),
    WEDNESDAY(&quot;星期三&quot;),
    THURSDAY(&quot;星期四&quot;),
    FRIDAY(&quot;星期五&quot;),
    SATURDAY(&quot;星期六&quot;),
    SUNDAY(&quot;星期日&quot;);//记住要用分号结束

    private String desc;//中文描述

    /**
     * 私有构造,防止被外部调用
     * @param desc
     */
    private Day2(String desc){
        this.desc=desc;
    }

    /**
     * 覆盖
     * @return
     */
    @Override
    public String toString() {
        return desc;
    }


    public static void main(String[] args){
        for (Day2 day:Day2.values()) {
            System.out.println(&quot;name:&quot;+day.name()+
                    &quot;,desc:&quot;+day.toString());
        }
    }

    /**
     输出结果:
     name:MONDAY,desc:星期一
     name:TUESDAY,desc:星期二
     name:WEDNESDAY,desc:星期三
     name:THURSDAY,desc:星期四
     name:FRIDAY,desc:星期五
     name:SATURDAY,desc:星期六
     name:SUNDAY,desc:星期日
     */
}
</code></pre><p></p><h2><font color="red">enum类中定义抽象方法</font></h2><p></p>
<p><font size="4">与常规抽象类一样，enum类允许我们为其定义抽象方法，然后使每个枚举实例都实现该方法，以便产生不同的行为方式，注意abstract关键字对于枚举类来说并不是必须的如下：</font><br> </p>
<pre><code>public enum EnumDemo3 {

    FIRST{
        @Override
        public String getInfo() {
            return &quot;FIRST TIME&quot;;
        }
    },
    SECOND{
        @Override
        public String getInfo() {
            return &quot;SECOND TIME&quot;;
        }
    }

    ;

    /**
     * 定义抽象方法
     * @return
     */
    public abstract String getInfo();

    //测试
    public static void main(String[] args){
        System.out.println(&quot;F:&quot;+EnumDemo3.FIRST.getInfo());
        System.out.println(&quot;S:&quot;+EnumDemo3.SECOND.getInfo());
        /**
         输出结果:
         F:FIRST TIME
         S:SECOND TIME
         */
    }
}
</code></pre><p><font size="4">通过这种方式就可以轻而易举地定义每个枚举实例的不同行为方式。我们可能注意到，enum类的实例似乎表现出了多态的特性，可惜的是枚举类型的实例终究不能作为类型传递使用，就像下面的使用方式，编译器是不可能答应的：</font><br> </p>
<pre><code>//无法通过编译,毕竟EnumDemo3.FIRST是个实例对象
 public void text(EnumDemo3.FIRST instance){ }
</code></pre><p><font size="4">在枚举实例常量中定义抽象方法</font><br> </p>
<p></p><h2><font color="red">enum类与接口</font></h2><p></p>
<p><font size="4">由于Java单继承的原因，enum类并不能再继承其它类，但并不妨碍它实现接口，因此enum类同样是可以实现多接口的，如下：</font><br> </p>
<pre><code>interface food{
    void eat();
}

interface sport{
    void run();
}

public enum EnumDemo2 implements food ,sport{
    FOOD,
    SPORT,
    ; //分号分隔

    @Override
    public void eat() {
        System.out.println(&quot;eat.....&quot;);
    }

    @Override
    public void run() {
        System.out.println(&quot;run.....&quot;);
    }
}
</code></pre><p><font size="4">有时候，我们可能需要对一组数据进行分类，比如进行食物菜单分类而且希望这些菜单都属于food类型，appetizer(开胃菜)、mainCourse(主菜)、dessert(点心)、Coffee等，每种分类下有多种具体的菜式或食品，此时可以利用接口来组织，如下(代码引用自Thinking in Java)：</font><br> </p>
<pre><code>public interface Food {
  enum Appetizer implements Food {
    SALAD, SOUP, SPRING_ROLLS;
  }
  enum MainCourse implements Food {
    LASAGNE, BURRITO, PAD_THAI,
    LENTILS, HUMMOUS, VINDALOO;
  }
  enum Dessert implements Food {
    TIRAMISU, GELATO, BLACK_FOREST_CAKE,
    FRUIT, CREME_CARAMEL;
  }
  enum Coffee implements Food {
    BLACK_COFFEE, DECAF_COFFEE, ESPRESSO,
    LATTE, CAPPUCCINO, TEA, HERB_TEA;
  }
}

public class TypeOfFood {
  public static void main(String[] args) {
    Food food = Appetizer.SALAD;
    food = MainCourse.LASAGNE;
    food = Dessert.GELATO;
    food = Coffee.CAPPUCCINO;
  }
} 
</code></pre><p><font size="4">通过这种方式可以很方便组织上述的情景，同时确保每种具体类型的食物也属于Food，现在我们利用一个枚举嵌套枚举的方式，把前面定义的菜谱存放到一个Meal菜单中，通过这种方式就可以统一管理菜单的数据了。</font><br> </p>
<pre><code>public enum Meal{
  APPETIZER(Food.Appetizer.class),
  MAINCOURSE(Food.MainCourse.class),
  DESSERT(Food.Dessert.class),
  COFFEE(Food.Coffee.class);
  private Food[] values;
  private Meal(Class&lt;? extends Food&gt; kind) {
    //通过class对象获取枚举实例
    values = kind.getEnumConstants();
  }
  public interface Food {
    enum Appetizer implements Food {
      SALAD, SOUP, SPRING_ROLLS;
    }
    enum MainCourse implements Food {
      LASAGNE, BURRITO, PAD_THAI,
      LENTILS, HUMMOUS, VINDALOO;
    }
    enum Dessert implements Food {
      TIRAMISU, GELATO, BLACK_FOREST_CAKE,
      FRUIT, CREME_CARAMEL;
    }
    enum Coffee implements Food {
      BLACK_COFFEE, DECAF_COFFEE, ESPRESSO,
      LATTE, CAPPUCCINO, TEA, HERB_TEA;
    }
  }
} 
</code></pre><p></p><h2><font color="red">枚举与switch</font></h2><p></p>
<p><font size="4">关于枚举与switch是个比较简单的话题，使用switch进行条件判断时，条件参数一般只能是整型，字符型。而枚举型确实也被switch所支持，在java 1.7后switch也对字符串进行了支持。这里我们简单看一下switch与枚举类型的使用：</font><br> </p>
<pre><code>enum Color {GREEN,RED,BLUE}

public class EnumDemo4 {

    public static void printName(Color color){
        switch (color){
            case BLUE: //无需使用Color进行引用
                System.out.println(&quot;蓝色&quot;);
                break;
            case RED:
                System.out.println(&quot;红色&quot;);
                break;
            case GREEN:
                System.out.println(&quot;绿色&quot;);
                break;
        }
    }

    public static void main(String[] args){
        printName(Color.BLUE);
        printName(Color.RED);
        printName(Color.GREEN);

        //蓝色
        //红色
        //绿色
    }
}
</code></pre><p><font size="4">需要注意的是使用在于switch条件进行结合使用时，无需使用Color引用。</font><br> </p>
<p></p><h2><font color="red">枚举与单例模式</font></h2><p></p>
<p><font size="4">单例模式可以说是最常使用的设计模式了，它的作用是确保某个类只有一个实例，自行实例化并向整个系统提供这个实例。在实际应用中，线程池、缓存、日志对象、对话框对象常被设计成单例，总之，选择单例模式就是为了避免不一致状态，下面我们将会简单说明单例模式的几种主要编写方式，从而对比出使用枚举实现单例模式的优点。首先看看饿汉式的单例模式：</font><br> </p>
<pre><code>public class SingletonHungry {

    private static SingletonHungry instance = new SingletonHungry();

    private SingletonHungry() {
    }

    public static SingletonHungry getInstance() {
        return instance;
    }
}
</code></pre><p><font size="4">显然这种写法比较简单，但问题是无法做到延迟创建对象，事实上如果该单例类涉及资源较多，创建比较耗时间时，我们更希望它可以尽可能地延迟加载，从而减小初始化的负载，于是便有了如下的懒汉式单例：</font><br> </p>
<pre><code>public class SingletonLazy {

    private static volatile SingletonLazy instance;

    private SingletonLazy() {
    }

    public static synchronized SingletonLazy getInstance() {
        if (instance == null) {
            instance = new SingletonLazy();
        }
        return instance;
    }
}
</code></pre><p><font size="4">这种写法能够在多线程中很好的工作避免同步问题，同时也具备lazy loading机制，遗憾的是，由于synchronized的存在，效率很低，在单线程的情景下，完全可以去掉synchronized，为了兼顾效率与性能问题，改进后代码如下：</font><br> </p>
<pre><code>public class Singleton {
    private static volatile Singleton singleton = null;

    private Singleton(){}

    public static Singleton getSingleton(){
        if(singleton == null){
            synchronized (Singleton.class){
                if(singleton == null){
                    singleton = new Singleton();
                }
            }
        }
        return singleton;
    }    
}
</code></pre><p><font size="4">这种编写方式被称为“双重检查锁”，主要在getSingleton()方法中，进行两次null检查。这样可以极大提升并发度，进而提升性能。毕竟在单例中new的情况非常少，绝大多数都是可以并行的读操作，因此在加锁前多进行一次null检查就可以减少绝大多数的加锁操作，也就提高了执行效率。但是必须注意的是volatile关键字，该关键字有两层语义。第一层语义是可见性，可见性是指在一个线程中对该变量的修改会马上由工作内存（Work Memory）写回主内存（Main Memory），所以其它线程会马上读取到已修改的值，关于工作内存和主内存可简单理解为高速缓存（直接与CPU打交道）和主存（日常所说的内存条），注意工作内存是线程独享的，主存是线程共享的。volatile的第二层语义是禁止指令重排序优化，我们写的代码（特别是多线程代码），由于编译器优化，在实际执行的时候可能与我们编写的顺序不同。编译器只保证程序执行结果与源代码相同，却不保证实际指令的顺序与源代码相同，这在单线程并没什么问题，然而一旦引入多线程环境，这种乱序就可能导致严重问题。volatile关键字就可以从语义上解决这个问题，值得关注的是volatile的禁止指令重排序优化功能在Java 1.5后才得以实现，因此1.5前的版本仍然是不安全的，即使使用了volatile关键字。或许我们可以利用静态内部类来实现更安全的机制，静态内部类单例模式如下：</font><br> </p>
<pre><code>public class SingletonInner {
    private static class Holder {
        private static SingletonInner singleton = new SingletonInner();
    }

    private SingletonInner(){}

    public static SingletonInner getSingleton(){
        return Holder.singleton;
    }
}
</code></pre><p><font size="4">正如上述代码所展示的，我们把Singleton实例放到一个静态内部类中，这样可以避免了静态实例在Singleton类的加载阶段（类加载过程的其中一个阶段的，此时只创建了Class对象，关于Class对象可以看博主另外一篇博文， <a href="https://blog.csdn.net/javazejian/article/details/70768369" target="_blank" rel="noopener">深入理解Java类型信息(Class对象)与反射机制）</a>就创建对象，毕竟静态变量初始化是在SingletonInner类初始化时触发的，并且由于静态内部类只会被加载一次，所以这种写法也是线程安全的。从上述4种单例模式的写法中，似乎也解决了效率与懒加载的问题，但是它们都有两个共同的缺点：</font><br> </p>
<font size="4">

<ul>
<li>序列化可能会破坏单例模式，比较每次反序列化一个序列化的对象实例时都会创建一个新的实例，解决方案如下：</li></ul></font><br> 

<pre><code>//测试例子(四种写解决方式雷同)
public class Singleton implements java.io.Serializable {     
   public static Singleton INSTANCE = new Singleton();     

   protected Singleton() {     
   }  

   //反序列时直接返回当前INSTANCE
   private Object readResolve() {     
            return INSTANCE;     
      }    
} 
</code></pre><font size="4">

<ul>
<li>使用反射强行调用私有构造器，解决方式可以修改构造器，让它在创建第二个实例的时候抛异常，如下：</li></ul></font><br>

<pre><code>public static Singleton INSTANCE = new Singleton();     
private static volatile  boolean  flag = true;
private Singleton(){
    if(flag){
    flag = false;   
    }else{
        throw new RuntimeException(&quot;The instance  already exists ！&quot;);
    }
}
</code></pre><p><font size="4">如上所述，问题确实也得到了解决，但问题是我们为此付出了不少努力，即添加了不少代码，还应该注意到如果单例类维持了其他对象的状态时还需要使他们成为transient的对象，这种就更复杂了，那有没有更简单更高效的呢？当然是有的，那就是枚举单例了，先来看看如何实现：</font><br> </p>
<pre><code>public enum  SingletonEnum {
    INSTANCE;
    private String name;
    public String getName(){
        return name;
    }
    public void setName(String name){
        this.name = name;
    }
}
</code></pre><p><font size="4">代码相当简洁，我们也可以像常规类一样编写enum类，为其添加变量和方法，访问方式也更简单，使用SingletonEnum.INSTANCE进行访问，这样也就避免调用getInstance方法，更重要的是使用枚举单例的写法，我们完全不用考虑序列化和反射的问题。枚举序列化是由jvm保证的，每一个枚举类型和定义的枚举变量在JVM中都是唯一的，在枚举类型的序列化和反序列化上，Java做了特殊的规定：在序列化时Java仅仅是将枚举对象的name属性输出到结果中，反序列化的时候则是通过java.lang.Enum的valueOf方法来根据名字查找枚举对象。同时，编译器是不允许任何对这种序列化机制的定制的并禁用了writeObject、readObject、readObjectNoData、writeReplace和readResolve等方法，从而保证了枚举实例的唯一性，这里我们不妨再次看看Enum类的valueOf方法：</font><br> </p>
<pre><code>public static &lt;T extends Enum&lt;T&gt;&gt; T valueOf(Class&lt;T&gt; enumType,
                                              String name) {
      T result = enumType.enumConstantDirectory().get(name);
      if (result != null)
          return result;
      if (name == null)
          throw new NullPointerException(&quot;Name is null&quot;);
      throw new IllegalArgumentException(
          &quot;No enum constant &quot; + enumType.getCanonicalName() + &quot;.&quot; + name);
  }
</code></pre><p><font size="4">实际上通过调用enumType(Class对象的引用)的enumConstantDirectory方法获取到的是一个Map集合，在该集合中存放了以枚举name为key和以枚举实例变量为value的Key&amp;Value数据，因此通过name的值就可以获取到枚举实例，看看enumConstantDirectory方法源码：</font><br> </p>
<pre><code>Map&lt;String, T&gt; enumConstantDirectory() {
        if (enumConstantDirectory == null) {
            //getEnumConstantsShared最终通过反射调用枚举类的values方法
            T[] universe = getEnumConstantsShared();
            if (universe == null)
                throw new IllegalArgumentException(
                    getName() + &quot; is not an enum type&quot;);
            Map&lt;String, T&gt; m = new HashMap&lt;&gt;(2 * universe.length);
            //map存放了当前enum类的所有枚举实例变量，以name为key值
            for (T constant : universe)
                m.put(((Enum&lt;?&gt;)constant).name(), constant);
            enumConstantDirectory = m;
        }
        return enumConstantDirectory;
    }
    private volatile transient Map&lt;String, T&gt; enumConstantDirectory = null;
</code></pre><p><font size="4">到这里我们也就可以看出枚举序列化确实不会重新创建新实例，jvm保证了每个枚举实例变量的唯一性。再来看看反射到底能不能创建枚举，下面试图通过反射获取构造器并创建枚举</font><br> </p>
<pre><code>public static void main(String[] args) throws IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchMethodException {
  //获取枚举类的构造函数(前面的源码已分析过)
   Constructor&lt;SingletonEnum&gt; constructor=SingletonEnum.class.getDeclaredConstructor(String.class,int.class);
   constructor.setAccessible(true);
   //创建枚举
   SingletonEnum singleton=constructor.newInstance(&quot;otherInstance&quot;,9);
  }
</code></pre><p><font size="4">执行报错</font><br> </p>
<pre><code>Exception in thread &quot;main&quot; java.lang.IllegalArgumentException: Cannot reflectively create enum objects
    at java.lang.reflect.Constructor.newInstance(Constructor.java:417)
    at zejian.SingletonEnum.main(SingletonEnum.java:38)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:498)
    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)
</code></pre><p><font size="4">显然告诉我们不能使用反射创建枚举类，这是为什么呢？不妨看看newInstance方法源码：</font><br> </p>
<pre><code>public T newInstance(Object ... initargs)
        throws InstantiationException, IllegalAccessException,
               IllegalArgumentException, InvocationTargetException
    {
        if (!override) {
            if (!Reflection.quickCheckMemberAccess(clazz, modifiers)) {
                Class&lt;?&gt; caller = Reflection.getCallerClass();
                checkAccess(caller, clazz, null, modifiers);
            }
        }
        //这里判断Modifier.ENUM是不是枚举修饰符，如果是就抛异常
        if ((clazz.getModifiers() &amp; Modifier.ENUM) != 0)
            throw new IllegalArgumentException(&quot;Cannot reflectively create enum objects&quot;);
        ConstructorAccessor ca = constructorAccessor;   // read volatile
        if (ca == null) {
            ca = acquireConstructorAccessor();
        }
        @SuppressWarnings(&quot;unchecked&quot;)
        T inst = (T) ca.newInstance(initargs);
        return inst;
    }
</code></pre><p><font size="4">源码很了然，确实无法使用反射创建枚举实例，也就是说明了创建枚举实例只有编译器能够做到而已。显然枚举单例模式确实是很不错的选择，因此我们推荐使用它。但是这总不是万能的，对于android平台这个可能未必是最好的选择，在android开发中，内存优化是个大块头，而使用枚举时占用的内存常常是静态变量的两倍还多，因此android官方在内存优化方面给出的建议是尽量避免在android中使用enum。但是不管如何，关于单例，我们总是应该记住：线程安全，延迟加载，序列化与反序列化安全，反射安全是很重要的。</font><br> </p>
<p></p><h2><font color="red">EnumMap</font></h2><p></p>
<p></p><h2><font color="red">EnumMap基本用法</font></h2><p></p>
<p><font size="4">先思考这样一个问题，现在我们有一堆size大小相同而颜色不同的数据，需要统计出每种颜色的数量是多少以便将数据录入仓库，定义如下枚举用于表示颜色Color:</font><br> </p>
<pre><code>enum Color {
    GREEN,RED,BLUE,YELLOW
}
</code></pre><p><font size="4">我们有如下解决方案，使用Map集合来统计，key值作为颜色名称，value代表衣服数量，如下：</font><br> </p>
<pre><code>import java.util.*;

/**
 * Created by zejian on 2017/5/10.
 * Blog : http://blog.csdn.net/javazejian [原文地址,请尊重原创]
 */
public class EnumMapDemo {
    public static void main(String[] args){
        List&lt;Clothes&gt; list = new ArrayList&lt;&gt;();
        list.add(new Clothes(&quot;C001&quot;,Color.BLUE));
        list.add(new Clothes(&quot;C002&quot;,Color.YELLOW));
        list.add(new Clothes(&quot;C003&quot;,Color.RED));
        list.add(new Clothes(&quot;C004&quot;,Color.GREEN));
        list.add(new Clothes(&quot;C005&quot;,Color.BLUE));
        list.add(new Clothes(&quot;C006&quot;,Color.BLUE));
        list.add(new Clothes(&quot;C007&quot;,Color.RED));
        list.add(new Clothes(&quot;C008&quot;,Color.YELLOW));
        list.add(new Clothes(&quot;C009&quot;,Color.YELLOW));
        list.add(new Clothes(&quot;C010&quot;,Color.GREEN));
        //方案1:使用HashMap
        Map&lt;String,Integer&gt; map = new HashMap&lt;&gt;();
        for (Clothes clothes:list){
           String colorName=clothes.getColor().name();
           Integer count = map.get(colorName);
            if(count!=null){
                map.put(colorName,count+1);
            }else {
                map.put(colorName,1);
            }
        }

        System.out.println(map.toString());

        System.out.println(&quot;---------------&quot;);

        //方案2:使用EnumMap
        Map&lt;Color,Integer&gt; enumMap=new EnumMap&lt;&gt;(Color.class);

        for (Clothes clothes:list){
            Color color=clothes.getColor();
            Integer count = enumMap.get(color);
            if(count!=null){
                enumMap.put(color,count+1);
            }else {
                enumMap.put(color,1);
            }
        }

        System.out.println(enumMap.toString());
    }

    /**
     输出结果:
     {RED=2, BLUE=3, YELLOW=3, GREEN=2}
     ---------------
     {GREEN=2, RED=2, BLUE=3, YELLOW=3}
     */
}
</code></pre><p><font size="4">代码比较简单，我们使用两种解决方案，一种是HashMap，一种EnumMap，虽然都统计出了正确的结果，但是EnumMap作为枚举的专属的集合，我们没有理由再去使用HashMap，毕竟EnumMap要求其Key必须为Enum类型，因而使用Color枚举实例作为key是最恰当不过了，也避免了获取name的步骤，更重要的是EnumMap效率更高，因为其内部是通过数组实现的（稍后分析），注意EnumMap的key值不能为null，虽说是枚举专属集合，但其操作与一般的Map差不多，概括性来说EnumMap是专门为枚举类型量身定做的Map实现，虽然使用其它的Map（如HashMap）也能完成相同的功能，但是使用EnumMap会更加高效，它只能接收同一枚举类型的实例作为键值且不能为null，由于枚举类型实例的数量相对固定并且有限，所以EnumMap使用数组来存放与枚举类型对应的值，毕竟数组是一段连续的内存空间，根据程序局部性原理，效率会相当高。下面我们来进一步了解EnumMap的用法，先看构造函数：</font><br> </p>
<pre><code>//创建一个具有指定键类型的空枚举映射。
EnumMap(Class&lt;K&gt; keyType) 
//创建一个其键类型与指定枚举映射相同的枚举映射，最初包含相同的映射关系（如果有的话）。     
EnumMap(EnumMap&lt;K,? extends V&gt; m) 
//创建一个枚举映射，从指定映射对其初始化。
EnumMap(Map&lt;K,? extends V&gt; m)   
</code></pre><p><font size="4">与HashMap不同，它需要传递一个类型信息，即Class对象，通过这个参数EnumMap就可以根据类型信息初始化其内部数据结构，另外两只是初始化时传入一个Map集合，代码演示如下：</font><br> </p>
<pre><code>//使用第一种构造
Map&lt;Color,Integer&gt; enumMap=new EnumMap&lt;&gt;(Color.class);
//使用第二种构造
Map&lt;Color,Integer&gt; enumMap2=new EnumMap&lt;&gt;(enumMap);
//使用第三种构造
Map&lt;Color,Integer&gt; hashMap = new HashMap&lt;&gt;();
hashMap.put(Color.GREEN, 2);
hashMap.put(Color.BLUE, 3);
Map&lt;Color, Integer&gt; enumMap = new EnumMap&lt;&gt;(hashMap);
</code></pre><p><font size="4">至于EnumMap的方法，跟普通的map几乎没有区别，注意与HashMap的主要不同在于构造方法需要传递类型参数和EnumMap保证Key顺序与枚举中的顺序一致，但请记住Key不能为null。</font><br> </p>
<p></p><h2><font color="red">EnumMap实现原理剖析</font></h2><p></p>
<p><font size="4">EnumMap的源码有700多行，这里我们主要分析其内部存储结构，添加查找的实现，了解这几点，对应EnumMap内部实现原理也就比较清晰了，先看数据结构和构造函数</font><br> </p>
<pre><code>public class EnumMap&lt;K extends Enum&lt;K&gt;, V&gt; extends AbstractMap&lt;K, V&gt;
    implements java.io.Serializable, Cloneable
{
    //Class对象引用
    private final Class&lt;K&gt; keyType;

    //存储Key值的数组
    private transient K[] keyUniverse;

    //存储Value值的数组
    private transient Object[] vals;

    //map的size
    private transient int size = 0;

    //空map
    private static final Enum&lt;?&gt;[] ZERO_LENGTH_ENUM_ARRAY = new Enum&lt;?&gt;[0];

    //构造函数
    public EnumMap(Class&lt;K&gt; keyType) {
        this.keyType = keyType;
        keyUniverse = getKeyUniverse(keyType);
        vals = new Object[keyUniverse.length];
    }

}
</code></pre><p><font size="4">EnumMap继承了AbstractMap类，因此EnumMap具备一般map的使用方法，keyType表示类型信息，keyUniverse表示键数组，存储的是所有可能的枚举值，vals数组表示键对应的值，size表示键值对个数。在构造函数中通过keyUniverse = getKeyUniverse(keyType);初始化了keyUniverse数组的值，内部存储的是所有可能的枚举值，接着初始化了存在Value值得数组vals，其大小与枚举实例的个数相同，getKeyUniverse方法实现如下</font><br> </p>
<pre><code>//返回枚举数组
private static &lt;K extends Enum&lt;K&gt;&gt; K[] getKeyUniverse(Class&lt;K&gt; keyType) {
        //最终调用到枚举类型的values方法，values方法返回所有可能的枚举值
        return SharedSecrets.getJavaLangAccess()
                                        .getEnumConstantsShared(keyType);
    }
</code></pre><p><font size="4">从方法的返回值来看，返回类型是枚举数组，事实也是如此，最终返回值正是枚举类型的values方法的返回值，前面我们分析过values方法返回所有可能的枚举值，因此keyUniverse数组存储就是枚举类型的所有可能的枚举值。接着看put方法的实现</font><br> </p>
<pre><code>public V put(K key, V value) {
       typeCheck(key);//检测key的类型
       //获取存放value值得数组下标
       int index = key.ordinal();
       //获取旧值
       Object oldValue = vals[index];
       //设置value值
       vals[index] = maskNull(value);
       if (oldValue == null)
           size++;
       return unmaskNull(oldValue);//返回旧值
   }
</code></pre><p><font size="4">这里通过typeCheck方法进行了key类型检测，判断是否为枚举类型，如果类型不对，会抛出异常</font><br> </p>
<pre><code>private void typeCheck(K key) {
   Class&lt;?&gt; keyClass = key.getClass();//获取类型信息
   if (keyClass != keyType &amp;&amp; keyClass.getSuperclass() != keyType)
       throw new ClassCastException(keyClass + &quot; != &quot; + keyType);
}
</code></pre><p><font size="4">接着通过int index = key.ordinal()的方式获取到该枚举实例的顺序值，利用此值作为下标，把值存储在vals数组对应下标的元素中即vals[index]，这也是为什么EnumMap能维持与枚举实例相同存储顺序的原因，我们发现在对vals[]中元素进行赋值和返回旧值时分别调用了maskNull方法和unmaskNull方法</font><br> </p>
<pre><code>//代表NULL值得空对象实例
  private static final Object NULL = new Object() {
        public int hashCode() {
            return 0;
        }

        public String toString() {
            return &quot;java.util.EnumMap.NULL&quot;;
        }
    };

    private Object maskNull(Object value) {
        //如果值为空，返回NULL对象，否则返回value
        return (value == null ? NULL : value);
    }

    @SuppressWarnings(&quot;unchecked&quot;)
    private V unmaskNull(Object value) {
        //将NULL对象转换为null值
        return (V)(value == NULL ? null : value);
    }
</code></pre><p><font size="4">由此看来EnumMap还是允许存放null值的，但key绝对不能为null，对于null值，EnumMap进行了特殊处理,将其包装为NULL对象，毕竟vals[]存的是Object，maskNull方法和unmaskNull方法正是用于null的包装和解包装的。这就是EnumMap集合的添加过程。下面接着看获取方法</font><br> </p>
<pre><code>public V get(Object key) {
       return (isValidKey(key) ?
               unmaskNull(vals[((Enum&lt;?&gt;)key).ordinal()]) : null);
   }

//对Key值的有效性和类型信息进行判断
private boolean isValidKey(Object key) {
     if (key == null)
         return false;

     // Cheaper than instanceof Enum followed by getDeclaringClass
     Class&lt;?&gt; keyClass = key.getClass();
     return keyClass == keyType || keyClass.getSuperclass() == keyType;
 }
</code></pre><p><font size="4">相对应put方法，get方法显示相当简洁，key有效的话，直接通过ordinal方法取索引，然后在值数组vals里通过索引获取值返回。remove方法如下：</font><br> </p>
<pre><code>public V remove(Object key) {
        //判断key值是否有效
        if (!isValidKey(key))
            return null;
        //直接获取索引
        int index = ((Enum&lt;?&gt;)key).ordinal();

        Object oldValue = vals[index];
        //对应下标元素值设置为null
        vals[index] = null;
        if (oldValue != null)
            size--;//减size
        return unmaskNull(oldValue);
    }
</code></pre><p><font size="4">非常简单，key值有效，通过key获取下标索引值，把vals[]对应下标值设置为null，size减一。查看是否包含某个值，</font><br> </p>
<pre><code>判断是否包含某value
public boolean containsValue(Object value) {
    value = maskNull(value);
    //遍历数组实现
    for (Object val : vals)
        if (value.equals(val))
            return true;

    return false;
}
//判断是否包含key
public boolean containsKey(Object key) {
    return isValidKey(key) &amp;&amp; vals[((Enum&lt;?&gt;)key).ordinal()] != null;
}
</code></pre><p><font size="4">判断value直接通过遍历数组实现，而判断key就更简单了，判断key是否有效和对应vals[]中是否存在该值。ok~，这就是EnumMap的主要实现原理，即内部有两个数组，长度相同，一个表示所有可能的键(枚举值)，一个表示对应的值，不允许keynull，但允许value为null，键都有一个对应的索引，根据索引直接访问和操作其键数组和值数组，由于操作都是数组，因此效率很高。</font><br> </p>
<p></p><h2><font color="red">EnumSet</font></h2><p></p>
<p><font size="4">EnumSet是与枚举类型一起使用的专用 Set 集合，EnumSet 中所有元素都必须是枚举类型。与其他Set接口的实现类HashSet/TreeSet(内部都是用对应的HashMap/TreeMap实现的)不同的是，EnumSet在内部实现是位向量(稍后分析)，它是一种极为高效的位运算操作，由于直接存储和操作都是bit，因此EnumSet空间和时间性能都十分可观，足以媲美传统上基于 int 的“位标志”的运算，重要的是我们可像操作set集合一般来操作位运算，这样使用代码更简单易懂同时又具备类型安全的优势。注意EnumSet不允许使用 null 元素。试图插入 null 元素将抛出 NullPointerException，但试图测试判断是否存在null 元素或移除 null 元素则不会抛出异常，与大多数collection 实现一样，EnumSet不是线程安全的，因此在多线程环境下应该注意数据同步问题，ok~，下面先来简单看看EnumSet的使用方式。</font><br> </p>
<p></p><h2><font color="red">EnumSet用法</font></h2><p></p>
<p><font size="4">创建EnumSet并不能使用new关键字，因为它是个抽象类，而应该使用其提供的静态工厂方法，EnumSet的静态工厂方法比较多，如下：</font><br> </p>
<pre><code>创建一个具有指定元素类型的空EnumSet。
EnumSet&lt;E&gt;  noneOf(Class&lt;E&gt; elementType)       
//创建一个指定元素类型并包含所有枚举值的EnumSet
&lt;E extends Enum&lt;E&gt;&gt; EnumSet&lt;E&gt; allOf(Class&lt;E&gt; elementType)
// 创建一个包括枚举值中指定范围元素的EnumSet
&lt;E extends Enum&lt;E&gt;&gt; EnumSet&lt;E&gt; range(E from, E to)
// 初始集合包括指定集合的补集
&lt;E extends Enum&lt;E&gt;&gt; EnumSet&lt;E&gt; complementOf(EnumSet&lt;E&gt; s)
// 创建一个包括参数中所有元素的EnumSet
&lt;E extends Enum&lt;E&gt;&gt; EnumSet&lt;E&gt; of(E e)
&lt;E extends Enum&lt;E&gt;&gt; EnumSet&lt;E&gt; of(E e1, E e2)
&lt;E extends Enum&lt;E&gt;&gt; EnumSet&lt;E&gt; of(E e1, E e2, E e3)
&lt;E extends Enum&lt;E&gt;&gt; EnumSet&lt;E&gt; of(E e1, E e2, E e3, E e4)
&lt;E extends Enum&lt;E&gt;&gt; EnumSet&lt;E&gt; of(E e1, E e2, E e3, E e4, E e5)
&lt;E extends Enum&lt;E&gt;&gt; EnumSet&lt;E&gt; of(E first, E... rest)
//创建一个包含参数容器中的所有元素的EnumSet
&lt;E extends Enum&lt;E&gt;&gt; EnumSet&lt;E&gt; copyOf(EnumSet&lt;E&gt; s)
&lt;E extends Enum&lt;E&gt;&gt; EnumSet&lt;E&gt; copyOf(Collection&lt;E&gt; c)
</code></pre><p><font size="4">代码演示如下：</font><br> </p>
<pre><code>enum Color {
    GREEN , RED , BLUE , BLACK , YELLOW
}


public class EnumSetDemo {

    public static void main(String[] args){

        //空集合
        EnumSet&lt;Color&gt; enumSet= EnumSet.noneOf(Color.class);
        System.out.println(&quot;添加前：&quot;+enumSet.toString());
        enumSet.add(Color.GREEN);
        enumSet.add(Color.RED);
        enumSet.add(Color.BLACK);
        enumSet.add(Color.BLUE);
        enumSet.add(Color.YELLOW);
        System.out.println(&quot;添加后：&quot;+enumSet.toString());

        System.out.println(&quot;-----------------------------------&quot;);

        //使用allOf创建包含所有枚举类型的enumSet，其内部根据Class对象初始化了所有枚举实例
        EnumSet&lt;Color&gt; enumSet1= EnumSet.allOf(Color.class);
        System.out.println(&quot;allOf直接填充：&quot;+enumSet1.toString());

        System.out.println(&quot;-----------------------------------&quot;);

        //初始集合包括枚举值中指定范围的元素
        EnumSet&lt;Color&gt; enumSet2= EnumSet.range(Color.BLACK,Color.YELLOW);
        System.out.println(&quot;指定初始化范围：&quot;+enumSet2.toString());

        System.out.println(&quot;-----------------------------------&quot;);

        //指定补集，也就是从全部枚举类型中去除参数集合中的元素，如下去掉上述enumSet2的元素
        EnumSet&lt;Color&gt; enumSet3= EnumSet.complementOf(enumSet2);
        System.out.println(&quot;指定补集：&quot;+enumSet3.toString());

        System.out.println(&quot;-----------------------------------&quot;);

        //初始化时直接指定元素
        EnumSet&lt;Color&gt; enumSet4= EnumSet.of(Color.BLACK);
        System.out.println(&quot;指定Color.BLACK元素：&quot;+enumSet4.toString());
        EnumSet&lt;Color&gt; enumSet5= EnumSet.of(Color.BLACK,Color.GREEN);
        System.out.println(&quot;指定Color.BLACK和Color.GREEN元素：&quot;+enumSet5.toString());

        System.out.println(&quot;-----------------------------------&quot;);

        //复制enumSet5容器的数据作为初始化数据
        EnumSet&lt;Color&gt; enumSet6= EnumSet.copyOf(enumSet5);
        System.out.println(&quot;enumSet6：&quot;+enumSet6.toString());

        System.out.println(&quot;-----------------------------------&quot;);

        List&lt;Color&gt; list = new ArrayList&lt;Color&gt;();
        list.add(Color.BLACK);
        list.add(Color.BLACK);//重复元素
        list.add(Color.RED);
        list.add(Color.BLUE);
        System.out.println(&quot;list:&quot;+list.toString());

        //使用copyOf(Collection&lt;E&gt; c)
        EnumSet enumSet7=EnumSet.copyOf(list);
        System.out.println(&quot;enumSet7:&quot;+enumSet7.toString());

        /**
         输出结果：
         添加前：[]
         添加后：[GREEN, RED, BLUE, BLACK, YELLOW]
         -----------------------------------
         allOf直接填充：[GREEN, RED, BLUE, BLACK, YELLOW]
         -----------------------------------
         指定初始化范围：[BLACK, YELLOW]
         -----------------------------------
         指定补集：[GREEN, RED, BLUE]
         -----------------------------------
         指定Color.BLACK元素：[BLACK]
         指定Color.BLACK和Color.GREEN元素：[GREEN, BLACK]
         -----------------------------------
         enumSet6：[GREEN, BLACK]
         -----------------------------------
         list:[BLACK, BLACK, RED, BLUE]
         enumSet7:[RED, BLUE, BLACK]
         */
    }

}
</code></pre><p><font size="4">noneOf(Class<e> elementType)静态方法，主要用于创建一个空的EnumSet集合，传递参数elementType代表的是枚举类型的类型信息，即Class对象。EnumSet<e> allOf(Class<e> elementType)静态方法则是创建一个填充了elementType类型所代表的所有枚举实例，奇怪的是EnumSet提供了多个重载形式的of方法，最后一个接受的的是可变参数，其他重载方法则是固定参数个数，EnumSet之所以这样设计是因为可变参数的运行效率低一些，所有在参数数据不多的情况下，强烈不建议使用传递参数为可变参数的of方法，即EnumSet<e> of(E first, E… rest)，其他方法就不分析了，看代码演示即可。至于EnumSet的操作方法，则与set集合是一样的，可以看API即可这也不过多说明。什么时候使用EnumSet比较恰当的，事实上当需要进行位域运算，就可以使用EnumSet提到位域，如下：</e></e></e></e></font><br> </p>
<pre><code>public class EnumSetDemo {
    //定义位域变量
    public static final int TYPE_ONE = 1 &lt;&lt; 0 ; //1
    public static final int TYPE_TWO = 1 &lt;&lt; 1 ; //2
    public static final int TYPE_THREE = 1 &lt;&lt; 2 ; //4
    public static final int TYPE_FOUR = 1 &lt;&lt; 3 ; //8
    public static void main(String[] args){
        //位域运算
        int type= TYPE_ONE | TYPE_TWO | TYPE_THREE |TYPE_FOUR;
    }
}
</code></pre><p><font size="4">诸如上述情况，我们都可以将上述的类型定义成枚举然后采用EnumSet来装载，进行各种操作，这样不仅不用手动编写太多冗余代码，而且使用EnumSet集合进行操作也将使代码更加简洁明了。</font><br> </p>
<pre><code>enum Type{
    TYPE_ONE,TYPE_TWO,TYPE_THREE,TYPE_FOUR 
}

public class EnumSetDemo {
    public static void main(String[] args){
    EnumSet set =EnumSet.of(Type.TYPE_ONE,Type.TYPE_FOUR);
    }
}
</code></pre><p><font size="4">其实博主认为EnumSet最有价值的是其内部实现原理，采用的是位向量，它体现出来的是一种高效的数据处理方式，这点很值得我们去学习它。</font><br> </p>
<p></p><h2><font color="red">EnumSet实现原理剖析</font></h2><p></p>
<p><font size="4">关于EnumSet实现原理可能会有点烧脑，内部执行几乎都是位运算，博主将尽力使用图片来分析，协助大家理解。</font><br> </p>
<p></p><h2><font color="red">理解位向量</font></h2><p></p>
<p><font size="4">在分析EnumSet前有必要先了解以下位向量，顾名思义位向量就是用一个bit位(0或1)标记一个元素的状态，用一组bit位表示一个集合的状态，而每个位对应一个元素，每个bit位的状态只可能有两种，即0或1。位向量能表示的元素个数与向量的bit位长度有关，如一个int类型能表示32个元素，而一个long类型则可以表示64个元素，对于EnumSet而言采用的就long类型或者long类型数组。比如现在有一个文件中的数据，该文件存储了N=1000000个无序的整数，需要把这些整数读取到内存并排序再重新写回文件中，该如何解决？最简单的方式是用int类型来存储每个数，并把其存入到数组(int a[m])中，再进行排序，但是这种方式将会导致存储空间异常大，对数据操作起来效率也能成问题，那有没更高效的方式呢？的确是有的，那就是运用位向量，我们知道一个int型的数有4个字节，也就是32位，那么我们可以用N/32个int型数组来表示这N个数：</font><br> </p>
<pre><code>a[0]表示第1~32个数（0~31）
a[1]表示第33~64个数（32~63）
a[2]表示第65~96个数（64~95）
...... 以此类推
</code></pre><p><font size="4">这样，每当输入一个数字m，我们应该先找到该数字在数组的第？个元素，也就是a[?]，然后再确定在这个元素的第几个bit位，找到后设置为1，代表存在该数字。举个例子来说，比如输入40，那么40/32为1余8，则应该将a[1]元素值的第9个bit位置为1(1的二进制左移8位后就是第9个位置)，表示该数字存在，40数字的表示原理图过程如下：</font><br><br><img src="/photo/5-7/c.png" alt="alt text"><br></p>
<p><font size="4">大概明白了位向量表示方式后，上述过程的计算方式，通过以下方式可以计算该数存储在数组的第?个元素和元素中第?个bit位置,为了演示方便，我们这里假设整第?个元素中的?为P，余值设置S</font><br> </p>
<pre><code>//m 除以 2^n 则商(P)表示为 m &gt;&gt; n 
//等同于 m / 2^5 取整数 即：40 / 32 = 1 ，那么P=1就是数组中第2个元素，即a[1]

//位操作过程如下，40的二进制
00000000 00000000 00000000 00101000

//右移5位即 n=5 ， m &gt;&gt; 5 ，即结果转为10进制就是P=1
00000000 00000000 00000000 00000001
</code></pre><p><font size="4">在这里我们使用的int类型，即32位，所有2^5=32，因此n=5，由此计算出 P的值代表的是数组的第 P 个元素，接着利用下述方式计算出余数（S），以此设置该元素值的第（S+1）个bit位为1</font><br> </p>
<pre><code>//m 除以2^n 的余数(S)表示为 m &amp; (2^n-1) 
//等同于： m % 2^5 取余数 即：40 % 32 = 8

//m=40的二进制
00000000 00000000 00000000 00101000

//2^n-1（31）的二进制
00000000 00000000 00000000 00011111

// m &amp; (2^n-1) 即40与31进行与操作得出余数 即 S=8
00000000 00000000 00000000 00001000 

//下面是将a[1]元素值的第(8+1)个bit设置为1，为什么是(8+1)不是8？因为1左移8位就在第9个bit位了，过程如下：

//1的二进制如下：
00000000 00000000 00000000 00000001

//1 &lt;&lt; 8 利用余数8对1进行左移动
00000000 00000000 00000001 0000000 

//然后再与a[1]执行或操作后就可以将对应的bit位设置为1
//a[P] |= 1 &lt;&lt; S 见下述java实现的代码
</code></pre><p><font size="4">通过上述二进制位运算过程(关于位运算可以看博主的另一篇博文~java位运算)就可以计算出整数部分P和余数部分S，并成功设置bit位为1，现在利用java来实现这个运算过程如下：</font><br> </p>
<pre><code>//定义变量
private int[] a; //数组存储元素的数组
private int BIT_LENGTH = 32;//默认使用int类型
private int P; //整数部分
private int S; //余数
private int MASK =  0x1F;// 2^5 - 1
private int SHIFT = 5; // 2^n SHIFT=n=5 表示2^5=32 即bit位长度32
</code></pre><p><font size="4">计算代码</font><br> </p>
<pre><code>/**
 * 置位操作,添加操作
 * @param i
 */
public void set(int i){
     P = i &gt;&gt; SHIFT; //结果等同  P = i / BIT_LENGTH; 取整数 ①
     S = i &amp; MASK;   //结果等同  S = i % BIT_LENGTH; 取余数 ②

     a[P] |= 1 &lt;&lt; S;  //赋值设置该元素bit位为1               ③
     //将int型变量j的第k个比特位设置为1， 即j=j|(1&lt;&lt;k),上述3句合并为一句
     //a[i &gt;&gt; SHIFT ] |= (1 &lt;&lt; (i &amp; MASK));               ④
 }
</code></pre><p><font size="4">计算出P和S后，就可以进行赋值了，其中 a[P]代表数组中第P个元素，a[P] |= 1 &lt;&lt; S 整句意思是把a[P]元素的第S+1位设置为1，注意从低位到高位设置，即从右到左，①②③合并为④，代码将更佳简洁。当然有添加操作，那么就会有删除操作，删除操作过程与添加类似，只不过删除是把相对应的bit位设置0，代表不存在该数值。</font><br> </p>
<p><font size="4">一个Observer接口：</font><br> </p>
<pre><code>/**
* 置0操作，相当于清除元素
* @param i
*/
public void clear(int i){
   P =  i &gt;&gt; SHIFT; //计算位于数组中第？个元素 P = i / BIT_LENGTH;
   S =  i &amp; MASK;   //计算余数  S = i % BIT_LENGTH;
   //把a[P]元素的第S+1个(从低位到高位)bit位设置为0
   a[P] &amp;= ~(1 &lt;&lt; S);

   //更优写法
   //将int型变量j的第k个比特位设置为0，即j= j&amp;~(1&lt;&lt;k)
   //a[i&gt;&gt;SHIFT] &amp;= ~(1&lt;&lt;(i &amp;MASK));
}
</code></pre><p><font size="4">与添加唯一不同的是，计算出余数S，利用1左移S位，再取反(~)操作，最后进行与(&amp;)操作，即将a[P]元素的第S+1个(从低位到高位)bit位设置为0，表示删除该数字，这个计算过程大家可以自行推算一下。这就是位向量表示法的添加和清除方法，然后我们可以利用下述的get方法判断某个bit是否存在某个数字：</font><br> </p>
<pre><code>/**
 * 读取操作，返回1代表该bit位有值，返回0代表该bit位没值
 * @param i
 * @return
 */
public int get(int i){
    //a[i&gt;&gt;SHIFT] &amp; (1&lt;&lt;(i&amp;MASK));
    P = i &gt;&gt; SHIFT;
    S = i &amp;  MASK;
    return Integer.bitCount(a[P] &amp; (1 &lt;&lt; S));
}
</code></pre><p><font size="4">其中Integer.bitCount()是返回指定 int 值的二进制补码(计算机数字的二进制表示法都是使用补码表示的)表示形式的 1 位的数量。位向量运算整体代码实现如下：</font><br> </p>
<pre><code>public class BitVetory {
    private int count;
    private int[] a; //数组
    private int BIT_LENGTH = 32;//默认使用int类型
    private int P; //整数部分
    private int S; //余数
    private int MASK =  0x1F;// 2^5 - 1
    private int SHIFT = 5; // 2^n SHIFT=n=5 表示2^5=32 即bit位长度32

    /**
     * 初始化位向量
     * @param count
     */
    public BitVetory(int count) {
        this.count = count;
        a = new int[(count-1)/BIT_LENGTH + 1];
        init();
    }

    /**
     * 将数组中元素bit位设置为0
     */
    public void init(){
        for (int i = 0; i &lt; count; i++) {
            clear(i);
        }
    }

    /**
     * 获取排序后的数组
     * @return
     */
    public List&lt;Integer&gt; getSortedArray(){
        List&lt;Integer&gt; sortedArray = new ArrayList&lt;Integer&gt;();

        for (int i = 0; i &lt; count; i++) {
            if (get(i) == 1) {//判断i是否存在
                sortedArray.add(i);
            }
        }
        return sortedArray;
    }
    /**
     * 置位操作,设置元素
     * @param i
     */
    public void set(int i){
        P = i &gt;&gt; SHIFT; //P = i / BIT_LENGTH; 取整数
        S = i &amp; MASK; //S = i % BIT_LENGTH; 取余数
        a[P] |= 1 &lt;&lt; S;

        //将int型变量j的第k个比特位设置为1， 即j=j|(1&lt;&lt;k),上述3句合并为一句
        //a[i &gt;&gt; SHIFT ] |= (1 &lt;&lt; (i &amp; MASK));
    }

    /**
     * 置0操作，相当于清除元素
     * @param i
     */
    public void clear(int i){
        P =  i &gt;&gt; SHIFT; //计算位于数组中第？个元素 P = i / BIT_LENGTH;
        S =  i &amp; MASK;   //计算余数  S = i % BIT_LENGTH;
        a[P] &amp;= ~(1 &lt;&lt; S);

        //更优写法
        //将int型变量j的第k个比特位设置为0，即j= j&amp;~(1&lt;&lt;k)
        //a[i&gt;&gt;SHIFT] &amp;= ~(1&lt;&lt;(i &amp;MASK));
    }

    /**
     * 读取操作，返回1代表该bit位有值，返回0代表该bit位没值
     * @param i
     * @return
     */
    public int get(int i){
        //a[i&gt;&gt;SHIFT] &amp; (1&lt;&lt;(i&amp;MASK));
        P = i &gt;&gt; SHIFT;
        S = i &amp;  MASK;
        return Integer.bitCount(a[P] &amp; (1 &lt;&lt; S));
    }

    //测试
    public static void main(String[] args) {
        int count = 25;
        List&lt;Integer&gt; randoms = getRandomsList(count);
        System.out.println(&quot;排序前：&quot;);

        BitVetory bitVetory = new BitVetory(count);
        for (Integer e : randoms) {
            System.out.print(e+&quot;,&quot;);
            bitVetory.set(e);
        }

        List&lt;Integer&gt; sortedArray = bitVetory.getSortedArray();
        System.out.println();
        System.out.println(&quot;排序后：&quot;);
        for (Integer e : sortedArray) {
            System.out.print(e+&quot;,&quot;);
        }

        /**
         输出结果:
         排序前：
         6,3,20,10,18,15,19,16,13,4,21,22,24,2,14,5,12,7,23,8,1,17,9,11,
         排序后：
         1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,
         */
    }

    private static List&lt;Integer&gt; getRandomsList(int count) {
        Random random = new Random();

        List&lt;Integer&gt; randomsList = new ArrayList&lt;Integer&gt;();
        while(randomsList.size() &lt; (count - 1)){
            int element = random.nextInt(count - 1) + 1;//element ∈  [1,count)
            if (!randomsList.contains(element)) {
                randomsList.add(element);
            }
        }
        return randomsList;
    }
}
</code></pre><p></p><h2><font color="red">EnumSet原理</font></h2><p></p>
<p><font size="4">有前面位向量的分析，对于了解EnumSet的实现原理就相对简单些了，EnumSet内部使用的位向量实现的，前面我们说过EnumSet是一个抽象类，事实上它存在两个子类，RegularEnumSet和JumboEnumSet。RegularEnumSet使用一个long类型的变量作为位向量，long类型的位长度是64，因此可以存储64个枚举实例的标志位，一般情况下是够用的了，而JumboEnumSet使用一个long类型的数组，当枚举个数超过64时，就会采用long数组的方式存储。先看看EnumSet内部的数据结构：</font><br> </p>
<pre><code>public abstract class EnumSet&lt;E extends Enum&lt;E&gt;&gt; extends AbstractSet&lt;E&gt;
    implements Cloneable, java.io.Serializable
{
    //表示枚举类型
    final Class&lt;E&gt; elementType;
    //存储该类型信息所表示的所有可能的枚举实例
    final Enum&lt;?&gt;[] universe;
    //..........
}
</code></pre><p><font size="4">EnumSet中有两个变量，一个elementType用于表示枚举的类型信息，universe是数组类型，存储该类型信息所表示的所有可能的枚举实例，EnumSet是抽象类，因此具体的实现是由子类完成的，下面看看noneOf(Class<e> elementType)静态构建方法</e></font><br> </p>
<pre><code>public static &lt;E extends Enum&lt;E&gt;&gt; EnumSet&lt;E&gt; noneOf(Class&lt;E&gt; elementType) {
       //根据EnumMap中的一样，获取所有可能的枚举实例
       Enum&lt;?&gt;[] universe = getUniverse(elementType);
       if (universe == null)
           throw new ClassCastException(elementType + &quot; not an enum&quot;);

       if (universe.length &lt;= 64)
           //枚举个数小于64，创建RegularEnumSet
           return new RegularEnumSet&lt;&gt;(elementType, universe);
       else
           //否则创建JumboEnumSet
           return new JumboEnumSet&lt;&gt;(elementType, universe);
   }
</code></pre><p><font size="4">从源码可以看出如果枚举值个数小于等于64，则静态工厂方法中创建的就是RegularEnumSet，否则大于64的话就创建JumboEnumSet。无论是RegularEnumSet还是JumboEnumSet，其构造函数内部都间接调用了EnumSet的构造函数，因此最终的elementType和universe都传递给了父类EnumSet的内部变量。如下：</font><br> </p>
<pre><code>//RegularEnumSet构造
RegularEnumSet(Class&lt;E&gt;elementType, Enum&lt;?&gt;[] universe) {
      super(elementType, universe);
  }

//JumboEnumSet构造
JumboEnumSet(Class&lt;E&gt;elementType, Enum&lt;?&gt;[] universe) {
      super(elementType, universe);
      elements = new long[(universe.length + 63) &gt;&gt;&gt; 6];
  }
</code></pre><p><font size="4">在RegularEnumSet类和JumboEnumSet类中都存在一个elements变量，用于记录位向量的操作，</font><br> </p>
<pre><code>//RegularEnumSet
class RegularEnumSet&lt;E extends Enum&lt;E&gt;&gt; extends EnumSet&lt;E&gt; {
    private static final long serialVersionUID = 3411599620347842686L;
    //通过long类型的elements记录位向量的操作
    private long elements = 0L;
    //.......
}

//对于JumboEnumSet则是：
class JumboEnumSet&lt;E extends Enum&lt;E&gt;&gt; extends EnumSet&lt;E&gt; {
    private static final long serialVersionUID = 334349849919042784L;
    //通过long数组类型的elements记录位向量
    private long elements[];
     //表示集合大小
    private int size = 0;

    //.............
    }
</code></pre><p><font size="4">在RegularEnumSet中elements是一个long类型的变量，共有64个bit位，因此可以记录64个枚举常量，当枚举常量的数量超过64个时，将使用JumboEnumSet，elements在该类中是一个long型的数组，每个数组元素都可以存储64个枚举常量，这个过程其实与前面位向量的分析是同样的道理，只不过前面使用的是32位的int类型，这里使用的是64位的long类型罢了。接着我们看看EnumSet是如何添加数据的，RegularEnumSet中的add实现如下</font><br> </p>
<pre><code>public boolean add(E e) {
    //检测是否为枚举类型
    typeCheck(e);
    //记录旧elements
    long oldElements = elements;
    //执行位向量操作，是不是很熟悉？
    //数组版：a[i &gt;&gt; SHIFT ] |= (1 &lt;&lt; (i &amp; MASK))
    elements |= (1L &lt;&lt; ((Enum)e).ordinal());
    return elements != oldElements;
}
</code></pre><p><font size="4">关于elements |= (1L &lt;&lt; ((Enum)e).ordinal());这句跟我们前面分析位向量操作是相同的原理，只不过前面分析的是数组类型实现，这里用的long类型单一变量实现，((Enum)e).ordinal()通过该语句获取要添加的枚举实例的序号，然后通过1左移再与 long类型的elements进行或操作，就可以把对应位置上的bit设置为1了，也就代表该枚举实例存在。图示演示过程如下，注意universe数组在EnumSet创建时就初始化并填充了所有可能的枚举实例，而elements值的第n个bit位1时代表枚举存在，而获取的则是从universe数组中的第n个元素值。</font><br><br><img src="/photo/5-7/d.jpg" alt="alt text"><br></p>
<p><font size="4">这就是枚举实例的添加过程和获取原理。而对于JumboEnumSet的add实现则是如下：</font><br> </p>
<pre><code>public boolean add(E e) {
    typeCheck(e);
    //计算ordinal值
    int eOrdinal = e.ordinal();
    int eWordNum = eOrdinal &gt;&gt;&gt; 6;

    long oldElements = elements[eWordNum];
    //与前面分析的位向量相同：a[i &gt;&gt; SHIFT ] |= (1 &lt;&lt; (i &amp; MASK))
    elements[eWordNum] |= (1L &lt;&lt; eOrdinal);
    boolean result = (elements[eWordNum] != oldElements);
    if (result)
        size++;
    return result;
}
</code></pre><p><font size="4">关于JumboEnumSet的add实现与RegularEnumSet区别是一个是long数组类型，一个long变量，运算原理相同，数组的位向量运算与前面分析的是相同的，这里不再分析。接着看看如何删除元素</font><br> </p>
<pre><code>//RegularEnumSet类实现
public boolean remove(Object e) {
    if (e == null)
        return false;
    Class eClass = e.getClass();
    if (eClass != elementType &amp;&amp; eClass.getSuperclass() != elementType)
        return false;

    long oldElements = elements;
    //将int型变量j的第k个比特位设置为0，即j= j&amp;~(1&lt;&lt;k)
    //数组类型：a[i&gt;&gt;SHIFT] &amp;= ~(1&lt;&lt;(i &amp;MASK));

    elements &amp;= ~(1L &lt;&lt; ((Enum)e).ordinal());//long遍历类型操作
    return elements != oldElements;
}


//JumboEnumSet类的remove实现
public boolean remove(Object e) {
        if (e == null)
            return false;
        Class&lt;?&gt; eClass = e.getClass();
        if (eClass != elementType &amp;&amp; eClass.getSuperclass() != elementType)
            return false;
        int eOrdinal = ((Enum&lt;?&gt;)e).ordinal();
        int eWordNum = eOrdinal &gt;&gt;&gt; 6;

        long oldElements = elements[eWordNum];
        //与a[i&gt;&gt;SHIFT] &amp;= ~(1&lt;&lt;(i &amp;MASK));相同
        elements[eWordNum] &amp;= ~(1L &lt;&lt; eOrdinal);
        boolean result = (elements[eWordNum] != oldElements);
        if (result)
            size--;
        return result;
    }
</code></pre><p><font size="4">删除remove的实现，跟位向量的清空操作是同样的实现原理，如下：</font><br><br><img src="/photo/5-7/e.jpg" alt="alt text"><br></p>
<p><font size="4">至于JumboEnumSet的实现原理也是类似的，这里不再重复。下面为了简洁起见，我们以RegularEnumSet类的实现作为源码分析，毕竟JumboEnumSet的内部实现原理可以说跟前面分析过的位向量几乎一样。o~，看看如何判断是否包含某个元素</font><br> </p>
<pre><code>public boolean contains(Object e) {
    if (e == null)
        return false;
    Class eClass = e.getClass();
    if (eClass != elementType &amp;&amp; eClass.getSuperclass() != elementType)
        return false;
    //先左移再按&amp;操作
    return (elements &amp; (1L &lt;&lt; ((Enum)e).ordinal())) != 0;
}

public boolean containsAll(Collection&lt;?&gt; c) {
    if (!(c instanceof RegularEnumSet))
        return super.containsAll(c);

    RegularEnumSet&lt;?&gt; es = (RegularEnumSet&lt;?&gt;)c;
    if (es.elementType != elementType)
        return es.isEmpty();
    //~elements取反相当于elements补集，再与es.elements进行&amp;操作，如果为0，
    //就说明elements补集与es.elements没有交集，也就是es.elements是elements的子集
    return (es.elements &amp; ~elements) == 0;
}
</code></pre><p><font size="4">对于contains(Object e) 方法，先左移再按位与操作，不为0，则表示包含该元素，跟位向量的get操作实现原理类似，这个比较简单。对于containsAll(Collection&lt;?&gt; c)则可能比较难懂，这里分析一下，elements变量(long类型)标记EnumSet集合中已存在元素的bit位，如果bit位为1则说明存在枚举实例，为0则不存在，现在执行~elements 操作后 则说明~elements是elements的补集，那么只要传递进来的es.elements与补集~elements 执行&amp;操作为0，那么就可以证明es.elements与补集~elements 没有交集的可能，也就是说es.elements只能是elements的子集，这样也就可以判断出当前EnumSet集合中包含传递进来的集合c了，借着下图协助理解：</font><br><br><img src="/photo/5-7/f.jpg" alt="alt text"><br></p>
<p><font size="4">图中，elements代表A，es.elements代表S，~elements就是求A的补集，(es.elements &amp; ~elements) == 0就是在验证A’∩B是不是空集，即S是否为A的子集。接着看retainAll方法，求两个集合交集</font><br> </p>
<pre><code>public boolean retainAll(Collection&lt;?&gt; c) {
        if (!(c instanceof RegularEnumSet))
            return super.retainAll(c);

        RegularEnumSet&lt;?&gt; es = (RegularEnumSet&lt;?&gt;)c;
        if (es.elementType != elementType) {
            boolean changed = (elements != 0);
            elements = 0;
            return changed;
        }

        long oldElements = elements;
        //执行与操作，求交集，比较简单
        elements &amp;= es.elements;
        return elements != oldElements;
    }
</code></pre><p><font size="4">最后来看看迭代器是如何取值的</font><br> </p>
<pre><code>public Iterator&lt;E&gt; iterator() {
        return new EnumSetIterator&lt;&gt;();
    }

    private class EnumSetIterator&lt;E extends Enum&lt;E&gt;&gt; implements Iterator&lt;E&gt; {
        //记录elements
        long unseen;

        //记录最后一个返回值
        long lastReturned = 0;

        EnumSetIterator() {
            unseen = elements;
        }

        public boolean hasNext() {
            return unseen != 0;
        }

        @SuppressWarnings(&quot;unchecked&quot;)
        public E next() {
            if (unseen == 0)
                throw new NoSuchElementException();
            //取值过程，先与本身负执行&amp;操作得出的就是二进制低位开始的第一个1的数值大小
            lastReturned = unseen &amp; -unseen;
            //取值后减去已取得lastReturned
            unseen -= lastReturned;
            //返回在指定 long 值的二进制补码表示形式中最低位（最右边）的 1 位之后的零位的数量
            return (E) universe[Long.numberOfTrailingZeros(lastReturned)];
        }

        public void remove() {
            if (lastReturned == 0)
                throw new IllegalStateException();
            elements &amp;= ~lastReturned;
            lastReturned = 0;
        }
    }
</code></pre><p><font size="4">比较晦涩的应该是</font><br> </p>
<pre><code>//取值过程，先与本身负执行&amp;操作得出的就是二进制低位开始的第一个1的数值大小
lastReturned = unseen &amp; -unseen; 
//取值后减去已取得lastReturned
unseen -= lastReturned;
return (E) universe[Long.numberOfTrailingZeros(lastReturned)];
</code></pre><p><font size="4">我们通过原理图来协助理解，现在假设集合中已保存所有可能的枚举实例变量，我们需要把它们遍历展示出来，下面的第一个枚举元素的获取过程，显然通过unseen &amp; -unseen;操作，我们可以获取到二进制低位开始的第一个1的数值，该计算的结果是要么全部都是0，要么就只有一个1，然后赋值给lastReturned，通过Long.numberOfTrailingZeros(lastReturned)获取到该bit为1在64位的long类型中的位置，即从低位算起的第几个bit，如图，该bit的位置恰好是低位的第1个bit位置，也就指明了universe数组的第一个元素就是要获取的枚举变量。执行unseen -= lastReturned;后继续进行第2个元素的遍历，依次类推遍历出所有值，这就是EnumSet的取值过程，真正存储枚举变量的是universe数组，而通过long类型变量的bit位的0或1表示存储该枚举变量在universe数组的那个位置，这样做的好处是任何操作都是执行long类型变量的bit位操作，这样执行效率将特别高，毕竟是二进制直接执行，只有最终获取值时才会操作到数组universe。</font><br><br><img src="/photo/5-7/g.png" alt="alt text"><br></p>
<p><font size="4">ok~，到这关于EnumSet的实现原理主要部分我们就分析完了，其内部使用位向量，存储结构很简洁，节省空间，大部分操作都是按位运算，直接操作二进制数据，因此效率极高。当然通过前面的分析，我们也掌握位向量的运算原理。好~，关于java枚举，我们暂时聊到这。</font><br> </p>
<p><font size="5"><a href="https://blog.csdn.net/javazejian/article/details/71333103" target="_blank" rel="noopener">博客出处</a></font><br> </p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式(十五)]]></title>
      <url>/2018/05/06/design-pattern15/</url>
      <content type="html"><![CDATA[<p><div align="center" style="display:none"><br><img src="/photo/5-6/2.jpg" height="330" width="495"><br></div></p>
<p></p><h1>15、观察者模式（Observer）</h1><hr><p></p>
<p><font size="4">包括这个模式在内的接下来的四个模式，都是类和类之间的关系，不涉及到继承，学的时候应该 记得归纳，记得本文最开始的那个图。观察者模式很好理解，类似于邮件订阅和RSS订阅，当我们浏览一些博客或wiki时，经常会看到RSS图标，就这的意思是，当你订阅了该文章，如果后续有更新，会及时通知你。其实，简单来讲就一句话：当一个对象变化时，其它依赖该对象的对象都会收到通知，并且随着变化！对象之间是一种一对多的关系。先来看看关系图：</font><br><br><img src="/photo/5-6/b.jpg" alt="alt text"><br></p>
<p><font size="4">我解释下这些类的作用：MySubject类就是我们的主对象，Observer1和Observer2是依赖于MySubject的对象，当MySubject变化时，Observer1和Observer2必然变化。AbstractSubject类中定义着需要监控的对象列表，可以对其进行修改：增加或删除被监控对象，且当MySubject变化时，负责通知在列表内存在的对象。我们看实现代码：</font><br> </p>
<p><font size="4">一个Observer接口：</font><br> </p>
<pre><code>public interface Observer {  
    public void update();  
}
</code></pre><p><font size="4">两个实现类：</font><br> </p>
<pre><code>public class Observer1 implements Observer {  

    @Override  
    public void update() {  
        System.out.println(&quot;observer1 has received!&quot;);  
    }  
}  
</code></pre><p><br></p>
<pre><code>public class Observer2 implements Observer {  

    @Override  
    public void update() {  
        System.out.println(&quot;observer2 has received!&quot;);  
    }  

} 
</code></pre><p><font size="4">Subject接口及实现类：</font><br> </p>
<pre><code>public interface Subject {  

    /*增加观察者*/  
    public void add(Observer observer);  

    /*删除观察者*/  
    public void del(Observer observer);  

    /*通知所有的观察者*/  
    public void notifyObservers();  

    /*自身的操作*/  
    public void operation();  
} 
</code></pre><p><br></p>
<pre><code>public abstract class AbstractSubject implements Subject {  

    private Vector&lt;Observer&gt; vector = new Vector&lt;Observer&gt;();  
    @Override  
    public void add(Observer observer) {  
        vector.add(observer);  
    }  

    @Override  
    public void del(Observer observer) {  
        vector.remove(observer);  
    }  

    @Override  
    public void notifyObservers() {  
        Enumeration&lt;Observer&gt; enumo = vector.elements();  
        while(enumo.hasMoreElements()){  
            enumo.nextElement().update();  
        }  
    }  
}  
</code></pre><p><br></p>
<pre><code>public class MySubject extends AbstractSubject {  

    @Override  
    public void operation() {  
        System.out.println(&quot;update self!&quot;);  
        notifyObservers();  
    }  

} 
</code></pre><p><font size="4">测试类：</font><br> </p>
<pre><code>public class ObserverTest {  

    public static void main(String[] args) {  
        Subject sub = new MySubject();  
        sub.add(new Observer1());  
        sub.add(new Observer2());  

        sub.operation();  
    }  

} 
</code></pre><p><font size="4">代码的执行结果如下：</font><br> </p>
<pre><code>update self!
observer1 has received!
observer2 has received!
</code></pre>]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> technology </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式(十四)]]></title>
      <url>/2018/05/06/design-pattern14/</url>
      <content type="html"><![CDATA[<p><div align="center" style="display:none"><br><img src="/photo/5-6/1.jpg" height="330" width="495"><br></div></p>
<p></p><h1>14、模板方法模式（Template Method）</h1><hr><p></p>
<p><font size="4">解释一下模板方法模式，就是指：一个抽象类中，有一个主方法，再定义1…n个方法，可以是抽象的，也可以是实际的方法，定义一个类，继承该抽象类，重写抽象方法，通过调用抽象类，实现对子类的调用，先看个关系图：</font><br><br><img src="/photo/5-6/a.jpg" alt="alt text"><br></p>
<p><font size="4">就是在AbstractCalculator类中定义一个主方法calculate，calculate()调用spilt()等，Plus和Minus分别继承AbstractCalculator类，通过对AbstractCalculator的调用实现对子类的调用，看下面的例子：</font><br> </p>
<pre><code>public abstract class AbstractCalculator {  

    /*主方法，实现对本类其它方法的调用*/  
    public final int calculate(String exp,String opt){  
        int array[] = split(exp,opt);  
        return calculate(array[0],array[1]);  
    }  

    /*被子类重写的方法*/  
    abstract public int calculate(int num1,int num2);  

    public int[] split(String exp,String opt){  
        String array[] = exp.split(opt);  
        int arrayInt[] = new int[2];  
        arrayInt[0] = Integer.parseInt(array[0]);  
        arrayInt[1] = Integer.parseInt(array[1]);  
        return arrayInt;  
    }  
}  
</code></pre><p><br></p>
<pre><code>public class Plus extends AbstractCalculator {  

    @Override  
    public int calculate(int num1,int num2) {  
        return num1 + num2;  
    }  
} 
</code></pre><p><font size="4">测试类：</font><br> </p>
<pre><code>public class StrategyTest {  

    public static void main(String[] args) {  
        String exp = &quot;8+8&quot;;  
        AbstractCalculator cal = new Plus();  
        int result = cal.calculate(exp, &quot;\\+&quot;);  
        System.out.println(result);  
    }  
} 
</code></pre><p><font size="4">我跟踪下这个小程序的执行过程：首先将exp和”\+”做参数，调用AbstractCalculator类里的calculate(String,String)方法，在calculate(String,String)里调用同类的split()，之后再调用calculate(int ,int)方法，从这个方法进入到子类中，执行完return num1 + num2后，将值返回到AbstractCalculator类，赋给result，打印出来。正好验证了我们开头的思路。</font><br> </p>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> technology </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java中父子类初始化顺序]]></title>
      <url>/2018/05/05/review/</url>
      <content type="html"><![CDATA[<p><div align="center" style="display:none"><br><img src="/photo/5-5/2.jpg" height="330" width="495"><br></div></p>
<p></p><h1>Java中子类、父类、变量、static方法的加载顺序</h1><hr><p></p>
<p><font size="4">先来看一下下面这段代码</font><br> </p>
<pre><code>class Parent {  
    // 静态变量  
    public static String p_StaticField = &quot;父类--静态变量&quot;;  
    // 变量(其实这用对象更好能体同这一点，如专门写一个类的实例)  
　　  
    //如果这个变量放在初始化块的后面，是会报错的，因为你根本没有被初始化  
    public String p_Field = &quot;父类--变量&quot;;  
    // 静态初始化块  
    static {  
        System.out.println(p_StaticField);  
        System.out.println(&quot;父类--静态初始化块&quot;);  
    }  
    // 初始化块  
    {  
        System.out.println(p_Field);  
        System.out.println(&quot;父类--初始化块&quot;);  
    }  
    // 构造器  
    public Parent() {  
        System.out.println(&quot;父类--构造器&quot;);  
    }  
}  
public class SubClass extends Parent {  
    // 静态变量  
    public static String s_StaticField = &quot;子类--静态变量&quot;;  
    // 变量  
    public String s_Field = &quot;子类--变量&quot;;  
    // 静态初始化块  
    static {  
        System.out.println(s_StaticField);  
        System.out.println(&quot;子类--静态初始化块&quot;);  
    }  
    // 初始化块  
    {  
        System.out.println(s_Field);  
        System.out.println(&quot;子类--初始化块&quot;);  
    }  
    // 构造器  
    public SubClass() {  
        //super();  
        System.out.println(&quot;子类--构造器&quot;);  
    }  
    // 程序入口  
    public static void main(String[] args) {  
        System.out.println(&quot;*************in main***************&quot;);  
        new SubClass();  
        System.out.println(&quot;*************second subClass***************&quot;);  
        new SubClass();  
    }  
} 
</code></pre><p><font size="4">代码的执行结果如下：</font><br> </p>
<pre><code>父类--静态变量  
父类--静态初始化块  
子类--静态变量  
子类--静态初始化块  
*************in main***************  
父类--变量  
父类--初始化块  
父类--构造器  
子类--变量  
子类--初始化块  
子类--构造器  
*************second subClass***************  
父类--变量  
父类--初始化块  
父类--构造器  
子类--变量  
子类--初始化块  
子类--构造器
</code></pre><p><font size="4">在这段代码中，子类和父类中都有static变量和static代码块，父类中有无参的构造方法，从上面执行的结果可以得出下面结论：</font><br> </p>
<p><font size="4">1、当代码进入到子类的main方法时，此时不执行main()方法中的任何语句，这时候会先开始按顺序先加载父类的static变量、static代码块，再加载子类的static变量、static代码块；</font><br> </p>
<p><font size="4">2、当父类和子类的static变量和代码块加载完之后，开始按顺序执行main方法中的语句</font></p>
<pre><code>System.out.println(&quot;*************in main***************&quot;); 
</code></pre><p><font size="4">3、执行完println语句之后，此时new一个子类对象，由于子类继承父类，此时会先按顺序初试化父类中的变量、代码块、构造方法，然后再初始化子类变量、代码块、构造方法。其中变量最先初始化创建，其次是代码块，构造方法最后创建；</font><br> </p>
<p><font size="4">4、当new完一个子类对象之后，再new第二个子类对象时，由于static变量与方法还有代码块在内存中只加载一遍，此时父类和子类已经加载了一遍，所以不会再次加载</font><br> </p>
<p><font size="4">5、当把子类main方法中的代码都删掉</font><br>   </p>
<pre><code>System.out.println(&quot;*************in main***************&quot;);  
new Super_Sub_Contr();  
System.out.println(&quot;*************second subClass***************&quot;);  
new Super_Sub_Contr();  
</code></pre><p><font size="4">此时执行程序，子类和父类的static变量和代码块也还是会加载，但是其它的变量、代码块、构造方法都不会加载。</font><br> </p>
<p><font size="4">以上代码是在子类里面直接new子类对象，如果我们新建一个类，在这个类中new子类结果会是怎样？还有，当我们初始化变量时，变量调用了一个方法，这个方法会不会在变量初始时就执行？看看下面代码执行的结果：</font><br> </p>
<pre><code>class Parent {  
    // 静态变量  
    public static String p_StaticField = &quot;父类--静态变量&quot;;  
    // 变量(其实这用对象更好能体同这一点，如专门写一个类的实例)  

    // 如果这个变量放在初始化块的后面，是会报错的，因为你根本没有被初始化  
    public String p_Field = &quot;父类--变量&quot;;  

    int a = getParent();  
    // 静态初始化块  
    static {  
        System.out.println(p_StaticField);  
        System.out.println(&quot;父类--静态初始化块&quot;);  
    }  
    // 初始化块  

    {  
        System.out.println(p_Field);  
        System.out.println(&quot;父类--初始化块&quot;);  
    }  
    {  
        System.out.println(a);  
    }  

    // 构造器  
    public Parent() {  
        System.out.println(&quot;父类--构造器&quot;);  
    }  

    private int getParent() {  
        System.out.println(&quot;********getParent()*********&quot;);  
        return 6;  
    }  
}  

class SubClass extends Parent {  
    // 静态变量  
    public static String s_StaticField = &quot;子类--静态变量&quot;;  
    // 变量  
    public String s_Field = &quot;子类--变量&quot;;  
    // 静态初始化块  
    static {  
        System.out.println(s_StaticField);  
        System.out.println(&quot;子类--静态初始化块&quot;);  
    }  
    // 初始化块  
    {  
        System.out.println(s_Field);  
        System.out.println(&quot;子类--初始化块&quot;);  
    }  

    // 构造器  
    public SubClass() {  
        // super();  
        System.out.println(&quot;子类--构造器&quot;);  
    }  

}  

public class Super_Sub_Contr{  
    // 程序入口  
    public static void main(String[] args) {  
        System.out.println(&quot;*************in main***************&quot;);  
        new SubClass();  
        System.out.println(&quot;*************second subClass***************&quot;);  
        new SubClass();  
    }  
} 
</code></pre><p><font size="4">代码执行结果</font><br> </p>
<pre><code>*************in main***************  
父类--静态变量  
父类--静态初始化块  
子类--静态变量  
子类--静态初始化块  
********getParent()*********  
父类--变量  
父类--初始化块  
6  
父类--构造器  
子类--变量  
子类--初始化块  
子类--构造器  
*************second subClass***************  
********getParent()*********  
父类--变量  
父类--初始化块  
6  
父类--构造器  
子类--变量  
子类--初始化块  
子类--构造器  
</code></pre><p><font size="4">从结果可知：</font><br> </p>
<p><font size="4">1、当在另外一个类中new子类时，会先打印：</font></p>
<pre><code>*************in main***************     
</code></pre><p>这是因为在子类中new子类，此时子类还没有开始加载，所以当子类加载完后才能执行main方法；<br> </p>
<p><font size="4">2、当初试化变量中调用了另一个方法时，会先执行这个方法完成变量的初始化，然后再初始化代码块；</font><br> </p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java虚拟机类加载机制]]></title>
      <url>/2018/05/04/loadclass/</url>
      <content type="html"><![CDATA[<p><div align="center" style="display:none"><br><img src="/photo/5-5/1.jpg" height="330" width="495"><br></div></p>
<p></p><h1>类加载机制</h1><hr><p></p>
<p></p><h2>类加载过程</h2><p></p>
<p><font size="4">类从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期包括：加载、验证、准备、解析、初始化、使用和卸载七个阶段。它们开始的顺序如下图所示：</font><br><br><img src="/photo/5-5/a.png" alt="alt text"><br></p>
<p><font size="4">其中类加载的过程包括了加载、验证、准备、解析、初始化五个阶段。在这五个阶段中，加载、验证、准备和初始化这四个阶段发生的顺序是确定的，而解析阶段则不一定，它在某些情况下可以在初始化阶段之后开始，这是为了支持 Java 语言的运行时绑定（也成为动态绑定或晚期绑定）。另外注意这里的几个阶段是按顺序开始，而不是按顺序进行或完成，因为这些阶段通常都是互相交叉地混合进行的，通常在一个阶段执行的过程中调用或激活另一个阶段。</font><br> </p>
<p><font size="4">这里简要说明下 Java 中的绑定：绑定指的是把一个方法的调用与方法所在的类(方法主体)关联起来，对 Java 来说，绑定分为静态绑定和动态绑定：</font><br> </p>
<font size="4">

<ul>
<li>静态绑定：即前期绑定。在程序执行前方法已经被绑定，此时由编译器或其它连接程序实现。针对 Java，简单的可以理解为程序编译期的绑定。Java 当中的方法只有 final，static，private 和构造方法是前期绑定的。</li>
<li>动态绑定：即晚期绑定，也叫运行时绑定。在运行时根据具体对象的类型进行绑定。在 Java 中，几乎所有的方法都是后期绑定的。</li></ul></font><br> <font size="4">下面详细讲述类加载过程中每个阶段所做的工作。</font><br><br><h2>加载</h2><br><font size="4">加载是类加载过程的第一个阶段，在加载阶段，虚拟机需要完成以下三件事情：</font><br> 

<font size="4">

<ul>
<li>通过一个类的全限定名来获取其定义的二进制字节流。 </li>
<li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</li>
<li>在 Java 堆中生成一个代表这个类的 java.lang.Class 对象，作为对方法区中这些数据的访问入口。</li></ul></font><br>

<p><font size="4">注意，这里第 1 条中的二进制字节流并不只是单纯地从 Class 文件中获取，比如它还可以从 Jar 包中获取、从网络中获取（最典型的应用便是 Applet）、由其他文件生成（JSP 应用）等。</font><br>  </p>
<p><font size="4">相对于类加载的其他阶段而言，加载阶段（准确地说，是加载阶段获取类的二进制字节流的动作）是可控性最强的阶段，因为开发人员既可以使用系统提供的类加载器来完成加载，也可以自定义自己的类加载器来完成加载。</font><br> </p>
<p><font size="4">加载阶段完成后，虚拟机外部的二进制字节流就按照虚拟机所需的格式存储在方法区之中，而且在 Java 堆中也创建一个 java.lang.Class 类的对象，这样便可以通过该对象访问方法区中的这些数据。</font><br> </p>
<p><font size="4">说到加载，不得不提到类加载器，下面就具体讲述下类加载器。</font><br> </p>
<p><font size="4">类加载器虽然只用于实现类的加载动作，但它在 Java 程序中起到的作用却远远不限于类的加载阶段。对于任意一个类，都需要由它的类加载器和这个类本身一同确定其在就 Java 虚拟机中的唯一性，也就是说，即使两个类来源于同一个 Class 文件，只要加载它们的类加载器不同，那这两个类就必定不相等。这里的“相等”包括了代表类的 Class 对象的 equals（）、isAssignableFrom（）、isInstance（）等方法的返回结果，也包括了使用 instanceof 关键字对对象所属关系的判定结果。</font><br> </p>
<p><font size="4">站在 Java 虚拟机的角度来讲，只存在两种不同的类加载器：</font><br> </p>
<font size="4">

<ul>
<li>启动类加载器：它使用 C++ 实现（这里仅限于 Hotspot，也就是 JDK1.5 之后默认的虚拟机，有很多其他的虚拟机是用 Java 语言实现的），是虚拟机自身的一部分。</li>
<li>所有其他的类加载器：这些类加载器都由 Java 语言实现，独立于虚拟机之外，并且全部继承自抽象类 java.lang.ClassLoader，这些类加载器需要由启动类加载器加载到内存中之后才能去加载其他的类。</li></ul></font><br><br><font size="4">站在 Java 开发人员的角度来看，类加载器可以大致划分为以下三类：</font><br> 

<font size="4">

<ul>
<li>启动类加载器：Bootstrap ClassLoader，跟上面相同。它负责加载存放在JDK\jre\lib(JDK 代表 JDK 的安装目录，下同)下，或被-Xbootclasspath参数指定的路径中的，并且能被虚拟机识别的类库（如 rt.jar，所有的java.*开头的类均被 Bootstrap ClassLoader 加载）。启动类加载器是无法被 Java 程序直接引用的。</li>
<li>扩展类加载器：Extension ClassLoader，该加载器由sun.misc.Launcher$ExtClassLoader实现，它负责加载JDK\jre\lib\ext目录中，或者由 java.ext.dirs 系统变量指定的路径中的所有类库（如javax.*开头的类），开发者可以直接使用扩展类加载器。</li>
<li>应用程序类加载器：Application ClassLoader，该类加载器由 sun.misc.Launcher$AppClassLoader 来实现，它负责加载用户类路径（ClassPath）所指定的类，开发者可以直接使用该类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。</li></ul></font><br> 

<p><font size="4">应用程序都是由这三种类加载器互相配合进行加载的，如果有必要，我们还可以加入自定义的类加载器。因为 JVM 自带的 ClassLoader 只是懂得从本地文件系统加载标准的 java class 文件，因此如果编写了自己的 ClassLoader，便可以做到如下几点：</font><br> </p>
<font size="4">

<ul>
<li>在执行非置信代码之前，自动验证数字签名。</li>
<li>动态地创建符合用户特定需要的定制化构建类。</li>
<li>从特定的场所取得 java class，例如数据库中和网络中。</li></ul></font><br> 

<p><font size="4">事实上当使用 Applet 的时候，就用到了特定的 ClassLoader，因为这时需要从网络上加载 java class，并且要检查相关的安全信息，应用服务器也大都使用了自定义的 ClassLoader 技术。</font><br><br><img src="/photo/5-5/b.png" alt="alt text"><br></p>
<p><font size="4">这种层次关系称为类加载器的双亲委派模型。我们把每一层上面的类加载器叫做当前层类加载器的父加载器，当然，它们之间的父子关系并不是通过继承关系来实现的，而是使用组合关系来复用父加载器中的代码。该模型在 JDK1.2 期间被引入并广泛应用于之后几乎所有的 Java 程序中，但它并不是一个强制性的约束模型，而是 Java 设计者们推荐给开发者的一种类的加载器实现方式。</font><br> </p>
<p><font size="4">双亲委派模型的工作流程是：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把请求委托给父加载器去完成，依次向上，因此，所有的类加载请求最终都应该被传递到顶层的启动类加载器中，只有当父加载器在它的搜索范围中没有找到所需的类时，即无法完成该加载，子加载器才会尝试自己去加载该类。</font><br> </p>
<p><font size="4">使用双亲委派模型来组织类加载器之间的关系，有一个很明显的好处，就是 Java 类随着它的类加载器（说白了，就是它所在的目录）一起具备了一种带有优先级的层次关系，这对于保证 Java 程序的稳定运作很重要。例如，类java.lang.Object 类存放在JDK\jre\lib下的 rt.jar 之中，因此无论是哪个类加载器要加载此类，最终都会委派给启动类加载器进行加载，这边保证了 Object 类在程序中的各种类加载器中都是同一个类。</font><br> </p>
<p></p><h2>验证</h2><p></p>
<p><font size="4">验证的目的是为了确保 Class 文件中的字节流包含的信息符合当前虚拟机的要求，而且不会危害虚拟机自身的安全。不同的虚拟机对类验证的实现可能会有所不同，但大致都会完成以下四个阶段的验证：文件格式的验证、元数据的验证、字节码验证和符号引用验证。</font><br> </p>
<font size="4">

<ul>
<li>文件格式的验证：验证字节流是否符合 Class 文件格式的规范，并且能被当前版本的虚拟机处理，该验证的主要目的是保证输入的字节流能正确地解析并存储于方法区之内。经过该阶段的验证后，字节流才会进入内存的方法区中进行存储，后面的三个验证都是基于方法区的存储结构进行的。</li>
<li>元数据验证：对类的元数据信息进行语义校验（其实就是对类中的各数据类型进行语法校验），保证不存在不符合 Java 语法规范的元数据信息。</li>
<li>字节码验证：该阶段验证的主要工作是进行数据流和控制流分析，对类的方法体进行校验分析，以保证被校验的类的方法在运行时不会做出危害虚拟机安全的行为。</li>
<li>符号引用验证：这是最后一个阶段的验证，它发生在虚拟机将符号引用转化为直接引用的时候（解析阶段中发生该转化，后面会有讲解），主要是对类自身以外的信息（常量池中的各种符号引用）进行匹配性的校验。</li></ul></font><br> 

<p></p><h2>准备</h2><p></p>
<p><font size="4">准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些内存都将在方法区中分配。对于该阶段有以下几点需要注意：</font><br> </p>
<font size="4">

<ul>
<li>这时候进行内存分配的仅包括类变量（static），而不包括实例变量，实例变量会在对象实例化时随着对象一块分配在 Java 堆中。</li>
<li>这里所设置的初始值通常情况下是数据类型默认的零值（如 0、0L、null、false 等），而不是被在 Java 代码中被显式地赋予的值。</li></ul></font><br> 

<p><font size="4">假设一个类变量的定义为：</font><br> </p>
<pre><code>public static int value = 3；
</code></pre><p><font size="4">那么变量 value 在准备阶段过后的初始值为 0，而不是 3，因为这时候尚未开始执行任何 Java 方法，而把 value 赋值为 3 的 putstatic 指令是在程序编译后，存放于类构造器 &lt;<strong>clinit</strong>&gt;（）方法之中的，所以把 value 赋值为 3 的动作将在初始化阶段才会执行。</font><br> </p>
<p><font size="4">下表列出了 Java 中所有基本数据类型以及 reference 类型的默认零值：</font><br><br><img src="/photo/5-5/c.jpg" alt="alt text"><br></p>
<p><font size="4">这里还需要注意如下几点：</font><br> </p>
<font size="4">

<ul>
<li>对基本数据类型来说，对于类变量（static）和全局变量，如果不显式地对其赋值而直接使用，则系统会为其赋予默认的零值，而对于局部变量来说，在使用前必须显式地为其赋值，否则编译时不通过。</li>
<li>对于同时被 static 和 final 修饰的常量，必须在声明的时候就为其显式地赋值，否则编译时不通过；而只被 final 修饰的常量则既可以在声明时显式地为其赋值，也可以在类初始化时显式地为其赋值，总之，在使用前必须为其显式地赋值，系统不会为其赋予默认零值。</li>
<li>对于引用数据类型 reference 来说，如数组引用、对象引用等，如果没有对其进行显式地赋值而直接使用，系统都会为其赋予默认的零值，即null。</li>
<li>如果在数组初始化时没有对数组中的各元素赋值，那么其中的元素将根据对应的数据类型而被赋予默认的零值。</li></ul></font><br> 

<p><font size="4">如果类字段的字段属性表中存在 ConstantValue 属性，即同时被 final 和 static 修饰，那么在准备阶段变量 value 就会被初始化为 ConstValue 属性所指定的值。</font><br> </p>
<p><font size="4">假设上面的类变量 value 被定义为：</font><br> </p>
<pre><code>public static final int value = 3；
</code></pre><p><font size="4">编译时 Javac 将会为 value 生成 ConstantValue 属性，在准备阶段虚拟机就会根据 ConstantValue 的设置将 value 赋值为 3。回忆上一篇博文中对象被动引用的第 2 个例子，便是这种情况。我们可以理解为 static final 常量在编译期就将其结果放入了调用它的类的常量池中。</font><br> </p>
<p></p><h2>解析</h2><p></p>
<p><font size="4">解析阶段是虚拟机将常量池中的符号引用转化为直接引用的过程。在 Class 类文件结构一文中已经比较过了符号引用和直接引用的区别和关联，这里不再赘述。前面说解析阶段可能开始于初始化之前，也可能在初始化之后开始，虚拟机会根据需要来判断，到底是在类被加载器加载时就对常量池中的符号引用进行解析（初始化之前），还是等到一个符号引用将要被使用前才去解析它（初始化之后）。</font><br> </p>
<p><font size="4">对同一个符号引用进行多次解析请求时很常见的事情，虚拟机实现可能会对第一次解析的结果进行缓存（在运行时常量池中记录直接引用，并把常量标示为已解析状态），从而避免解析动作重复进行。</font><br> </p>
<p><font size="4">解析动作主要针对类或接口、字段、类方法、接口方法四类符号引用进行，分别对应于常量池中的 </font><br> </p>
<p><font size="4">CONSTANT_Class_info、CONSTANT_Fieldref_info、CONSTANT_Methodref_info、</font><br> </p>
<p><font size="4">CONSTANT_InterfaceMethodref_info 四种常量类型。</font><br> </p>
<p><font size="4">1、类或接口的解析：判断所要转化成的直接引用是对数组类型，还是普通的对象类型的引用，从而进行不同的解析。</font><br> </p>
<p><font size="4">2、字段解析：对字段进行解析时，会先在本类中查找是否包含有简单名称和字段描述符都与目标相匹配的字段，如果有，则查找结束；如果没有，则会按照继承关系从上往下递归搜索该类所实现的各个接口和它们的父接口，还没有，则按照继承关系从上往下递归搜索其父类，直至查找结束，查找流程如下图所示：</font><br><br><img src="/photo/5-5/d.png" alt="alt text"><br></p>
<p><font size="4">从下面一段代码的执行结果中很容易看出来字段解析的搜索顺序：</font><br> </p>
<pre><code>class Super{  
    public static int m = 11;  
    static{  
        System.out.println(&quot;执行了super类静态语句块&quot;);  
    }  
}  

class Father extends Super{  
    public static int m = 33;  
    static{  
        System.out.println(&quot;执行了父类静态语句块&quot;);  
    }  
}  

class Child extends Father{  
    static{  
        System.out.println(&quot;执行了子类静态语句块&quot;);  
    }  
}  

public class StaticTest{  
    public static void main(String[] args){  
        System.out.println(Child.m);  
    }  
}  
</code></pre><p><font size="4">执行结果如下：</font><br> </p>
<pre><code>执行了super类静态语句块
执行了父类静态语句块
33
</code></pre><p><font size="4">如果注释掉 Father 类中对 m 定义的那一行，则输出结果如下：</font><br> </p>
<pre><code>执行了super类静态语句块
11
</code></pre><p><font size="4">另外，很明显这就是上篇博文中的第 1 个例子的情况，这里我们便可以分析如下：static 变量发生在静态解析阶段，也即是初始化之前，此时已经将字段的符号引用转化为了内存引用，也便将它与对应的类关联在了一起，由于在子类中没有查找到与 m 相匹配的字段，那么 m 便不会与子类关联在一起，因此并不会触发子类的初始化。</font><br> </p>
<p><font size="4">最后需要注意：理论上是按照上述顺序进行搜索解析，但在实际应用中，虚拟机的编译器实现可能要比上述规范要求的更严格一些。如果有一个同名字段同时出现在该类的接口和父类中，或同时在自己或父类的接口中出现，编译器可能会拒绝编译。如果对上面的代码做些修改，将 Super 改为接口，并将 Child 类继承 Father 类且实现 Super 接口，那么在编译时会报出如下错误：</font><br> </p>
<pre><code>StaticTest.java:24: 对 m 的引用不明确，Father 中的 变量 m 和 Super 中的 变量 m
都匹配
                System.out.println(Child.m);
                                        ^
1 错误
</code></pre><p><font size="4">3、类方法解析：对类方法的解析与对字段解析的搜索步骤差不多，只是多了判断该方法所处的是类还是接口的步骤，而且对类方法的匹配搜索，是先搜索父类，再搜索接口。</font><br> </p>
<p><font size="4">4、接口方法解析：与类方法解析步骤类似，只是接口不会有父类，因此，只递归向上搜索父接口就行了。</font><br></p>
<p></p><h2>初始化</h2><p></p>
<p><font size="4">初始化是类加载过程的最后一步，到了此阶段，才真正开始执行类中定义的 Java 程序代码。在准备阶段，类变量已经被赋过一次系统要求的初始值，而在初始化阶段，则是根据程序员通过程序指定的主观计划去初始化类变量和其他资源，或者可以从另一个角度来表达：初始化阶段是执行类构造器&lt;<strong>clinit</strong>&gt;()方法的过程。</font><br> </p>
<p><font size="4"><strong>这里简单说明下&lt;</strong>clinit<strong>&gt;()方法的执行规则:</strong></font><br> </p>
<p><font size="4">1、&lt;<strong>clinit</strong>&gt;()方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块中的语句合并产生的，编译器收集的顺序是由语句在源文件中出现的顺序所决定的，静态语句块中只能访问到定义在静态语句块之前的变量，定义在它之后的变量，在前面的静态语句中可以赋值，但是不能访问。</font><br> </p>
<p><font size="4">2、&lt;<strong>clinit</strong>&gt;()方法与实例构造器&lt;<strong>init</strong>&gt;()方法（类的构造函数）不同，它不需要显式地调用父类构造器，虚拟机会保证在子类的&lt;<strong>clinit</strong>&gt;()方法执行之前，父类的&lt;<strong>clinit</strong>&gt;()方法已经执行完毕。因此，在虚拟机中第一个被执行的&lt;<strong>clinit</strong>&gt;()方法的类肯定是java.lang.Object。</font><br> </p>
<p><font size="4">3、&lt;<strong>clinit</strong>&gt;()方法对于类或接口来说并不是必须的，如果一个类中没有静态语句块，也没有对类变量的赋值操作，那么编译器可以不为这个类生成&lt;<strong>clinit</strong>&gt;()方法。</font><br> </p>
<p><font size="4">4、接口中不能使用静态语句块，但仍然有类变量（final static）初始化的赋值操作，因此接口与类一样会生成&lt;<strong>clinit</strong>&gt;()方法。但是接口鱼类不同的是：执行接口的&lt;<strong>clinit</strong>&gt;()方法不需要先执行父接口的&lt;<strong>clinit</strong>&gt;()方法，只有当父接口中定义的变量被使用时，父接口才会被初始化。另外，接口的实现类在初始化时也一样不会执行接口的&lt;<strong>clinit</strong>&gt;()方法。</font><br> </p>
<p><font size="4">5、虚拟机会保证一个类的&lt;<strong>clinit</strong>&gt;()方法在多线程环境中被正确地加锁和同步，如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的&lt;<strong>clinit</strong>&gt;()方法，其他线程都需要阻塞等待，直到活动线程执行&lt;<strong>clinit</strong>&gt;()方法完毕。如果在一个类的&lt;<strong>clinit</strong>&gt;()方法中有耗时很长的操作，那就可能造成多个线程阻塞，在实际应用中这种阻塞往往是很隐蔽的。</font><br> </p>
<p><font size="4">下面给出一个简单的例子，以便更清晰地说明如上规则：</font><br> </p>
<pre><code>class Father{  
    public static int a = 1;  
    static{  
        a = 2;  
    }  
}  

class Child extends Father{  
    public static int b = a;  
}  

public class ClinitTest{  
    public static void main(String[] args){  
        System.out.println(Child.b);  
    }  
} 
</code></pre><p><font size="4">执行上面的代码，会打印出 2，也就是说 b 的值被赋为了 2。</font><br> </p>
<p><font size="4">我们来看得到该结果的步骤。首先在准备阶段为类变量分配内存并设置类变量初始值，这样 A 和 B 均被赋值为默认值 0，而后再在调用()方法时给他们赋予程序中指定的值。当我们调用 Child.b 时，触发 Child 的()方法，根据规则 2，在此之前，要先执行完其父类Father的()方法，又根据规则1，在执行()方法时，需要按 static 语句或 static 变量赋值操作等在代码中出现的顺序来执行相关的 static 语句，因此当触发执行 Fathe r的()方法时，会先将 a 赋值为 1，再执行 static 语句块中语句，将 a 赋值为 2，而后再执行 Child 类的()方法，这样便会将 b 的赋值为 2。</font><br> </p>
<p><font size="4">如果我们颠倒一下 Father 类中“public static int a = 1;”语句和“static语句块”的顺序，程序执行后，则会打印出1。很明显是根据规则 1，执行 Father 的()方法时，根据顺序先执行了 static 语句块中的内容，后执行了“public static int a = 1;”语句。</font><br> </p>
<p><font size="4">另外，在颠倒二者的顺序之后，如果在 static 语句块中对 a 进行访问（比如将 a 赋给某个变量），在编译时将会报错，因为根据规则 1，它只能对 a 进行赋值，而不能访问。</font><br> </p>
<p></p><h2>总结</h2><p></p>
<p><font size="4">整个类加载过程中，除了在加载阶段用户应用程序可以自定义类加载器参与之外，其余所有的动作完全由虚拟机主导和控制。到了初始化才开始执行类中定义的 Java 程序代码（亦及字节码），但这里的执行代码只是个开端，它仅限于&lt;<strong>clinit</strong>&gt;()方法。类加载过程中主要是将 Class 文件（准确地讲，应该是类的二进制字节流）加载到虚拟机内存中，真正执行字节码的操作，在加载完成后才真正开始。</font><br> </p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式(十三)]]></title>
      <url>/2018/05/03/design-pattern13/</url>
      <content type="html"><![CDATA[<p><div align="center" style="display:none"><br><img src="/photo/birthday/1.jpg" height="330" width="495"><br></div></p>
<p></p><h1>C、关系模式（11种）</h1><hr><p></p>
<p><font size="4">先来张图，看看这11中模式的关系：</font><br> </p>
<p><font size="4">第一类：通过父类与子类的关系进行实现。</font><br> </p>
<p><font size="4">第二类：两个类之间。</font><br> </p>
<p><font size="4">第三类：类的状态。</font><br> </p>
<p><font size="4">第四类：通过中间类</font><br><br><img src="/photo/birthday/a.jpg" alt="alt text"><br></p>
<p></p><h1>父类与子类关系</h1><hr><p></p>
<p></p><h2>13、策略模式（strategy）</h2><hr><p></p>
<p><font size="4">策略模式定义了一系列算法，并将每个算法封装起来，使他们可以相互替换，且算法的变化不会影响到使用算法的客户。需要设计一个接口，为一系列实现类提供统一的方法，多个实现类实现该接口，设计一个抽象类（可有可无，属于辅助类），提供辅助函数，关系图如下：</font><br><br><img src="/photo/birthday/b.jpg" alt="alt text"><br></p>
<p><font size="4">图中ICalculator提供同意的方法，</font><br> </p>
<p><font size="4">AbstractCalculator是辅助类，提供辅助方法，接下来，依次实现下每个类：</font><br> </p>
<p><font size="4">首先统一接口：</font><br> </p>
<pre><code>public interface ICalculator {  
    public int calculate(String exp);  
}  
</code></pre><p><font size="4">辅助类：</font><br> </p>
<pre><code>public abstract class AbstractCalculator {  

    public int[] split(String exp,String opt){  
        String array[] = exp.split(opt);  
        int arrayInt[] = new int[2];  
        arrayInt[0] = Integer.parseInt(array[0]);  
        arrayInt[1] = Integer.parseInt(array[1]);  
        return arrayInt;  
    }  
}  
</code></pre><p><font size="4">三个实现类：</font><br> </p>
<pre><code>public class Plus extends AbstractCalculator implements ICalculator {  

    @Override  
    public int calculate(String exp) {  
        int arrayInt[] = split(exp,&quot;\\+&quot;);  
        return arrayInt[0]+arrayInt[1];  
    }  
}
</code></pre><p><br></p>
<pre><code>public class Minus extends AbstractCalculator implements ICalculator {  

    @Override  
    public int calculate(String exp) {  
        int arrayInt[] = split(exp,&quot;-&quot;);  
        return arrayInt[0]-arrayInt[1];  
    }  

}  
</code></pre><p><br></p>
<pre><code>public class Multiply extends AbstractCalculator implements ICalculator {  

    @Override  
    public int calculate(String exp) {  
        int arrayInt[] = split(exp,&quot;\\*&quot;);  
        return arrayInt[0]*arrayInt[1];  
    }  
} 
</code></pre><p><font size="4">简单的测试类：</font><br> </p>
<pre><code>public class StrategyTest {  

    public static void main(String[] args) {  
        String exp = &quot;2+8&quot;;  
        ICalculator cal = new Plus();  
        int result = cal.calculate(exp);  
        System.out.println(result);  
    }  
}
</code></pre><p><font size="4">输出：10</font><br> </p>
<p><font size="4">策略模式的决定权在用户，系统本身提供不同算法的实现，新增或者删除算法，对各种算法做封装。因此，策略模式多用在算法决策系统中，外部用户只需要决定用哪个算法即可。</font><br>   </p>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> technology </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式(十二)]]></title>
      <url>/2018/05/02/design-pattern12/</url>
      <content type="html"><![CDATA[<p><div align="center" style="display:none"><br><img src="/photo/5-2/3.jpg" height="330" width="495"><br></div></p>
<p></p><h1>12、享元模式（Flyweight）</h1><hr><p></p>
<p><font size="4">享元模式的主要目的是实现对象的共享，即共享池，当系统中对象多的时候可以减少内存的开销，通常与工厂模式一起使用。</font><br><br><img src="/photo/5-2/d.jpg" alt="alt text"><br></p>
<p><font size="4">FlyWeightFactory负责创建和管理享元单元，当一个客户端请求时，工厂需要检查当前对象池中是否有符合条件的对象，如果有，就返回已经存在的对象，如果没有，则创建一个新对象，FlyWeight是超类。一提到共享池，我们很容易联想到Java里面的JDBC连接池，想想每个连接的特点，我们不难总结出：适用于作共享的一些个对象，他们有一些共有的属性，就拿数据库连接池来说，url、driverClassName、username、password及dbname，这些属性对于每个连接来说都是一样的，所以就适合用享元模式来处理，建一个工厂类，将上述类似属性作为内部数据，其它的作为外部数据，在方法调用时，当做参数传进来，这样就节省了空间，减少了实例的数量。</font><br> </p>
<p><font size="4">看个例子：</font><br><br><img src="/photo/5-2/e.jpg" alt="alt text"><br></p>
<p><font size="4">看下数据库连接池的代码：</font><br> </p>
<pre><code>public class ConnectionPool {  

    private Vector&lt;Connection&gt; pool;  

    /*公有属性*/  
    private String url = &quot;jdbc:mysql://localhost:3306/test&quot;;  
    private String username = &quot;root&quot;;  
    private String password = &quot;root&quot;;  
    private String driverClassName = &quot;com.mysql.jdbc.Driver&quot;;  

    private int poolSize = 100;  
    private static ConnectionPool instance = null;  
    Connection conn = null;  

    /*构造方法，做一些初始化工作*/  
    private ConnectionPool() {  
        pool = new Vector&lt;Connection&gt;(poolSize);  

        for (int i = 0; i &lt; poolSize; i++) {  
            try {  
                Class.forName(driverClassName);  
                conn = DriverManager.getConnection(url, username, password);  
                pool.add(conn);  
            } catch (ClassNotFoundException e) {  
                e.printStackTrace();  
            } catch (SQLException e) {  
                e.printStackTrace();  
            }  
        }  
    }  

    /* 返回连接到连接池(当该连接不再用时加入连接池以备后续提供) */  
    public synchronized void release() {  
        pool.add(conn);  
    }  

    /* 返回连接池中的一个数据库连接 */  
    public synchronized Connection getConnection() {  
        if (pool.size() &gt; 0) {  
            Connection conn = pool.get(0);  
            pool.remove(conn);  
            return conn;  
        } else {  
            return null;  
        }  
    }  
}  
</code></pre><p><font size="4">通过连接池的管理，实现了数据库连接的共享，不需要每一次都重新创建连接，节省了数据库重新创建的开销，提升了系统的性能！</font><br> </p>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> technology </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式(十一)]]></title>
      <url>/2018/05/02/design-pattern11/</url>
      <content type="html"><![CDATA[<p><div align="center" style="display:none"><br><img src="/photo/5-2/2.jpg" height="330" width="495"><br></div></p>
<p></p><h1>11、组合模式（Composite）</h1><hr><p></p>
<p><font size="4">组合模式有时又叫<strong>部分-整体</strong>模式在处理类似树形结构的问题时比较方便，看看关系图：</font><br><br><img src="/photo/5-2/c.jpg" alt="alt text"><br></p>
<p><font size="4">直接来看代码：</font><br> </p>
<pre><code>public class TreeNode {  

    private String name;  
    private TreeNode parent;  
    private Vector&lt;TreeNode&gt; children = new Vector&lt;TreeNode&gt;();  

    public TreeNode(String name){  
        this.name = name;  
    }  

    public String getName() {  
        return name;  
    }  

    public void setName(String name) {  
        this.name = name;  
    }  

    public TreeNode getParent() {  
        return parent;  
    }  

    public void setParent(TreeNode parent) {  
        this.parent = parent;  
    }  

    //添加孩子节点  
    public void add(TreeNode node){  
        children.add(node);  
    }  

    //删除孩子节点  
    public void remove(TreeNode node){  
        children.remove(node);  
    }  

    //取得孩子节点  
    public Enumeration&lt;TreeNode&gt; getChildren(){  
        return children.elements();  
    }  
}  
</code></pre><p><br></p>
<pre><code>public class Tree {  

    TreeNode root = null;  

    public Tree(String name) {  
        root = new TreeNode(name);  
    }  

    public static void main(String[] args) {  
        Tree tree = new Tree(&quot;A&quot;);  
        TreeNode nodeB = new TreeNode(&quot;B&quot;);  
        TreeNode nodeC = new TreeNode(&quot;C&quot;);  

        nodeB.add(nodeC);  
        tree.root.add(nodeB);  
        System.out.println(&quot;build the tree finished!&quot;);  
    }  
}
</code></pre><p><font size="4">使用场景：将多个对象组合在一起进行操作，常用于表示树形结构中，例如二叉树，数等。</font><br> </p>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> technology </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式(十)]]></title>
      <url>/2018/05/02/design-pattern10/</url>
      <content type="html"><![CDATA[<p><div align="center" style="display:none"><br><img src="/photo/5-2/1.jpg" height="330" width="495"><br></div></p>
<p></p><h1>10、桥接模式（Bridge）</h1><hr><p></p>
<p><font size="4">桥接模式就是把事物和其具体实现分开，使他们可以各自独立的变化。桥接的用意是：<strong>将抽象化与实现化解耦，使得二者可以独立变化</strong>，像我们常用的JDBC桥DriverManager一样，JDBC进行连接数据库的时候，在各个数据库之间进行切换，基本不需要动太多的代码，甚至丝毫不用动，原因就是JDBC提供统一接口，每个数据库提供各自的实现，用一个叫做数据库驱动的程序来桥接就行了。我们来看看关系图：</font><br><br><img src="/photo/5-2/a.jpg" alt="alt text"><br></p>
<p><font size="4">实现代码：</font><br> </p>
<p><font size="4">先定义接口：</font><br> </p>
<pre><code>public interface Sourceable {  
    public void method();  
} 
</code></pre><p><font size="4">分别定义两个实现类：：</font><br> </p>
<pre><code>public class SourceSub1 implements Sourceable {  

    @Override  
    public void method() {  
        System.out.println(&quot;this is the first sub!&quot;);  
    }  
} 
</code></pre><p><br></p>
<pre><code>public class SourceSub2 implements Sourceable {  

    @Override  
    public void method() {  
        System.out.println(&quot;this is the second sub!&quot;);  
    }  
}  
</code></pre><p><font size="4">定义一个桥，持有Sourceable的一个实例：</font><br> </p>
<pre><code>public abstract class Bridge {  
    private Sourceable source;  

    public void method(){  
        source.method();  
    }  

    public Sourceable getSource() {  
        return source;  
    }  

    public void setSource(Sourceable source) {  
        this.source = source;  
    }  
}  
</code></pre><p><br></p>
<pre><code>public class MyBridge extends Bridge {  
    public void method(){  
        getSource().method();  
    }  
}  
</code></pre><p><font size="4">测试类：</font><br> </p>
<pre><code>public class BridgeTest {  

    public static void main(String[] args) {  

        Bridge bridge = new MyBridge();  

        /*调用第一个对象*/  
        Sourceable source1 = new SourceSub1();  
        bridge.setSource(source1);  
        bridge.method();  

        /*调用第二个对象*/  
        Sourceable source2 = new SourceSub2();  
        bridge.setSource(source2);  
        bridge.method();  
    }  
}
</code></pre><p><font size="4">output：</font><br> </p>
<p><font size="4">this is the first sub!</font><br> </p>
<p><font size="4">this is the second sub!</font><br> </p>
<p><font size="4">这样，就通过对Bridge类的调用，实现了对接口Sourceable的实现类SourceSub1和SourceSub2的调用。接下来我再画个图，大家就应该明白了，因为这个图是我们JDBC连接的原理，有数据库学习基础的，一结合就都懂了。</font><br><br><img src="/photo/5-2/b.jpg" alt="alt text"><br></p>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> technology </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java泛型内部原理]]></title>
      <url>/2018/05/01/genericity/</url>
      <content type="html"><![CDATA[<p><div align="center" style="display:none"><br><img src="/photo/5-1/2.jpg" height="330" width="495"><br></div></p>
<p></p><h1>java泛型的内部原理：类型擦除以及类型擦除带来的问题</h1><hr><p></p>
<p></p><h2>一、Java泛型的实现方法：类型擦除</h2><p></p>
<p><font size="4">Java的泛型是伪泛型。为什么说Java的泛型是伪泛型呢？因为，在编译期间，所有的泛型信息都会被擦除掉。<strong>正确理解泛型概念的首要前提是理解类型擦出（type erasure）</strong>。</font><br><br><strong><font size="4">Java中的泛型基本上都是在编译器这个层次来实现的。在生成的Java字节码中是不包含泛型中的类型信息的。使用泛型的时候加上的类型参数，会在编译器在编译的时候去掉。这个过程就称为类型擦除。</font><br></strong></p>
<p><font size="4">如在代码中定义的List&lt;<strong>Object</strong>&gt;和List&lt;<strong>String</strong>&gt;等类型，在编译后都会编程List。JVM看到的只是List，而由泛型附加的类型信息对JVM来说是不可见的。Java编译器会在编译时尽可能的发现可能出错的地方，但是仍然无法避免在运行时刻出现类型转换异常的情况。类型擦除也是Java的泛型实现方法与C++模版机制实现方式之间的重要区别。</font><br>  </p>
<p><font size="4">可以通过两个简单的例子，来证明java泛型的类型擦除。</font><br> </p>
<p><font size="4">例1、</font><br> </p>
<pre><code>public class Test {  
    public static void main(String[] args) {  
        ArrayList&lt;String&gt; arrayList1=new ArrayList&lt;String&gt;();  
        arrayList1.add(&quot;abc&quot;);  
        ArrayList&lt;Integer&gt; arrayList2=new ArrayList&lt;Integer&gt;();  
        arrayList2.add(123);  
        System.out.println(arrayList1.getClass()==arrayList2.getClass());  
    }  
}
</code></pre><p><font size="4">在这个例子中，我们定义了两个ArrayList数组，不过一个是ArrayList<string>泛型类型，只能存储字符串。一个是ArrayList<integer>泛型类型，只能存储整形。最后，我们通过arrayList1对象和arrayList2对象的getClass方法获取它们的类的信息，最后发现结果为true。说明泛型类型String和Integer都被擦除掉了，只剩下了<font color="red">原始类型。</font></integer></string></font><br> </p>
<p><font size="4">例2、</font><br> </p>
<pre><code>public class Test {  
    public static void main(String[] args) throws IllegalArgumentException, SecurityException, IllegalAccessException, InvocationTargetException, NoSuchMethodException {  
        ArrayList&lt;Integer&gt; arrayList3=new ArrayList&lt;Integer&gt;();  
        arrayList3.add(1);//这样调用add方法只能存储整形，因为泛型类型的实例为Integer  
        arrayList3.getClass().getMethod(&quot;add&quot;, Object.class).invoke(arrayList3, &quot;asd&quot;);  
        for (int i=0;i&lt;arrayList3.size();i++) {  
            System.out.println(arrayList3.get(i));  
        }  
    }  
</code></pre><p><font size="4">在程序中定义了一个ArrayList泛型类型实例化为Integer的对象，如果直接调用add方法，那么只能存储整形的数据。不过当我们利用反射调用add方法的时候，却可以存储字符串。这说明了Integer泛型实例在编译之后被擦除了，只保留了<font color="red">原始类型。</font></font><br> </p>
<p></p><h2>二、类型擦除后保留的原始类型</h2><p></p>
<p><font size="4">在上面，两次提到了原始类型，什么是原始类型？原始类型（raw type）就是擦除去了泛型信息，最后在字节码中的类型变量的真正类型。无论何时定义一个泛型类型，相应的原始类型都会被自动地提供。类型变量被擦除（crased），并使用其限定类型（无限定的变量用Object）替换。</font><br> </p>
<p><font size="4">例3：</font><br> </p>
<pre><code>class Pair&lt;T&gt; {  
    private T value;  
    public T getValue() {  
        return value;  
    }  
    public void setValue(T  value) {  
        this.value = value;  
    }  
}
</code></pre><p><font size="4">Pair<t>的原始类型为：</t></font><br> </p>
<pre><code>class Pair {  
    private Object value;  
    public Object getValue() {  
        return value;  
    }  
    public void setValue(Object  value) {  
        this.value = value;  
    }  
} 
</code></pre><p><font size="4">因为在Pair&lt;<strong>T</strong>&gt;中，T是一个无限定的类型变量，所以用Object替换。其结果就是一个普通的类，如同泛型加入java变成语言之前已经实现的那样。在程序中可以包含不同类型的Pair，如Pair&lt;<strong>String</strong>&gt;或Pair&lt;<strong>Integer</strong>&gt;，但是，擦除类型后它们就成为原始的Pair类型了，原始类型都是Object。</font><br> </p>
<p><font size="4">从上面的那个例2中，我们也可以明白ArrayList&lt;<strong>Integer</strong>&gt;被擦除类型后，原始类型也变成了Object，所以通过反射我们就可以存储字符串了。</font><br> </p>
<p><font size="4">如果类型变量有限定，那么原始类型就用第一个边界的类型变量来替换。比如Pair这样声明</font><br> </p>
<p><font size="4">例4：</font><br> </p>
<pre><code>public class Pair&lt;T extends Comparable&amp; Serializable&gt; { 
</code></pre><p><font size="4">注意：</font><br> </p>
<p><font size="4">如果Pair这样声明public class Pair&lt;<strong>T extends Serializable&amp;Comparable</strong>&gt; ，那么原始类型就用Serializable替换，而编译器在必要的时要向Comparable插入强制类型转换。为了提高效率，应该将标签（tagging）接口（即没有方法的接口）放在边界限定列表的末尾。</font><br> </p>
<p><font size="4"><strong>要区分原始类型和泛型变量的类型</strong></font><br> </p>
<p><font size="4">在调用泛型方法的时候，可以指定泛型，也可以不指定泛型。</font><br> </p>
<p><font size="4">在不指定泛型的情况下，泛型变量的类型为 该方法中的几种类型的同一个父类的最小级，直到Object。</font><br> </p>
<p><font size="4">在指定泛型的时候，该方法中的几种类型必须是该泛型实例类型或者其子类。</font><br> </p>
<pre><code>public class Test{  
    public static void main(String[] args) {  
        /**不指定泛型的时候*/  
        int i=Test2.add(1, 2); //这两个参数都是Integer，所以T为Integer类型  
        Number f=Test2.add(1, 1.2);//这两个参数一个是Integer，以风格是Float，所以取同一父类的最小级，为Number  
        Object o=Test2.add(1, &quot;asd&quot;);//这两个参数一个是Integer，以风格是Float，所以取同一父类的最小级，为Object  

                /**指定泛型的时候*/  
        int a=Test2.&lt;Integer&gt;add(1, 2);//指定了Integer，所以只能为Integer类型或者其子类  
        int b=Test2.&lt;Integer&gt;add(1, 2.2);//编译错误，指定了Integer，不能为Float  
        Number c=Test2.&lt;Number&gt;add(1, 2.2); //指定为Number，所以可以为Integer和Float  
    }  

    //这是一个简单的泛型方法  
    public static &lt;T&gt; T add(T x,T y){  
        return y;  
    }  
} 
</code></pre><p><font size="4">其实在泛型类中，不指定泛型的时候，也差不多，只不过这个时候的泛型类型为Object，就比如ArrayList中，如果不指定泛型，那么这个ArrayList中可以放任意类型的对象。</font><br> </p>
<p><font size="4">举例：</font><br> </p>
<pre><code>public static void main(String[] args) {  
        ArrayList arrayList=new ArrayList();  
        arrayList.add(1);  
        arrayList.add(&quot;121&quot;);  
        arrayList.add(new Date());  
    }  
</code></pre><p></p><h2>三、类型擦除引起的问题及解决方法</h2><p></p>
<p><font size="4">因为种种原因，Java不能实现真正的泛型，只能使用类型擦除来实现伪泛型，这样虽然不会有类型膨胀的问题，但是也引起了许多新的问题。所以，Sun对这些问题作出了许多限制，避免我们犯各种错误。</font><br> </p>
<p><font size="4"><strong>1、先检查，再编译，以及检查编译的对象和引用传递的问题</strong></font><br> </p>
<p><font size="4">既然说类型变量会在编译的时候擦除掉，那为什么我们往ArrayList&lt;<strong>String</strong>&gt; arrayList=new ArrayList&lt;<strong>String</strong>&gt;();所创建的数组列表arrayList中，不能使用add方法添加整形呢？不是说泛型变量Integer会在编译时候擦除变为原始类型Object吗，为什么不能存别的类型呢？既然类型擦除了，如何保证我们只能使用泛型变量限定的类型呢？</font><br> </p>
<p><font size="4">java是如何解决这个问题的呢？java编译器是通过先检查代码中泛型的类型，然后再进行类型擦除，在进行编译的。</font><br> </p>
<p><font size="4">举个例子说明：</font><br> </p>
<pre><code>public static  void main(String[] args) {  
        ArrayList&lt;String&gt; arrayList=new ArrayList&lt;String&gt;();  
        arrayList.add(&quot;123&quot;);  
        arrayList.add(123);//编译错误  
    } 
</code></pre><p><font size="4">在上面的程序中，使用add方法添加一个整形，在eclipse中，直接就会报错，说明这就是在编译之前的检查。因为如果是在编译之后检查，类型擦除后，原始类型为Object，是应该运行任意引用类型的添加的。可实际上却不是这样，这恰恰说明了关于泛型变量的使用，是会在编译之前检查的。</font><br> </p>
<p><font size="4">那么，这么类型检查是针对谁的呢？我们先看看<strong>参数化类型与原始类型的兼容</strong></font><br> </p>
<p><font size="4">以ArrayList举例子，以前的写法：</font><br> </p>
<pre><code>ArrayList arrayList=new ArrayList(); 
</code></pre><p><font size="4">现在的写法：</font><br> </p>
<pre><code>ArrayList&lt;String&gt;  arrayList=new ArrayList&lt;String&gt;();  
</code></pre><p><font size="4">如果是与以前的代码兼容，各种引用传值之间，必然会出现如下的情况：</font><br> </p>
<pre><code>ArrayList&lt;String&gt; arrayList1=new ArrayList(); //第一种 情况  
ArrayList arrayList2=new ArrayList&lt;String&gt;();//第二种 情况  
</code></pre><p><font size="4">这样是没有错误的，不过会有个编译时警告。</font><br> </p>
<p><font size="4">不过在第一种情况，可以实现与完全使用泛型参数一样的效果，第二种则完全没效果。</font><br> </p>
<p><font size="4">因为，本来类型检查就是编译时完成的。new ArrayList()只是在内存中开辟一个存储空间，可以存储任何的类型对象。<font color="red">而真正涉及类型检查的是它的引用，</font>因为我们是使用它引用arrayList1 来调用它的方法，比如说调用add()方法。所以arrayList1引用能完成泛型类型的检查。</font><br> </p>
<p><font size="4">而引用arrayList2没有使用泛型，所以不行。</font><br> </p>
<p><font size="4">举例子：</font><br> </p>
<pre><code>public class Test {  
    public static void main(String[] args) {  

        //  
        ArrayList&lt;String&gt; arrayList1=new ArrayList();  
        arrayList1.add(&quot;1&quot;);//编译通过  
        arrayList1.add(1);//编译错误  
        String str1=arrayList1.get(0);//返回类型就是String  

        ArrayList arrayList2=new ArrayList&lt;String&gt;();  
        arrayList2.add(&quot;1&quot;);//编译通过  
        arrayList2.add(1);//编译通过  
        Object object=arrayList2.get(0);//返回类型就是Object  

        new ArrayList&lt;String&gt;().add(&quot;11&quot;);//编译通过  
        new ArrayList&lt;String&gt;().add(22);//编译错误  
        String string=new ArrayList&lt;String&gt;().get(0);//返回类型就是String  
    }  
}
</code></pre><p><font size="4">通过上面的例子，我们可以明白，<font color="red">类型检查就是针对引用的，</font>谁是一个引用，用这个引用调用泛型方法，就会对这个引用调用的方法进行类型检测，而无关它真正引用的对象。</font><br> </p>
<p><font size="4"><strong>从这里，我们可以再讨论下 泛型中参数化类型为什么不考虑继承关系</strong></font><br> </p>
<p><font size="4">在Java中，像下面形式的引用传递是不允许的：</font><br> </p>
<pre><code>ArrayList&lt;String&gt; arrayList1=new ArrayList&lt;Object&gt;();//编译错误  
ArrayList&lt;Object&gt; arrayList1=new ArrayList&lt;String&gt;();//编译错误 
</code></pre><p><font size="4">我们先看第一种情况，将第一种情况拓展成下面的形式：</font><br> </p>
<pre><code>ArrayList&lt;Object&gt; arrayList1=new ArrayList&lt;Object&gt;();  
          arrayList1.add(new Object());  
          arrayList1.add(new Object());  
          ArrayList&lt;String&gt; arrayList2=arrayList1;//编译错误  
</code></pre><p><font size="4">实际上，在第4行代码的时候，就会有编译错误。那么，我们先假设它编译没错。那么当我们使用arrayList2引用用get()方法取值的时候，返回的都是String类型的对象（上面提到了，类型检测是根据引用来决定的。），可是它里面实际上已经被我们存放了Object类型的对象，这样，就会有ClassCastException了。所以为了避免这种极易出现的错误，Java不允许进行这样的引用传递。（这也是泛型出现的原因，就是为了解决类型转换的问题，我们不能违背它的初衷）。</font><br> </p>
<p><font size="4">在看第二种情况，将第二种情况拓展成下面的形式：</font><br> </p>
<pre><code>ArrayList&lt;String&gt; arrayList1=new ArrayList&lt;String&gt;();  
          arrayList1.add(new String());  
          arrayList1.add(new String());  
          ArrayList&lt;Object&gt; arrayList2=arrayList1;//编译错误  
</code></pre><p><font size="4">没错，这样的情况比第一种情况好的多，最起码，在我们用arrayList2取值的时候不会出现ClassCastException，因为是从String转换为Object。可是，这样做有什么意义呢，泛型出现的原因，就是为了解决类型转换的问题。我们使用了泛型，到头来，还是要自己强转，违背了泛型设计的初衷。所以java不允许这么干。再说，你如果又用arrayList2往里面add()新的对象，那么到时候取得时候，我怎么知道我取出来的到底是String类型的，还是Object类型的呢？</font><br> </p>
<p><font size="4" color="red">所以，要格外注意，泛型中的引用传递的问题。</font><br> </p>
<p><font size="4"><strong>2、自动类型转换</strong></font><br></p>
<p><font size="4">因为类型擦除的问题，所以所有的泛型类型变量最后都会被替换为原始类型。这样就引起了一个问题，既然都被替换为原始类型，那么为什么我们在获取的时候，不需要进行强制类型转换呢？看下ArrayList的get方法：</font><br> </p>
<pre><code>public E get(int index) {  
    RangeCheck(index);  
    return (E) elementData[index];  
    }
</code></pre><p><font size="4">看以看到，在return之前，会根据泛型变量进行强转。假设泛型类型变量为Date，虽然泛型信息会被擦除掉，但是会将(E) elementData[index]，编译为(Date)elementData[index]。所以我们不用自己进行强转。</font><br> </p>
<p><font size="4">当存取一个泛型域时也会自动插入强制类型转换。假设Pair类的value域是public的，那么，表达式：</font><br> </p>
<pre><code>Date date=pair.value 
</code></pre><p><font size="4">也会自动地在结果字节码中插入强制类型转换。</font><br> </p>
<p><font size="4"><strong>3、类型擦除与多态的冲突和解决方法</strong></font><br></p>
<p><font size="4">现在有这样一个泛型类：</font><br> </p>
<pre><code>class Pair&lt;T&gt; {  
    private T value;  
    public T getValue() {  
        return value;  
    }  
    public void setValue(T value) {  
        this.value = value;  
    }  
}  
</code></pre><p><font size="4">然后我们想要一个子类继承它</font><br> </p>
<pre><code>class DateInter extends Pair&lt;Date&gt; {  
    @Override  
    public void setValue(Date value) {  
        super.setValue(value);  
    }  
    @Override  
    public Date getValue() {  
        return super.getValue();  
    }  
}
</code></pre><p><font size="4">在这个子类中，我们设定父类的泛型类型为Pair&lt;<strong>Date</strong>&gt;，在子类中，我们覆盖了父类的两个方法，我们的原意是这样的：<br>将父类的泛型类型限定为Date，那么父类里面的两个方法的参数都为Date类型：</font><br> </p>
<pre><code>public Date getValue() {  
    return value;  
}  
public void setValue(Date value) {  
    this.value = value;  
}
</code></pre><p><font size="4">所以，我们在子类中重写这两个方法一点问题也没有，实际上，从他们的@Override标签中也可以看到，一点问题也没有，实际上是这样的吗？</font><br> </p>
<p><font size="4" color="red">分析：</font><br> </p>
<p><font size="4">实际上，类型擦除后，父类的的泛型类型全部变为了原始类型Object，所以父类编译之后会变成下面的样子：</font><br> </p>
<pre><code>class Pair {  
    private Object value;  
    public Object getValue() {  
        return value;  
    }  
    public void setValue(Object  value) {  
        this.value = value;  
    }  
}
</code></pre><p><font size="4">再看子类的两个重写的方法的类型：</font><br> </p>
<pre><code>@Override  
public void setValue(Date value) {  
    super.setValue(value);  
}  
@Override  
public Date getValue() {  
    return super.getValue();  
}
</code></pre><p><font size="4">先来分析setValue方法，父类的类型是Object，而子类的类型是Date，参数类型不一样，这如果实在普通的继承关系中，根本就不会是重写，而是重载。</font><br> </p>
<p><font size="4">我们在一个main方法测试一下：</font><br> </p>
<pre><code>public static void main(String[] args) throws ClassNotFoundException {  
        DateInter dateInter=new DateInter();  
        dateInter.setValue(new Date());                  
                dateInter.setValue(new Object());//编译错误  
 } 
</code></pre><p><font size="4">如果是重载，那么子类中两个setValue方法，一个是参数Object类型，一个是Date类型，可是我们发现，根本就没有这样的一个子类继承自父类的Object类型参数的方法。所以说，却是是重写了，而不是重载了。<br></font><br> </p>
<p><font size="4">为什么会这样呢？原因是这样的，我们传入父类的泛型类型是Date，Pair&lt;<strong>Date</strong>&gt;，我们的本意是将泛型类变为如下：</font><br> </p>
<pre><code>class Pair {  
    private Date value;  
    public Date getValue() {  
        return value;  
    }  
    public void setValue(Date value) {  
        this.value = value;  
    }  
} 
</code></pre><p><font size="4">然后在子类中重写参数类型为Date的那两个方法，实现继承中的多态。</font><br> </p>
<p><font size="4">可是由于种种原因，虚拟机并不能将泛型类型变为Date，只能将类型擦除掉，变为原始类型Object。这样，我们的本意是进行重写，实现多态。可是类型擦除后，只能变为了重载。这样，类型擦除就和多态有了冲突。JVM知道你的本意吗？知道！！！可是它能直接实现吗，不能！！！如果真的不能的话，那我们怎么去重写我们想要的Date类型参数的方法啊。</font><br> </p>
<p><font size="4">于是JVM采用了一个特殊的方法，来完成这项功能，那就是<font color="red">桥方法。</font></font><br> </p>
<p><font size="4">首先，我们用javap -c className的方式反编译下DateInter子类的字节码，结果如下：</font><br></p>
<pre><code>class com.tao.test.DateInter extends com.tao.test.Pair&lt;java.util.Date&gt; {  
  com.tao.test.DateInter();  
    Code:  
       0: aload_0  
       1: invokespecial #8                  // Method com/tao/test/Pair.&quot;&lt;init&gt;&quot;  
:()V  
       4: return  

  public void setValue(java.util.Date);  //我们重写的setValue方法  
    Code:  
       0: aload_0  
       1: aload_1  
       2: invokespecial #16                 // Method com/tao/test/Pair.setValue  
:(Ljava/lang/Object;)V  
       5: return  

  public java.util.Date getValue();    //我们重写的getValue方法  
    Code:  
       0: aload_0  
       1: invokespecial #23                 // Method com/tao/test/Pair.getValue  
:()Ljava/lang/Object;  
       4: checkcast     #26                 // class java/util/Date  
       7: areturn  

  public java.lang.Object getValue();     //编译时由编译器生成的巧方法  
    Code:  
       0: aload_0  
       1: invokevirtual #28                 // Method getValue:()Ljava/util/Date 去调用我们重写的getValue方法  
;  
       4: areturn  

  public void setValue(java.lang.Object);   //编译时由编译器生成的巧方法  
    Code:  
       0: aload_0  
       1: aload_1  
       2: checkcast     #26                 // class java/util/Date  
       5: invokevirtual #30                 // Method setValue:(Ljava/util/Date;   去调用我们重写的setValue方法  
)V  
       8: return  
}
</code></pre><p><font size="4">从编译的结果来看，我们本意重写setValue和getValue方法的子类，竟然有4个方法，其实不用惊奇，最后的两个方法，就是编译器自己生成的桥方法。可以看到桥方法的参数类型都是Object，也就是说，子类中真正覆盖父类两个方法的就是这两个我们看不到的桥方法。而打在我们自己定义的setvalue和getValue方法上面的@Oveerride只不过是假象。而桥方法的内部实现，就只是去调用我们自己重写的那两个方法。</font><br> </p>
<p><font size="4">所以，虚拟机巧妙的使用了巧方法，来解决了类型擦除和多态的冲突。</font><br> </p>
<p><font size="4">不过，要提到一点，这里面的setValue和getValue这两个桥方法的意义又有不同。</font><br> </p>
<p><font size="4">setValue方法是为了解决类型擦除与多态之间的冲突。</font><br> </p>
<p><font size="4">而getValue却有普遍的意义，怎么说呢，如果这是一个普通的继承关系：</font><br> </p>
<p><font size="4">那么父类的setValue方法如下：</font><br> </p>
<pre><code>public ObjectgetValue() {  
        return super.getValue();  
    } 
</code></pre><p><font size="4">而子类重写的方法是：</font><br> </p>
<pre><code>public Date getValue() {  
        return super.getValue();  
    } 
</code></pre><p><font size="4">其实这在普通的类继承中也是普遍存在的重写，这就是协变。</font><br> </p>
<p><font size="4">关于协变：。。。。。。</font><br> </p>
<p><font size="4">并且，还有一点也许会有疑问，子类中的巧方法  Object   getValue()和Date getValue()是同 时存在的，可是如果是常规的两个方法，他们的方法签名是一样的，也就是说虚拟机根本不能分别这两个方法。如果是我们自己编写Java代码，这样的代码是无法通过编译器的检查的，但是虚拟机却是允许这样做的，因为虚拟机通过参数类型和返回类型来确定一个方法，所以编译器为了实现泛型的多态允许自己做这个看起来“不合法”的事情，然后交给虚拟器去区别。<br></font><br> </p>
<p><font size="4"><strong>4、泛型类型变量不能是基本数据类型</strong></font><br></p>
<p><font size="4">不能用类型参数替换基本类型。就比如，没有ArrayList&lt;<strong>double</strong>&gt;，只有ArrayList&lt;<strong>Double</strong>&gt;。因为当类型擦除后，ArrayList的原始类型变为Object，但是Object类型不能存储double值，只能引用Double的值。</font><br> </p>
<p><font size="4"><strong>5、运行时类型查询</strong></font><br></p>
<p><font size="4">举个例子:</font><br> </p>
<pre><code>ArrayList&lt;String&gt; arrayList=new ArrayList&lt;String&gt;();
</code></pre><p><font size="4">因为类型擦除之后，ArrayList&lt;<strong>String</strong>&gt;只剩下原始类型，泛型信息String不存在了。那么，运行时进行类型查询的时候使用下面的方法是错误的</font><br> </p>
<pre><code>if( arrayList instanceof ArrayList&lt;String&gt;)    
</code></pre><p><font size="4">java限定了这种类型查询的方式</font><br> </p>
<pre><code>if( arrayList instanceof ArrayList&lt;?&gt;) 
</code></pre><p><font size="4">？ 是通配符的形式 ，将在后面一篇中介绍。</font><br> </p>
<p><font size="4"><strong>6、异常中使用泛型的问题</strong></font><br></p>
<p><font size="4">(1)不能抛出也不能捕获泛型类的对象。事实上，泛型类扩展Throwable都不合法。例如：下面的定义将不会通过编译：</font><br> </p>
<pre><code>public class Problem&lt;T&gt; extends Exception{......}
</code></pre><p><font size="4">为什么不能扩展Throwable，因为异常都是在运行时捕获和抛出的，而在编译的时候，泛型信息全都会被擦除掉，那么，假设上面的编译可行，那么，在看下面的定义：</font><br> </p>
<pre><code>try{  
}catch(Problem&lt;Integer&gt; e1){  
。。  
}catch(Problem&lt;Number&gt; e2){  
...  
} 
</code></pre><p><font size="4">类型信息被擦除后，那么两个地方的catch都变为原始类型Object，那么也就是说，这两个地方的catch变的一模一样,就相当于下面的这样</font><br> </p>
<pre><code>try{  
}catch(Problem&lt;Object&gt; e1){  
。。  
}catch(Problem&lt;Object&gt; e2){  
... 
</code></pre><p><font size="4">这个当然就是不行的。就好比，catch两个一模一样的普通异常，不能通过编译一样：</font><br> </p>
<pre><code>try{  
}catch(Exception e1){  
。。  
}catch(Exception  e2){//编译错误  
...
</code></pre><p><font size="4">(2)不能再catch子句中使用泛型变量</font><br> </p>
<pre><code>public static &lt;T extends Throwable&gt; void doWork(Class&lt;T&gt; t){  
        try{  
            ...  
        }catch(T e){ //编译错误  
            ...  
        }  
   }
</code></pre><p><font size="4">因为泛型信息在编译的时候已经变味原始类型，也就是说上面的T会变为原始类型Throwable，那么如果可以再catch子句中使用泛型变量，那么，下面的定义呢：</font><br> </p>
<pre><code>public static &lt;T extends Throwable&gt; void doWork(Class&lt;T&gt; t){  
        try{  
            ...  
        }catch(T e){ //编译错误  
            ...  
        }catch(IndexOutOfBounds e){  
        }                           
 }
</code></pre><p><font size="4">根据异常捕获的原则，一定是子类在前面，父类在后面，那么上面就违背了这个原则。即使你在使用该静态方法的使用T是ArrayIndexOutofBounds，在编译之后还是会变成Throwable，ArrayIndexOutofBounds是IndexOutofBounds的子类，违背了异常捕获的原则。所以java为了避免这样的情况，禁止在catch子句中使用泛型变量。</font><br> </p>
<p><font size="4">但是在异常声明中可以使用类型变量。下面方法是合法的。</font><br> </p>
<pre><code>public static&lt;T extends Throwable&gt; void doWork(T t) throws T{  
    try{  
        ...  
    }catch(Throwable realCause){  
        t.initCause(realCause);  
        throw t;   
    } 
</code></pre><p><font size="4">上面的这样使用是没问题的。</font><br> </p>
<p><font size="4"><strong>7、数组（这个不属于类型擦除引起的问题）</strong></font><br></p>
<p><font size="4">不能声明参数化类型的数组。如：</font><br> </p>
<pre><code>Pair&lt;String&gt;[] table = newPair&lt;String&gt;(10); //ERROR 
</code></pre><p><font size="4">这是因为擦除后，table的类型变为Pair[]，可以转化成一个Object[]。</font><br> </p>
<pre><code>Object[] objarray =table; 
</code></pre><p><font size="4">数组可以记住自己的元素类型，下面的赋值会抛出一个ArrayStoreException异常。</font><br></p>
<pre><code>objarray =&quot;Hello&quot;; //ERROR 
</code></pre><p><font size="4">对于泛型而言，擦除降低了这个机制的效率。下面的赋值可以通过数组存储的检测，但仍然会导致类型错误。</font><br> </p>
<pre><code>objarray =new Pair&lt;Employee&gt;(); 
</code></pre><p><font size="4">提示：如果需要收集参数化类型对象，直接使用ArrayList：ArrayList<pair<**string**>&gt;最安全且有效。</pair<**string**></font><br> </p>
<p><font size="4"><strong>8、泛型类型的实例化</strong></font><br></p>
<p><font size="4">不能实例化泛型类型。如，</font><br> </p>
<pre><code>first = new T(); //ERROR
</code></pre><p><font size="4">是错误的，类型擦除会使这个操作做成new Object()。</font><br> </p>
<p><font size="4">不能建立一个泛型数组。</font><br> </p>
<pre><code>public&lt;T&gt; T[] minMax(T[] a){  
     T[] mm = new T[2]; //ERROR  
     ...  
}
</code></pre><p><font size="4">类似的，擦除会使这个方法总是构靠一个Object[2]数组。但是，可以用反射构造泛型对象和数组。</font><br> </p>
<p><font size="4"> 利用反射，调用Array.newInstance:</font><br> </p>
<pre><code>publicstatic &lt;T extends Comparable&gt; T[]minmax(T[] a)  

   {  

      T[] mm == (T[])Array.newInstance(a.getClass().getComponentType(),2);  

       ...  

      // 以替换掉以下代码  

      // Obeject[] mm = new Object[2];  

      // return (T[]) mm;  

   }  
</code></pre><p><font size="4"><strong>9、类型擦除后的冲突</strong></font><br></p>
<p><font size="4">(1)当泛型类型被擦除后，创建条件不能产生冲突。如果在Pair类中添加下面的equals方法：</font><br> </p>
<pre><code>class Pair&lt;T&gt;   {  
    public boolean equals(T value) {  
        return null;  
    }  

}
</code></pre><p><font size="4">考虑一个Pair&lt;<strong>String</strong>&gt;。从概念上，它有两个equals方法：</font><br> </p>
<p><font size="4">booleanequals(String); //在Pair&lt;<strong>T</strong>&gt;中定义</font><br> </p>
<p><font size="4">boolean equals(Object); //从object中继承</font><br> </p>
<p><font size="4">但是，这只是一种错觉。实际上，擦除后方法<br>boolean equals(T) 变成了方法 boolean equals(Object) 这与Object.equals方法是冲突的！当然，补救的办法是重新命名引发错误的方法。</font><br> </p>
<p><font size="4">(2)泛型规范说明提及另一个原则“要支持擦除的转换，需要强行制一个类或者类型变量不能同时成为两个接口的子类，而这两个子类是同一接品的不同参数化。</font><br> </p>
<p><font size="4">下面的代码是非法的：</font><br> </p>
<pre><code>class Calendar implements Comparable&lt;Calendar&gt;{ ... }
class GregorianCalendar extends Calendar implements Comparable&lt;GregorianCalendar&gt;{...} //ERROR   
</code></pre><p><font size="4">GregorianCalendar会实现Comparable&lt;<strong>Calender</strong>&gt;和Compable&lt;<strong>GregorianCalendar</strong>&gt;，这是同一个接口的不同参数化实现。这一限制与类型擦除的关系并不很明确。非泛型版本：</font><br> </p>
<pre><code>class Calendar implements Comparable{ ... }  
class GregorianCalendar extends Calendar implements Comparable{...} //ERROR
</code></pre><p><font size="4">是合法的。</font><br> </p>
<p><font size="4"><strong>10、泛型在静态方法和静态类中的问题</strong></font><br></p>
<p><font size="4">泛型类中的静态方法和静态变量不可以使用泛型类所声明的泛型类型参数。举例说明：</font><br> </p>
<pre><code>public class Test2&lt;T&gt; {    
    public static T one;   //编译错误    
    public static  T show(T one){ //编译错误    
        return null;    
    }    
}
</code></pre><p><font size="4">因为泛型类中的泛型参数的实例化是在定义对象的时候指定的，而静态变量和静态方法不需要使用对象来调用。对象都没有创建，如何确定这个泛型参数是何种类型，所以当然是错误的。</font><br> </p>
<p><font size="4">但是要注意区分下面的一种情况：</font><br> </p>
<pre><code>public class Test2&lt;T&gt; {    

    public static &lt;T &gt;T show(T one){//这是正确的    
        return null;    
    }    
}
</code></pre><p><font size="4">因为这是一个泛型方法，在泛型方法中使用的T是自己在方法中定义的T，而不是泛型类中的T。</font><br> </p>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式(九)]]></title>
      <url>/2018/05/01/design-pattern9/</url>
      <content type="html"><![CDATA[<p><div align="center" style="display:none"><br><img src="/photo/5-1/1.jpg" height="330" width="495"><br></div></p>
<p></p><h1>9、外观模式（Facade）</h1><hr><p></p>
<p><font size="4">外观模式是为了解决类与类之家的依赖关系的，像spring一样，可以将类和类之间的关系配置到配置文件中，而外观模式就是将他们的关系放在一个Facade类中，降低了类类之间的耦合度，该模式中没有涉及到接口，看下类图：（我们以一个计算机的启动过程为例）</font><br><br><img src="/photo/5-1/c.jpg" alt="alt text"><br></p>
<p><font size="4">我们先看下实现类：</font><br> </p>
<pre><code>public class CPU {  

    public void startup(){  
        System.out.println(&quot;cpu startup!&quot;);  
    }  

    public void shutdown(){  
        System.out.println(&quot;cpu shutdown!&quot;);  
    }  
} 
</code></pre><p><br></p>
<pre><code>public class Memory {  

    public void startup(){  
        System.out.println(&quot;memory startup!&quot;);  
    }  

    public void shutdown(){  
        System.out.println(&quot;memory shutdown!&quot;);  
    }  
}  
</code></pre><p><br></p>
<pre><code>public class Disk {  

    public void startup(){  
        System.out.println(&quot;disk startup!&quot;);  
    }  

    public void shutdown(){  
        System.out.println(&quot;disk shutdown!&quot;);  
    }  
}
</code></pre><p><br></p>
<pre><code>public class Computer {  
    private CPU cpu;  
    private Memory memory;  
    private Disk disk;  

    public Computer(){  
        cpu = new CPU();  
        memory = new Memory();  
        disk = new Disk();  
    }  

    public void startup(){  
        System.out.println(&quot;start the computer!&quot;);  
        cpu.startup();  
        memory.startup();  
        disk.startup();  
        System.out.println(&quot;start computer finished!&quot;);  
    }  

    public void shutdown(){  
        System.out.println(&quot;begin to close the computer!&quot;);  
        cpu.shutdown();  
        memory.shutdown();  
        disk.shutdown();  
        System.out.println(&quot;computer closed!&quot;);  
    }  
}
</code></pre><p><font size="4">User类如下：</font><br> </p>
<pre><code>public class User {  

    public static void main(String[] args) {  
        Computer computer = new Computer();  
        computer.startup();  
        computer.shutdown();  
    }  
} 
</code></pre><p><font size="4">输出：</font><br> </p>
<p><font size="4">start the computer!</font><br> </p>
<p><font size="4">cpu startup!</font><br> </p>
<p><font size="4">memory startup!</font><br> </p>
<p><font size="4">disk startup!</font><br> </p>
<p><font size="4">start computer finished!</font><br> </p>
<p><font size="4">begin to close the computer!</font><br> </p>
<p><font size="4">cpu shutdown!</font><br> </p>
<p><font size="4">memory shutdown!</font><br> </p>
<p><font size="4">disk shutdown!</font><br> </p>
<p><font size="4">computer closed!</font><br> </p>
<p><font size="4">如果我们没有Computer类，那么，CPU、Memory、Disk他们之间将会相互持有实例，产生关系，这样会造成严重的依赖，修改一个类，可能会带来其他类的修改，这不是我们想要看到的，有了Computer类，他们之间的关系被放在了Computer类里，这样就起到了解耦的作用，这，就是外观模式！</font><br> </p>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> technology </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式(八)]]></title>
      <url>/2018/05/01/design-pattern8/</url>
      <content type="html"><![CDATA[<p><div align="center" style="display:none"><br><img src="/photo/4-28/4.jpg" height="330" width="495"><br></div></p>
<p></p><h1>8、代理模式（Proxy）</h1><hr><p></p>
<p><font size="4">其实每个模式名称就表明了该模式的作用，代理模式就是多一个代理类出来，替原对象进行一些操作，比如我们在租房子的时候回去找中介，为什么呢？因为你对该地区房屋的信息掌握的不够全面，希望找一个更熟悉的人去帮你做，此处的代理就是这个意思。再如我们有的时候打官司，我们需要请律师，因为律师在法律方面有专长，可以替我们进行操作，表达我们的想法。先来看看关系图：</font><br><br><img src="/photo/5-1/b.jpg" alt="alt text"><br></p>
<p><font size="4">根据上文的阐述，代理模式就比较容易的理解了，我们看下代码：</font><br> </p>
<pre><code>public interface Sourceable {  
    public void method();  
}  
</code></pre><p><br></p>
<pre><code>public class Source implements Sourceable {  

    @Override  
    public void method() {  
        System.out.println(&quot;the original method!&quot;);  
    }  
} 
</code></pre><p><br></p>
<pre><code>public class Proxy implements Sourceable {  

    private Source source;  
    public Proxy(){  
        super();  
        this.source = new Source();  
    }  
    @Override  
    public void method() {  
        before();  
        source.method();  
        atfer();  
    }  
    private void atfer() {  
        System.out.println(&quot;after proxy!&quot;);  
    }  
    private void before() {  
        System.out.println(&quot;before proxy!&quot;);  
    }  
} 
</code></pre><p><font size="4">测试类：</font><br> </p>
<pre><code>public class ProxyTest {  

    public static void main(String[] args) {  
        Sourceable source = new Proxy();  
        source.method();  
    }  

} 
</code></pre><p><font size="4">输出：</font><br> </p>
<p><font size="4">before proxy!</font><br> </p>
<p><font size="4">the original method!：</font><br> </p>
<p><font size="4">after proxy!</font><br> </p>
<p><font size="4">代理模式的应用场景：</font><br> </p>
<p><font size="4">如果已有的方法在使用的时候需要对原有的方法进行改进，此时有两种办法：</font><br> </p>
<p><font size="4">1、修改原有的方法来适应。这样违反了“对扩展开放，对修改关闭”的原则。</font><br> </p>
<p><font size="4">2、就是采用一个代理类调用原有的方法，且对产生的结果进行控制。这种方法就是代理模式。使用代理模式，可以将功能划分的更加清晰，有助于后期维护！</font><br> </p>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> technology </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式(七)]]></title>
      <url>/2018/05/01/design-pattern7/</url>
      <content type="html"><![CDATA[<p><div align="center" style="display:none"><br><img src="/photo/4-28/1.jpg" height="330" width="495"><br></div></p>
<p></p><h1>7、装饰模式（Decorator）</h1><hr><p></p>
<p><font size="4">顾名思义，装饰模式就是给一个对象增加一些新的功能，而且是动态的，要求装饰对象和被装饰对象实现同一个接口，装饰对象持有被装饰对象的实例，关系图如下：</font><br><br><img src="/photo/5-1/a.jpg" alt="alt text"><br></p>
<p><font size="4">Source类是被装饰类，Decorator类是一个装饰类，可以为Source类动态的添加一些功能，代码如下：</font><br> </p>
<pre><code>public interface Sourceable {  
    public void method();  
} 
</code></pre><p><br></p>
<pre><code>public class Source implements Sourceable {  

    @Override  
    public void method() {  
        System.out.println(&quot;the original method!&quot;);  
    }  
}  
</code></pre><p><br></p>
<pre><code>public class Decorator implements Sourceable {  

    private Sourceable source;  

    public Decorator(Sourceable source){  
        super();  
        this.source = source;  
    }  
    @Override  
    public void method() {  
        System.out.println(&quot;before decorator!&quot;);  
        source.method();  
        System.out.println(&quot;after decorator!&quot;);  
    }  
}  
</code></pre><p><font size="4">测试类：</font><br> </p>
<pre><code>public class DecoratorTest {  

    public static void main(String[] args) {  
        Sourceable source = new Source();  
        Sourceable obj = new Decorator(source);  
        obj.method();  
    }
</code></pre><p><font size="4">输出：</font><br> </p>
<p><font size="4">before decorator!</font><br> </p>
<p><font size="4">the original method!</font><br> </p>
<p><font size="4">after decorator!</font><br> </p>
<p><font size="4" color="red">装饰器模式的应用场景：</font><br> </p>
<p><font size="4">1、需要扩展一个类的功能。</font><br> </p>
<p><font size="4">2、动态的为一个对象增加功能，而且还能动态撤销。（继承不能做到这一点，继承的功能是静态的，不能动态增删。）</font><br> </p>
<p><font size="4">缺点：产生过多相似的对象，不易排错！</font><br> </p>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> technology </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Integer与int知多少]]></title>
      <url>/2018/04/28/Integer/</url>
      <content type="html"><![CDATA[<p><div align="center" style="display:none"><br><img src="/photo/4-28/2.png" height="330" width="495"><br></div><br><strong><font size="5">Integer与int的种种比较</font></strong><br></p>
<p><font size="4">如果面试官问Integer与int的区别：估计大多数人只会说道两点，Ingeter是int的包装类，int的初值为0，Ingeter的初值为null。但是如果面试官再问一下Integer i = 1;int ii = 1; i==ii为true还是为false？估计就有一部分人答不出来了，如果再问一下其他的，估计更多的人会头脑一片混乱。请看如下代码：</font><br></p>
<pre><code>public class TestInteger {
 8 
 9     /**
10      * @param args
11      */
12     public static void main(String[] args) {
13         int i = 128;
14         Integer i2 = 128;
15         Integer i3 = new Integer(128);
16         //Integer会自动拆箱为int，所以为true
17         System.out.println(i == i2);
18         System.out.println(i == i3);
19         System.out.println(&quot;**************&quot;);
20         Integer i5 = 127;//java在编译的时候,被翻译成-&gt; Integer i5 = Integer.valueOf(127);
21         Integer i6 = 127;
22         System.out.println(i5 == i6);//true
23         /*Integer i5 = 128;
24         Integer i6 = 128;
25         System.out.println(i5 == i6);//false
26 */        Integer ii5 = new Integer(127);
27         System.out.println(i5 == ii5); //false
28         Integer i7 = new Integer(128);
29         Integer i8 = new Integer(128);
30         System.out.println(i7 == i8);  //false
31     }
32 
33 }
</code></pre><p><font size="4">首先，17行和18行输出结果都为true,因为Integer和int比都会自动拆箱（jdk1.5以上）。</font><br><font size="4">22行的结果为true,而25行则为false,很多人都不动为什么。其实java在编译Integer i5 = 127的时候,被翻译成-&gt; Integer i5 = Integer.valueOf(127);所以关键就是看valueOf()函数了。只要看看valueOf()函数的源码就会明白了。JDK源码的valueOf函数式这样的：</font><br></p>
<pre><code>1 public static Integer valueOf(int i) {
2         assert IntegerCache.high &gt;= 127;
3         if (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)
4             return IntegerCache.cache[i + (-IntegerCache.low)];
5         return new Integer(i);
6     }
</code></pre><p><font size="4">看一下源码大家都会明白，对于-128到127之间的数，会进行缓存，Integer i5 = 127时，会将127进行缓存，下次再写Integer i6 = 127时，就会直接从缓存中取，就不会new了。所以22行的结果为true,而25行为false。</font><br></p>
<p><font size="4">对于27行和30行，因为对象不一样，所以为false。</font><br> </p>
<p><font size="4">我对于以上的情况总结如下：</font><br> </p>
<p><font size="4">①无论如何，Integer与new Integer不会相等。不会经历拆箱过程，i3的引用指向堆，而i4指向专门存放他的内存（常量池），他们的内存地址不一样，所以为false</font><br> </p>
<p><font size="4">②两个都是非new出来的Integer，如果数在-128到127之间，则是true,否则为false。java在编译Integer i2 = 128的时候,被翻译成-&gt; Integer i2 = Integer.valueOf(128);而valueOf()函数会对-128到127之间的数进行缓存</font><br> </p>
<p><font size="4">③两个都是new出来的,都为false</font><br> </p>
<p><font size="4">④int和integer(无论new否)比，都为true，因为会把Integer自动拆箱为int再去比</font><br> </p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式(六)]]></title>
      <url>/2018/04/28/design-pattern6/</url>
      <content type="html"><![CDATA[<p><div align="center" style="display:none"><br><img src="/photo/4-28/large.png" height="330" width="495"><br></div></p>
<p></p><h1>B、结构模式（7种）</h1><hr><p></p>
<p><font size="4">我们接着讨论设计模式，上篇设计模式文章讲完了5种创建型模式，这章开始，讲下7种结构型模式：适配器模式、装饰模式、代理模式、外观模式、桥接模式、组合模式、享元模式。其中对象的适配器模式是各种模式的起源，我们看下面的图：</font><br><br><img src="/photo/4-28/a.png" alt="alt text"><br></p>
<p></p><h2>6、适配器模式</h2><p></p>
<p><font size="4">适配器模式将某个类的接口转换成客户端期望的另一个接口表示，目的是消除由于接口不匹配所造成的类的兼容性问题。主要分为三类：类的适配器模式、对象的适配器模式、接口的适配器模式。</font><br><br><strong><em><h3>I.类的适配器模式</h3></em></strong><br><img src="/photo/4-28/b.jpg" alt="alt text"><br></p>
<p><font size="4">核心思想就是：有一个Source类，拥有一个方法，待适配，目标接口是Targetable，通过Adapter类，将Source的功能扩展到Targetable里，看代码：</font><br> </p>
<pre><code>public class Source {  

    public void method1() {  
        System.out.println(&quot;this is original method!&quot;);  
    }  
}  
</code></pre><p><br></p>
<pre><code>public interface Targetable {  

    /* 与原类中的方法相同 */  
    public void method1();  

    /* 新类的方法 */  
    public void method2();  
}  
</code></pre><p><br></p>
<pre><code>public class Adapter extends Source implements Targetable {  

    @Override  
    public void method2() {  
        System.out.println(&quot;this is the targetable method!&quot;);  
    }  
} 
</code></pre><p><font size="4">Adapter类继承Source类，实现Targetable接口，下面是测试类：</font><br> </p>
<pre><code>public class AdapterTest {  

    public static void main(String[] args) {  
        Targetable target = new Adapter();  
        target.method1();  
        target.method2();  
    }  
} 
</code></pre><p><font size="4">输出：</font><br> </p>
<p><font size="4">this is original method!</font><br> </p>
<p><font size="4">this is the targetable method!</font><br> </p>
<p><font size="4">这样Targetable接口的实现类就具有了Source类的功能。</font><br><br><strong><em><h3>II.对象的适配器模式</h3></em></strong></p>
<p><font size="4">基本思路和类的适配器模式相同，只是将Adapter类作修改，这次不继承Source类，而是持有Source类的实例，以达到解决兼容性的问题。看图：</font><br><br><img src="/photo/4-28/c.jpg" alt="alt text"><br></p>
<p><font size="4">只需要修改Adapter类的源码即可：</font><br> </p>
<pre><code>public class Wrapper implements Targetable {  

    private Source source;  

    public Wrapper(Source source){  
        super();  
        this.source = source;  
    }  
    @Override  
    public void method2() {  
        System.out.println(&quot;this is the targetable method!&quot;);  
    }  

    @Override  
    public void method1() {  
        source.method1();  
    }  
}  
</code></pre><p><font size="4">测试类：</font><br> </p>
<pre><code>public class AdapterTest {  

    public static void main(String[] args) {  
        Source source = new Source();  
        Targetable target = new Wrapper(source);  
        target.method1();  
        target.method2();  
    }  
}  
</code></pre><p><font size="4">输出与第一种一样，只是适配的方法不同而已。</font><br><br><strong><em><h3>III.接口的适配器模式</h3></em></strong></p>
<p><font size="4">接口的适配器是这样的：有时我们写的一个接口中有多个抽象方法，当我们写该接口的实现类时，必须实现该接口的所有方法，这明显有时比较浪费，因为并不是所有的方法都是我们需要的，有时只需要某一些，此处为了解决这个问题，我们引入了接口的适配器模式，借助于一个抽象类，该抽象类实现了该接口，实现了所有的方法，而我们不和原始的接口打交道，只和该抽象类取得联系，所以我们写一个类，继承该抽象类，重写我们需要的方法就行。看一下类图：</font><br><br><img src="/photo/4-28/d.jpg" alt="alt text"><br></p>
<p><font size="4">这个很好理解，在实际开发中，我们也常会遇到这种接口中定义了太多的方法，以致于有时我们在一些实现类中并不是都需要。看代码：</font><br> </p>
<pre><code>public interface Sourceable {  

    public void method1();  
    public void method2();  
}  
</code></pre><p><font size="4">抽象类Wrapper2：</font><br> </p>
<pre><code>public abstract class Wrapper2 implements Sourceable{  

    public void method1(){}  
    public void method2(){}  
}  
</code></pre><p><br></p>
<pre><code>public class SourceSub1 extends Wrapper2 {  
    public void method1(){  
        System.out.println(&quot;the sourceable interface&apos;s first Sub1!&quot;);  
    }  
} 
</code></pre><p><br></p>
<pre><code>public class SourceSub2 extends Wrapper2 {  
    public void method2(){  
        System.out.println(&quot;the sourceable interface&apos;s second Sub2!&quot;);  
    }  
}  
</code></pre><p><br></p>
<pre><code>public class WrapperTest {  

    public static void main(String[] args) {  
        Sourceable source1 = new SourceSub1();  
        Sourceable source2 = new SourceSub2();  

        source1.method1();  
        source1.method2();  
        source2.method1();  
        source2.method2();  
    }  
}  
</code></pre><p><font size="4">测试输出：</font><br> </p>
<p><font size="4">the sourceable interface’s first Sub1!</font><br> </p>
<p><font size="4">the sourceable interface’s second Sub2!</font><br> </p>
<p><font size="4">总结一下三种适配器模式的应用场景：</font><br></p>
<p><font size="4">类的适配器模式：当希望将一个类转换成满足另一个新接口的类时，可以使用类的适配器模式，创建一个新类，继承原有的类，实现新的接口即可。</font><br> </p>
<p><font size="4">对象的适配器模式：当希望将一个对象转换成满足另一个新接口的对象时，可以创建一个Wrapper类，持有原类的一个实例，在Wrapper类的方法中，调用实例的方法就行。</font><br> </p>
<p><font size="4">接口的适配器模式：当不希望实现一个接口中所有的方法时，可以创建一个抽象类Wrapper，实现所有方法，我们写别的类的时候，继承抽象类即可。</font><br> </p>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> technology </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[serialVersionUID的作用]]></title>
      <url>/2018/04/27/SerialVersionId/</url>
      <content type="html"><![CDATA[<p><div align="center" style="display:none"><br><img src="/photo/4-26/uid.jpg" height="330" width="495"><br></div><br><strong><font size="5">java类中serialversionuid 作用</font></strong><br></p>
<p><font size="4">serialVersionUID适用于Java的序列化机制。简单来说，Java的序列化机制是通过判断类的serialVersionUID来验证版本一致性的。在进行反序列化时，JVM会把传来的字节流中的serialVersionUID与本地相应实体类的serialVersionUID进行比较，如果相同就认为是一致的，可以进行反序列化，否则就会出现序列化版本不一致的异常，即是InvalidCastException。</font><br><br><strong><font size="4">具体的序列化过程是这样的：</font><br></strong><font size="4">序列化操作的时候系统会把当前类的serialVersionUID写入到序列化文件中，当反序列化时系统会去检测文件中的serialVersionUID，判断它是否与当前类的serialVersionUID一致，如果一致就说明序列化类的版本与当前类版本是一样的，可以反序列化成功，否则失败。</font><br>  </p>
<p><font size="4" color="red">serialVersionUID有两种显示的生成方式：</font><br> </p>
<p><font size="4">一是默认的1L，比如：private static final long serialVersionUID = 1L; </font><br> </p>
<p><font size="4">二是根据类名、接口名、成员方法及属性等来生成一个64位的哈希字段，比如：<br>private static final  long   serialVersionUID = xxxxL; </font><br> </p>
<p><font size="4">当一个类实现了Serializable接口，如果没有显示的定义serialVersionUID，Eclipse会提供相应的提醒。面对这种情况，我们只需要在Eclipse中点击类中warning图标一下，Eclipse就会      自动给定两种生成的方式。如果不想定义，在Eclipse的设置中也可以把它关掉的，设置如下：<br>Window ==&gt; Preferences ==&gt; Java ==&gt; Compiler ==&gt; Error/Warnings ==&gt; Potential programming problems.将Serializable class without serialVersionUID的warning改成ignore即可。</font><br> </p>
<p><font size="4">当实现java.io.Serializable接口的类没有显式地定义一个serialVersionUID变量时候，Java序列化机制会根据编译的Class自动生成一个serialVersionUID作序列化版本比较用，这种情况下，如果Class文件(类名，方法明等)没有发生变化(增加空格，换行，增加注释等等)，就算再编译多次，serialVersionUID也不会变化的。</font><br> </p>
<p><font size="4">如果我们不希望通过编译来强制划分软件版本，即实现序列化接口的实体能够兼容先前版本，就需要显式地定义一个名为serialVersionUID，类型为long的变量，不修改这个变量值的序列化实体都可以相互进行串行化和反串行化。</font><br> </p>
<p><font size="4">下面用代码说明一下serialVersionUID在应用中常见的几种情况。</font><br> </p>
<p><font size="4">（1）序列化实体类:</font><br> </p>
<pre><code>import java.io.Serializable;

public class Person implements Serializable {
    private static final long serialVersionUID = 123456789L;
    public int id;
    public String name;

    public Person(int id, String name) {
        this.id = id;
        this.name = name;
    }

    public String toString() {
        return &quot;Person: &quot; + id + &quot; &quot; + name;
    }
}
</code></pre><p><font size="4">（2）序列化功能:</font><br> </p>
<pre><code>import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;

public class SerialTest {

    public static void main(String[] args) throws IOException {
        Person person = new Person(1234, &quot;wang&quot;);
        System.out.println(&quot;Person Serial&quot; + person);
        FileOutputStream fos = new FileOutputStream(&quot;Person.txt&quot;);
        ObjectOutputStream oos = new ObjectOutputStream(fos);
        oos.writeObject(person);
        oos.flush();
        oos.close();
    }
}
</code></pre><p><font size="4">（3）反序列化功能:</font><br> </p>
<pre><code>import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;

public class DeserialTest {
    public static void main(String[] args) throws IOException, ClassNotFoundException {
        Person person;

        FileInputStream fis = new FileInputStream(&quot;Person.txt&quot;);
        ObjectInputStream ois = new ObjectInputStream(fis);
        person = (Person) ois.readObject();
        ois.close();
        System.out.println(&quot;Person Deserial&quot; + person);
    }

}
</code></pre><p><font size="4" color="red">情况一：假设Person类序列化之后，从A端传输到B端,【这里用A端表示进行序列化操作，B端为反序列化操作】，然后在B端进行反序列化。在序列化Person和反序列化Person的时候，A端和B端都需要存在一个相同的类。如果两处的serialVersionUID不一致，会产生什么错误呢?</font><br> </p>
<p><font size="4">【答案】可以利用上面的代码做个试验来验证：先执行测试类SerialTest，生成序列化文件，代表A端序列化后的文件，然后修改serialVersion值，再执行测试类DeserialTest，代表B端使用不同serialVersion的类去反序列化，结果报错:</font><br> </p>
<pre><code>Exception in thread &quot;main&quot; java.io.InvalidClassException: com.sf.code.serial.Person; local class incompatible: stream classdesc serialVersionUID = 1234567890, local class serialVersionUID = 123456789
    at java.io.ObjectStreamClass.initNonProxy(ObjectStreamClass.java:621)
    at java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:1623)
    at java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1518)
    at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1774)
    at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1351)
    at java.io.ObjectInputStream.readObject(ObjectInputStream.java:371)
    at com.sf.code.serial.DeserialTest.main(DeserialTest.java:13)
</code></pre><p><font size="4" color="red">情况二：假设两处serialVersionUID一致，如果A端增加一个字段，然后序列化，而B端不变,(指在序列化之前增加一个字段，在反序列化前再把它去掉)，然后反序列化，会是什么情况呢?</font><br> </p>
<pre><code>package com.sf.code.serial;

import java.io.Serializable;

public class Person implements Serializable {
    private static final long serialVersionUID = 1234567890L;
    public int id;
    public String name;
    public int age;

    public Person(int id, String name) {
        this.id = id;
        this.name = name;
    }

    public Person(int id, String name, int age) {
        this.id = id;
        this.name = name;
        this.age = age;
    }

    public String toString() {
        return &quot;Person: &quot; + id 
                + &quot;,name:&quot; + name 
                + &quot;,age:&quot; + age;
    }

} 
</code></pre><p><br></p>
<pre><code>public class SerialTest {

    public static void main(String[] args) throws IOException {
        Person person = new Person(1234, &quot;wang&quot;, 100);
        System.out.println(&quot;Person Serial&quot; + person);
        FileOutputStream fos = new FileOutputStream(&quot;Person.txt&quot;);
        ObjectOutputStream oos = new ObjectOutputStream(fos);
        oos.writeObject(person);
        oos.flush();
        oos.close();
    }
}
</code></pre><p><font size="4">Person DeserialPerson: 1234,name:wang</font><br> </p>
<p><font size="4">【答案】新增 public int age; 执行SerialTest，生成序列化文件，代表A端。删除 public int age，反序列化，代表B端，最后的结果为：执行序列化，反序列化正常，但是A端增加的字段丢失(被B端忽略)。</font><br> </p>
<p><font size="4" color="red">情况三：假设两处serialVersionUID一致，如果B端减少一个字段(即反序列化之前注释掉某字段)，A端不变，会是什么情况呢??</font><br> </p>
<pre><code>import java.io.Serializable;

public class Person implements Serializable {
    private static final long serialVersionUID = 1234567890L;
    public int id;
    //public String name;

    public int age;

    public Person(int id, String name) {
        this.id = id;
        //this.name = name;
    }

    public String toString() {
        return &quot;Person: &quot; + id 
                //+ &quot;,name:&quot; + name 
                + &quot;,age:&quot; + age;
    }
}
</code></pre><p><font size="4">Person DeserialPerson: 1234,age:0</font><br> </p>
<p><font size="4">【答案】序列化，反序列化正常，B端字段少于A端，A端多的字段值丢失(被B端忽略)。</font><br> </p>
<p><font size="4" color="red">情况四：假设两处serialVersionUID一致，如果B端增加一个字段，A端不变，会是什么情况呢?验证过程如下：</font><br> </p>
<p><font size="4">先执行SerialTest，然后在实体类Person增加一个字段age，如下所示，再执行测试类DeserialTest.</font><br> </p>
<pre><code>import java.io.Serializable;

public class Person implements Serializable {
    private static final long serialVersionUID = 1234567890L;
    public int id;
    public String name;
    public int age;

    public Person(int id, String name) {
        this.id = id;
        this.name = name;
    }

    /*public Person(int id, String name, int age) {
        this.id = id;
        this.name = name;
        this.age = age;
    }*/

    public String toString() {
        return &quot;Person: &quot; + id 
                + &quot;,name:&quot; + name 
                + &quot;,age:&quot; + age;
    }
}
</code></pre><p><font size="4">结果：Person DeserialPerson: 1234,name:wang,age:0</font><br> </p>
<p><font size="4">说明序列化，反序列化正常，B端新增加的int字段被赋予了默认值0。</font><br> </p>
<p><font size="5" color="red">静态变量序列化</font><br> </p>
<p><font size="4">情境：查看如下代码。</font><br> </p>
<pre><code>public class Test implements Serializable {

    private static final long serialVersionUID = 1L;

    public static int staticVar = 5;

    public static void main(String[] args) {
        try {
            //初始时staticVar为5
            ObjectOutputStream out = new ObjectOutputStream(
                    new FileOutputStream(&quot;result.obj&quot;));
            out.writeObject(new Test());
            out.close();

            //序列化后修改为10
            Test.staticVar = 10;

            ObjectInputStream oin = new ObjectInputStream(new FileInputStream(
                    &quot;result.obj&quot;));
            Test t = (Test) oin.readObject();
            oin.close();

            //再读取，通过t.staticVar打印新的值
            System.out.println(t.staticVar);

        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
    }
}
</code></pre><p><font size="4">在main 方法中将对象序列化后，修改静态变量的数值，再将序列化对象读取出来，然后通过读取出来的对象获得静态变量的数值并打印出来。依照清单 2，这个 System.out.println(t.staticVar) 语句输出的是 10 还是 5 呢？</font><br> </p>
<p><font size="4">最后的输出是 10，对于无法理解的读者认为，打印的 staticVar 是从读取的对象里获得的，应该是保存时的状态才对。之所以打印 10 的原因在于序列化时，并不保存静态变量，这其实比较容易理解，序列化保存的是对象的状态，静态变量属于类的状态，因此 序列化并不保存静态变量。</font><br> </p>
<p><font size="5" color="red">父类的序列化与 Transient 关键字</font><br></p>
<p><font size="4">情境：一个子类实现了 Serializable 接口，它的父类都没有实现 Serializable 接口，序列化该子类对象，然后反序列化后输出父类定义的某变量的数值，该变量数值与序列化时的数值不同。</font><br>  </p>
<p><font size="4">解决：要想将父类对象也序列化，就需要让父类也实现Serializable 接口。如果父类不实现的话的，就需要有默认的无参的构造函数。在父类没有实现 Serializable 接口时，虚拟机是不会序列化父对象的，而一个 Java 对象的构造必先有父对象，才有子对象，反序列化也不例外。所以反序列化时，为了构造父对象，只能调用父类的无参构造函数作为默认的父对象。因此当我们取父对象的变量值时，它的值是调用父类无参构造函数后的值。如果你考虑到这种序列化的情况，在父类无参构造函数中对变量进行初始化，否则的话，父类变量值都是默认声明的值，如 int 型的默认是 0，string 型的默认是 null。</font><br> </p>
<p><font size="4">Transient 关键字的作用是控制变量的序列化，在变量声明前加上该关键字，可以阻止该变量被序列化到文件中，在被反序列化后，transient 变量的值被设为初始值，如 int 型的是 0，对象型的是 null。</font><br></p>
<p><font size="4">特性使用案例：</font><br> <font size="4">我们熟悉使用 Transient 关键字可以使得字段不被序列化，那么还有别的方法吗？根据父类对象序列化的规则，我们可以将不需要被序列化的字段抽取出来放到父类中，子类实现 Serializable 接口，父类不实现，根据父类序列化规则，父类的字段数据将不被序列化，形成类图如下所示。</font><br><br><img src="/photo/4-26/b.jpg" alt="alt text"><br><font size="4">上图中可以看出，attr1、attr2、attr3、attr5 都不会被序列化，放在父类中的好处在于当有另外一个 Child 类时，attr1、attr2、attr3 依然不会被序列化，不用重复抒写 transient，代码简洁。</font><br> </p>
<p><font size="5" color="red">static final 修饰的serialVersionUID 如何被写入到序列化文件中的?</font><br></p>
<p><font size="4">看下面的源码。序列化写入时的ObjectStreamClass.java中，</font><br> </p>
<pre><code>void writeNonProxy(ObjectOutputStream out) throws IOException {
        out.writeUTF(name);
        out.writeLong(getSerialVersionUID());

        byte flags = 0;
        ...
</code></pre><p><font size="4">其中，getSerialVersionUID()函数如下：</font><br> </p>
<pre><code>public long getSerialVersionUID() {
        // REMIND: synchronize instead of relying on volatile?
        if (suid == null) {
            suid = AccessController.doPrivileged(
                new PrivilegedAction&lt;Long&gt;() {
                    public Long run() {
                        return computeDefaultSUID(cl);
                    }
                }
            );
        }
        return suid.longValue();
    }
</code></pre><p><img src="/photo/4-26/uid1.png" alt="alt text"><br><br><img src="/photo/4-26/uid2.png" alt="alt text"><br><br><img src="/photo/4-26/uid3.png" alt="alt text"><br></p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java Object对象之clone方法]]></title>
      <url>/2018/04/27/clone/</url>
      <content type="html"><![CDATA[<p><div align="center" style="display:none"><br><img src="/photo/4-26/a.jpg" height="330" width="495"><br></div><br><strong><font size="5">Object对象之clone方法</font></strong><br></p>
<p><font size="4" color="red">克隆的目的：</font><font size="4">快速创建一个已有对象的副本。</font><br> </p>
<p><font size="4" color="red">克隆的步骤：</font><br></p>
<p><font size="4">1.创建一个对象</font><br> </p>
<p><font size="4">2.将原有对象的数据导入到新创建的数据中</font><br></p>
<p><font size="4" color="red">1. Object的clone()源代码简介</font><br></p>
<pre><code>/** 
 * Creates and returns a copy of this {@code Object}. The default 
 * implementation returns a so-called &quot;shallow&quot; copy: It creates a new 
 * instance of the same class and then copies the field values (including 
 * object references) from this instance to the new instance. A &quot;deep&quot; copy, 
 * in contrast, would also recursively clone nested objects. A subclass that 
 * needs to implement this kind of cloning should call {@code super.clone()} 
 * to create the new instance and then create deep copies of the nested, 
 * mutable objects. 
 * 
 * @return a copy of this object. 
 * @throws CloneNotSupportedException 
 *             if this object&apos;s class does not implement the {@code 
 *             Cloneable} interface. 
 */  
protected Object clone() throws CloneNotSupportedException {  
    if (!(this instanceof Cloneable)) {  
        throw new CloneNotSupportedException(&quot;Class doesn&apos;t implement Cloneable&quot;);  
    }  

    return internalClone((Cloneable) this);  
}  

/* 
 * Native helper method for cloning. 
 */  
private native Object internalClone(Cloneable o); 
</code></pre><p><font size="4">clone方法首先会判对象是否实现了Cloneable接口，若无则抛出CloneNotSupportedException, 最后会调用internalClone. intervalClone是一个native方法，一般来说native方法的执行效率高于非native方法。</font><br><font size="4">当某个类要复写clone方法时，要继承Cloneable接口。通常的克隆对象都是通过super.clone()方法来克隆对象。</font><br></p>
<p><font size="4" color="red">2.浅克隆(shallow clone)</font><br></p>
<p><font size="4">克隆就是复制一个对象的复本.若只需要复制对象的字段值（对于基本数据类型,如:int,long,float等，则复制值；对于复合数据类型仅复制该字段值，如数组变量则复制地址，对于对象变量则复制对象的reference。例子：</font><br> </p>
<pre><code>public class ShallowClone implements Cloneable{  

    private int a;   // 基本类型  
    private int[] b; // 非基本类型  
    // 重写Object.clone()方法,并把protected改为public  
    @Override  
    public Object clone(){  
        ShallowClone sc = null;  
        try  
        {  
            sc = (ShallowClone) super.clone();  
        } catch (CloneNotSupportedException e){  
            e.printStackTrace();  
        }  
        return sc;  
    }  
    public int getA()  
    {  
        return a;  
    }  
    public void setA(int a)  
    {  
        this.a = a;  
    }  
    public int[] getB() {  
    return b;  
    }  
    public void setB(int[] b) {  
    this.b = b;  
    }    
} 
</code></pre><p><font size="4">然后进行测试：</font><br> </p>
<pre><code>public class Test{  
    public static void main(String[] args) throws CloneNotSupportedException{  
        ShallowClone c1 = new SlladowClone();  
        //对c1赋值  
        c1.setA(100) ;  
        c1.setB(new int[]{1000}) ;  

        System.out.println(&quot;克隆前c1:  a=&quot;+c1.getA()+&quot; b=&quot;+c1.getB()[0]);  
        //克隆出对象c2,并对c2的属性A,B,C进行修改  
        ShallowClone c2 = (ShallowClone) c1.clone();  
        //对c2进行修改  
        c2.setA(50) ;  
        int []a = c2.getB() ;  
        a[0]=5 ;  
        c2.setB(a);  
        System.out.println(&quot;克隆前c1:  a=&quot;+c1.getA()+&quot; b=&quot;+c1.getB()[0]);  
        System.out.println(&quot;克隆后c2:  a=&quot;+c2.getA()+ &quot; b[0]=&quot;+c2.getB()[0]);  
    }  
}
</code></pre><p><font size="4">结果为：</font><br> </p>
<p><font size="4">克隆前c1:  a=100 b=1000</font><br> <font size="4">克隆前c1:  a=100 b=5</font><br><font size="4">克隆后c2:  a=50 b[0]=5</font><br> <font size="4">c1和c2的对象模型：</font><br><br><img src="/photo/4-26/clone1.png" alt="alt text"><br></p>
<p><font size="4">可看出，基本类型可以使用浅克隆，而对于引用类型，由于引用的是内容相同，所以改变c2实例对象中的属性就会影响到c1。所以引用类型需要使用深克隆。另外，在开发一个不可变类的时候，如果这个不可变类中成员有引用类型，则就需要通过深克隆来达到不可变的目的。</font><br> <font size="4" color="red">深克隆(deep clone)</font><br><font size="4">深克隆与浅克隆的区别在于对复合数据类型的复制。若对象中的某个字段为复合类型，在克隆对象的时候，需要为该字段重新创建一个对象。例子：</font><br> </p>
<pre><code>public class DeepClone implements Cloneable {  

    private int a;   // 基本类型  
    private int[] b; // 非基本类型  
    // 重写Object.clone()方法,并把protected改为public  
    @Override  
    public Object clone(){  
        DeepClone sc = null;  
        try  
        {  
            sc = (DeepClone) super.clone();  
            int[] t = sc.getB();  
            int[] b1 = new int[t.length];  
            for (int i = 0; i &lt; b1.length; i++) {  
                b1[i] = t[i];  
            }  
            sc.setB(b1);  
        } catch (CloneNotSupportedException e){  
            e.printStackTrace();  
        }  
        return sc;  
    }  
    public int getA()  
    {  
        return a;  
    }  
    public void setA(int a)  
    {  
        this.a = a;  
    }  
    public int[] getB() {  
        return b;  
    }  
    public void setB(int[] b) {  
        this.b = b;  
    }  
} 
</code></pre><p><font size="4">结果为：</font><br></p>
<p><font size="4">克隆前c1:  a=100 b=1000</font><br> <font size="4">克隆前c1:  a=100 b=1000</font><br> <font size="4">克隆后c2:  a=50 b[0]=5</font><br> <font size="4">c1和c2的对象模型：</font><br><br><img src="/photo/4-26/clone2.png" alt="alt text"><br></p>
<p><font size="4" color="red">4、总结：</font><br><font size="4"></font></p>
<p><font size="4">1.克隆方法用于创建对象的拷贝，为了使用clone方法，类必须实现java.lang.Cloneable接口重写protected方法clone，如果没有实现Clonebale接口会抛出CloneNotSupportedException.</font><br> </p>
<p><font size="4">2.在克隆java对象的时候不会调用构造器</font><br> </p>
<p><font size="4">3.java提供一种叫浅拷贝（shallow copy）的默认方式实现clone，创建好对象的副本后然后通过赋值拷贝内容，意味着如果你的类包含引用类型，那么原始对象和克隆都将指向相同的引用内容，这是很危险的，因为发生在可变的字段上任何改变将反应到他们所引用的共同内容上。为了避免这种情况，需要对引用的内容进行深度克隆。</font><br> </p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式（五）]]></title>
      <url>/2018/04/27/design-pattern5/</url>
      <content type="html"><![CDATA[<p><div align="center" style="display:none"><br><img src="/photo/4-26/4.jpg" height="330" width="495"><br></div><br><strong><font size="5">5、原型模式（Prototype）</font></strong><br></p>
<p><font size="4">原型模式虽然是创建型的模式，但是与工程模式没有关系，从名字即可看出，该模式的思想就是将一个对象作为原型，对其进行复制、克隆，产生一个和原对象类似的新对象。本小结会通过对象的复制，进行讲解。在Java中，复制对象是通过clone()实现的，先创建一个原型类：</font><br> </p>
<pre><code>public class Prototype implements Cloneable {  

    public Object clone() throws CloneNotSupportedException {  
        Prototype proto = (Prototype) super.clone();  
        return proto;  
    }  
}  
</code></pre><p><font size="4">很简单，一个原型类，只需要实现Cloneable接口，覆写clone方法，此处clone方法可以改成任意的名称，因为Cloneable接口是个空接口，你可以任意定义实现类的方法名，如cloneA或者cloneB，因为此处的重点是super.clone()这句话，super.clone()调用的是Object的clone()方法，而在Object类中，clone()是native的，具体怎么实现，我会在另一篇文章中，关于解读Java中本地方法的调用，此处不再深究。在这儿，我将结合对象的浅复制和深复制来说一下，首先需要了解对象深、浅复制的概念：</font><br> <font size="4">浅复制：将一个对象复制后，基本数据类型的变量都会重新创建，而引用类型，指向的还是原对象所指向的。</font><br> <font size="4">深复制：将一个对象复制后，不论是基本数据类型还有引用类型，都是重新创建的。简单来说，就是深复制进行了完全彻底的复制，而浅复制不彻底。</font><br> <font size="4">此处，写一个深浅复制的例子：</font><br> </p>
<pre><code>public class Prototype implements Cloneable, Serializable {  

    private static final long serialVersionUID = 1L;  
    private String string;  

    private SerializableObject obj;  

    /* 浅复制 */  
    public Object clone() throws CloneNotSupportedException {  
        Prototype proto = (Prototype) super.clone();  
        return proto;  
    }  

    /* 深复制 */  
    public Object deepClone() throws IOException, ClassNotFoundException {  

        /* 写入当前对象的二进制流 */  
        ByteArrayOutputStream bos = new ByteArrayOutputStream();  
        ObjectOutputStream oos = new ObjectOutputStream(bos);  
        oos.writeObject(this);  

        /* 读出二进制流产生的新对象 */  
        ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());  
        ObjectInputStream ois = new ObjectInputStream(bis);  
        return ois.readObject();  
    }  

    public String getString() {  
        return string;  
    }  

    public void setString(String string) {  
        this.string = string;  
    }  

    public SerializableObject getObj() {  
        return obj;  
    }  

    public void setObj(SerializableObject obj) {  
        this.obj = obj;  
    }  

}  

class SerializableObject implements Serializable {  
    private static final long serialVersionUID = 1L;  
}  
</code></pre><p><font size="4">要实现深复制，需要采用流的形式读入当前对象的二进制输入，再写出二进制数据对应的对象。</font><br> </p>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> technology </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式（四）]]></title>
      <url>/2018/04/27/design-pattern4/</url>
      <content type="html"><![CDATA[<p><div align="center" style="display:none"><br><img src="/photo/4-26/5.jpg" height="330" width="495"><br></div><br><strong><font size="5">4、建造者模式（Builder）</font></strong><br></p>
<p><font size="4">工厂类模式提供的是创建单个类的模式，而建造者模式则是将各种产品集中起来进行管理，用来创建复合对象，所谓复合对象就是指某个类具有不同的属性，其实建造者模式就是前面抽象工厂模式和最后的Test结合起来得到的。我们看一下代码：</font><br> </p>
<p><font size="4" color="red">我觉得建造者模式具体可参照<a href="https://blog.csdn.net/carson_ho/article/details/54910597" target="_blank" rel="noopener">此处</a>，其中个人觉得可以参照抽象工厂模式，类比Builder是抽象工厂，ConcreteBuilder是具体工厂比如dell工厂等。</font><br></p>
<p><font size="4"><strong>下面的建造者模式例子不妥当仅供参考，以上面链接为准，下面摘自其原文。</strong>还和前面一样，一个Sender接口，两个实现类MailSender和SmsSender。最后，建造者类如下：</font><br> </p>
<pre><code>public class Builder {  

    private List&lt;Sender&gt; list = new ArrayList&lt;Sender&gt;();  

    public void produceMailSender(int count){  
        for(int i=0; i&lt;count; i++){  
            list.add(new MailSender());  
        }  
    }  

    public void produceSmsSender(int count){  
        for(int i=0; i&lt;count; i++){  
            list.add(new SmsSender());  
        }  
    }  
} 
</code></pre><p><font size="4">测试类：</font><br></p>
<pre><code>public class Test {  

    public static void main(String[] args) {  
        Builder builder = new Builder();  
        builder.produceMailSender(10);  
    }  
}
</code></pre><p><font size="4">从这点看出，建造者模式将很多功能集成到一个类里，这个类可以创造出比较复杂的东西。所以与工程模式的区别就是：工厂模式关注的是创建单个产品，而建造者模式则关注创建符合对象，多个部分。因此，是选择工厂模式还是建造者模式，依实际情况而定。</font><br>  </p>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> technology </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式（三）]]></title>
      <url>/2018/04/26/design-pattern3/</url>
      <content type="html"><![CDATA[<p><div align="center" style="display:none"><br><img src="/photo/4-26/8.jpg" height="330" width="495"><br></div><br><strong><font size="5">3、单例模式（Singleton）</font></strong><br></p>
<p><font size="4">单例对象（Singleton）是一种常用的设计模式。在Java应用中，单例对象能保证在一个JVM中，该对象只有一个实例存在。这样的模式有几个<strong>好处</strong>：</font><br></p>
<p><font size="4">1、某些类创建比较频繁，对于一些大型的对象，这是一笔很大的系统开销。</font><br></p>
<p><font size="4">2、省去了new操作符，降低了系统内存的使用频率，减轻GC压力。</font><br></p>
<p><font size="4">3、有些类如交易所的核心交易引擎，控制着交易流程，如果该类可以创建多个的话，系统完全乱了。（比如一个军队出现了多个司令员同时指挥，肯定会乱成一团），所以只有使用单例模式，才能保证核心交易服务器独立控制整个流程。</font><br></p>
<p><font size="4" color="red">实现单例模式的思路：</font><br> </p>
<p><font size="4">1.外界不能造对象  –把无参构造方法私有。</font><br> </p>
<p><font size="4">2.类本身要造一个  –调用构造方法即可</font><br> </p>
<p><font size="4">3.通过公共的方式对外提供</font><br> </p>
<p><font size="4">–该方法通过public修饰</font><br> </p>
<p><font size="4">–又由于无参构造私有，所以要用static修饰符修饰该方法</font><br> </p>
<p><font size="4">–为了保证静态方法只能访问静态成员，所以这个对象也要用static修饰</font><br> </p>
<p><font size="4"> 如果这样…     static Student s = new Student();</font><br> </p>
<p><font size="4"> 那么外界可以这样…   Student.s = null使用为null的对象可能出现空指针异常错误</font><br> <font size="4"> –所以要加private修饰该对象</font><br> </p>
<p><font size="4">首先我们写一个简单的单例类：</font><br> </p>
<pre><code>public class Singleton {  

    /* 持有私有静态实例，防止被引用，此处赋值为null，目的是实现延迟加载 */  
    private static Singleton instance = null;  

    /* 私有构造方法，防止被实例化 */  
    private Singleton() {  
    }  

    /* 静态工程方法，创建实例 */  
    public static Singleton getInstance() {  
        if (instance == null) {  
            instance = new Singleton();  
        }  
        return instance;  
    }  

    /* 如果该对象被用于序列化，可以保证对象在序列化前后保持一致 */  
    public Object readResolve() {  
        return instance;  
    }  
}  
</code></pre><p><font size="4">这个类(懒汉式)可以满足基本要求，但是，像这样毫无线程安全保护的类，如果我们把它放入多线程的环境下，肯定就会出现问题了，如何解决？我们首先会想到对getInstance方法加synchronized关键字，如下：</font><br></p>
<pre><code>public static synchronized Singleton getInstance() {  
        if (instance == null) {  
            instance = new Singleton();  
        }  
        return instance;  
    }   
</code></pre><p><font size="4">但是，synchronized关键字锁住的是这个对象，这样的用法，在性能上会有所下降，因为每次调用getInstance()，都要对对象上锁，事实上，只有在第一次创建对象的时候需要加锁，之后就不需要了，所以，这个地方需要改进。我们改成下面这个：</font><br></p>
<pre><code>public static Singleton getInstance() {  
        if (instance == null) {  
            synchronized (instance) {  
                if (instance == null) {  
                    instance = new Singleton();  
                }  
            }  
        }  
        return instance;  
    }  
</code></pre><p><font size="4">似乎解决了之前提到的问题，将synchronized关键字加在了内部，也就是说当调用的时候是不需要加锁的，只有在instance为null，并创建对象的时候才需要加锁，性能有一定的提升。但是，这样的情况，还是有可能有问题的，看下面的情况：在Java指令中创建对象和赋值操作是分开进行的，也就是说instance = new Singleton();语句是分两步执行的。但是JVM并不保证这两个操作的先后顺序，也就是说有可能JVM会为新的Singleton实例分配空间，然后直接赋值给instance成员，然后再去初始化这个Singleton实例。这样就可能出错了，我们以A、B两个线程为例：</font><br></p>
<p><font size="4">①A、B线程同时进入了第一个if判断</font><br> </p>
<p><font size="4">②A首先进入synchronized块，由于instance为null，所以它执行instance = new Singleton();</font><br></p>
<p><font size="4">③由于JVM内部的优化机制，JVM先画出了一些分配给Singleton实例的空白内存，并赋值给instance成员（注意此时JVM没有开始初始化这个实例），然后A离开了synchronized块。</font><br></p>
<p><font size="4">④B进入synchronized块，由于instance此时不是null，因此它马上离开了synchronized块并将结果返回给调用该方法的程序。</font><br></p>
<p><font size="4">⑤此时B线程打算使用Singleton实例，却发现它没有被初始化，于是错误发生了。</font><br></p>
<p><font size="4">所以程序还是有可能发生错误，其实程序在运行过程是很复杂的，从这点我们就可以看出，尤其是在写多线程环境下的程序更有难度，有挑战性。我们对该程序做进一步优化：</font><br> </p>
<pre><code>private static class SingletonFactory{           
        private static Singleton instance = new Singleton();           
    }           
    public static Singleton getInstance(){           
        return SingletonFactory.instance;           
    } 
</code></pre><p><font size="4">实际情况是，单例模式使用内部类来维护单例的实现，JVM内部的机制能够保证当一个类被加载的时候，这个类的加载过程是线程互斥的。这样当我们第一次调用getInstance的时候，JVM能够帮我们保证instance只被创建一次，并且会保证把赋值给instance的内存初始化完毕，这样我们就不用担心上面的问题。同时该方法也只会在第一次调用的时候使用互斥机制，这样就解决了低性能问题。这样我们暂时总结一个完美的单例模式：</font><br> </p>
<pre><code>public class Singleton {  

    /* 私有构造方法，防止被实例化 */  
    private Singleton() {  
    }  

    /* 此处使用一个内部类来维护单例 */  
    private static class SingletonFactory {  
        private static Singleton instance = new Singleton();  
    }  

    /* 获取实例 */  
    public static Singleton getInstance() {  
        return SingletonFactory.instance;  
    }  

    /* 如果该对象被用于序列化，可以保证对象在序列化前后保持一致 */  
    public Object readResolve() {  
        return getInstance();  
    }  
}
</code></pre><p><font size="4">其实说它完美，也不一定，如果在构造函数中抛出异常，实例将永远得不到创建，也会出错。所以说，十分完美的东西是没有的，我们只能根据实际情况，选择最适合自己应用场景的实现方法。也有人这样实现：因为我们只需要在创建类的时候进行同步，所以只要将创建和getInstance()分开，单独为创建加synchronized关键字，也是可以的：</font><br></p>
<pre><code>public class SingletonTest {  

    private static SingletonTest instance = null;  

    private SingletonTest() {  
    }  

    private static synchronized void syncInit() {  
        if (instance == null) {  
            instance = new SingletonTest();  
        }  
    }  

    public static SingletonTest getInstance() {  
        if (instance == null) {  
            syncInit();  
        }  
        return instance;  
    }  
}  
</code></pre><p><font size="4">考虑性能的话，整个程序只需创建一次实例，所以性能也不会有什么影响。</font><br> </p>
<p><font size="4">饿汉式（static final field）另一种较为直接的写法如下：</font><br> </p>
<pre><code>public class Singleton{  
    //类加载时就初始化  
    private static final Singleton instance = new Singleton();  

    private Singleton(){}  

    public static Singleton getInstance(){  
        return instance;  
    }  
}  
</code></pre><p><font size="4">这种方法非常简单，因为单例的实例被声明成 static和 final变量了，在第一次加载类到内存中时就会初始化，所以创建实例本身是线程安全的。缺点是它不是一种懒加载模式（lazy initialization），单例会在加载类后一开始就被初始化，即使客户端没有调用 getInstance()方法。饿汉式的创建方式在一些场景中将无法使用：譬如 Singleton 实例的创建是依赖参数或者配置文件的，在 getInstance()之前必须调用某个方法设置参数给它，那样这种单例写法就无法使用了。</font><br> </p>
<p><font size="4" color="red">懒汉式、饿汉式在spring IOC中的应用：</font><br> <font size="4">在spring IOC中，bean在xml中可以配置为singleton，而且有一个lazy-init属性</font><br> <font size="4">lazy-init=true,设置延迟初始化， 在创建容器之后，在第一次从容器获取对象的时候创建单例的对象</font><br><font size="4">如果没有配置或延迟初始化为默认值, 单例的对象会在创建容器的时候创建对象</font><br></p>
<p><font size="4" color="red">通过单例模式的学习告诉我们：</font><br></p>
<p><font size="4">1、单例模式理解起来简单，但是具体实现起来还是有一定的难度。</font><br></p>
<p><font size="4">2、synchronized关键字锁定的是对象，在用的时候，一定要在恰当的地方使用（注意需要使用锁的对象和过程，可能有的时候并不是整个对象及整个过程都需要锁）。</font><br><strong><font size="4">到这儿，单例模式基本已经讲完了，结尾处，笔者突然想到另一个问题，就是采用类的静态方法，实现单例模式的效果，也是可行的，此处二者有什么不同？</font><br></strong><font size="4">首先，静态类不能实现接口。（从类的角度说是可以的，但是那样就破坏了静态了。因为接口中不允许有static修饰的方法，所以即使实现了也是非静态的）</font><br> <font size="4">其次，单例可以被延迟初始化，静态类一般在第一次加载是初始化。之所以延迟加载，是因为有些类比较庞大，所以延迟加载有助于提升性能。</font><br> <font size="4">再次，单例类可以被继承，他的方法可以被覆写。但是静态类内部方法都是static，无法被覆写。</font><br> <font size="4">最后一点，单例类比较灵活，毕竟从实现上只是一个普通的Java类，只要满足单例的基本需求，你可以在里面随心所欲的实现一些其它功能，但是静态类不行。从上面这些概括中，基本可以看出二者的区别，但是，从另一方面讲，我们上面实现的那个单例模式，内部就是用一个静态类来实现的，所以，二者有很大的关联，只是我们考虑问题的层面不同罢了。两种思想的结合，才能造就出完美的解决方案，就像HashMap采用数组+链表来实现一样，其实生活中很多事情都是这样，单用不同的方法来处理问题，总是有优点也有缺点，最完美的方法是，结合各个方法的优点，才能最好的解决问题！</font><br> </p>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> technology </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式（二）]]></title>
      <url>/2018/04/26/design-patterns2/</url>
      <content type="html"><![CDATA[<p><div align="center" style="display:none"><br><img src="/photo/4-28/3.jpg" height="330" width="495"><br></div><br><strong><font size="5">三、Java的23种设计模式</font></strong><br></p>
<p></p><h1>A、创建模式</h1><hr><p></p>
<p></p><p><font size="4"><br>从这一块开始，我们详细介绍Java中23种设计模式的概念，应用场景等情况，并结合他们的特点及设计模式的原则进行分析。<br>首先，简单工厂模式不属于23种设计模式，简单工厂一般分为：普通简单工厂、多方法简单工厂、静态方法简单工厂。<br></font><br></p><p></p>
<p></p><h2>0、简单工厂模式</h2><font size="4">简单工厂模式分为三种：</font><br><strong><em><h3>I.普通简单工厂模式</h3></em></strong><font size="4">就是建立一个工厂类，对实现了同一接口的一些类进行实例的创建。首先看关系图：</font><br><br><img src="/photo/4-26/1.png" alt="alt text"><br><p></p>
<p><font size="4">举例如下：（我们举一个发送邮件和短信的例子,可以考虑生产鼠标等，包括dell、hp）</font></p>
<p><font size="4">首先，创建二者的共同接口：</font><br></p>
<pre><code>public interface Sender {  
    public void Send();  
}  
</code></pre><p><font size="4">其次，创建实现类：</font><br></p>
<pre><code>public class MailSender implements Sender {  
    @Override  
    public void Send() {  
        System.out.println(&quot;this is mailsender!&quot;);  
    }  
}

public class SmsSender implements Sender {  
    @Override  
    public void Send() {  
        System.out.println(&quot;this is sms sender!&quot;);  
    }  
} 
</code></pre><p><font size="4">最后，建工厂类：</font><br> </p>
<pre><code>public class SendFactory {  

    public Sender produce(String type) {  
        if (&quot;mail&quot;.equals(type)) {  
            return new MailSender();  
        } else if (&quot;sms&quot;.equals(type)) {  
            return new SmsSender();  
        } else {  
            System.out.println(&quot;请输入正确的类型!&quot;);  
            return null;  
        }  
    }  
}
</code></pre><p><font size="4">我们来测试下：</font><br> </p>
<pre><code>public class FactoryTest {  

    public static void main(String[] args) {  
        SendFactory factory = new SendFactory();  
        Sender sender = factory.produce(&quot;sms&quot;);  
        sender.Send();  
    }  
}
</code></pre><p><font size="4">输出：this is sms sender!</font><br><br><strong><em><h3>II.多方法简单工厂模式（多方法）</h3></em></strong><font size="4">是对普通工厂方法模式的改进，在普通工厂方法模式中，如果传递的字符串出错，则不能正确创建对象，而多个工厂方法模式是提供多个工厂方法，分别创建对象。关系图：</font><br><br><img src="/photo/4-26/2.jpg" alt="alt text"><br></p>
<p><font size="4">将上面的代码做下修改，改动下SendFactory类就行，如下：</font><br> </p>
<pre><code>public class SendFactory {  

    public Sender produceMail(){  
        return new MailSender();  
    }  

    public Sender produceSms(){  
        return new SmsSender();  
    }  
} 
</code></pre><p><font size="4">测试类如下：</font><br>  </p>
<pre><code>public class FactoryTest {  

    public static void main(String[] args) {  
        SendFactory factory = new SendFactory();  
        Sender sender = factory.produceMail();  
        sender.Send();  
    }  
} 
</code></pre><p><font size="4">输出：this is mailsender!</font><br><br><strong><em><h3>III.静态方法简单工厂模式（多个静态方法）</h3></em></strong>  <font size="4">将上面的多个工厂方法模式里的方法置为静态的，不需要创建实例，直接调用即可。</font><br></p>
<pre><code>public class SendFactory {  

    public static Sender produceMail(){  
        return new MailSender();  
    }  

    public static Sender produceSms(){  
        return new SmsSender();  
    }  
}  
public class FactoryTest {  

    public static void main(String[] args) {      
        Sender sender = SendFactory.produceMail();  
        sender.Send();  
    }  
}  
</code></pre><p><font size="4">输出：this is mailsender!</font><br></p>
<p><font size="4">总体来说，工厂模式适合：凡是出现了大量的产品需要创建，并且具有共同的接口时，可以通过工厂方法模式进行创建。在以上的三种模式中，第一种如果传入的字符串有误，不能正确创建对象，第三种相对于第二种，不需要实例化工厂类，所以，大多数情况下，我们会选用第三种——静态工厂方法模式。</font><br></p><h2>1、工厂方法模式（Factory Method）</h2><p></p>
<p><font size="4">简单工厂模式有一个问题就是，类的创建依赖工厂类，也就是说，如果想要拓展程序，必须对工厂类进行修改，这违背了闭包原则，所以，从设计角度考虑，有一定的问题，如何解决？就用到工厂方法模式，创建多个工厂类，这样一旦需要增加新的功能，直接增加新的工厂类就可以了，不需要修改之前的代码。因为工厂方法不太好理解，我们先看看图，然后就和代码，就比较容易理解。</font><br><br><img src="/photo/4-26/3.jpg" alt="alt text"><br></p>
<p><font size="4">请看例子：</font><br></p>
<pre><code>public interface Sender {  
    public void Send();  
}  
</code></pre><p><font size="4">两个实现类：</font><br></p>
<pre><code>public class MailSender implements Sender {  
    @Override  
    public void Send() {  
        System.out.println(&quot;this is mailsender!&quot;);  
    }  
} 
public class SmsSender implements Sender {  

    @Override  
    public void Send() {  
        System.out.println(&quot;this is sms sender!&quot;);  
    }  
} 
</code></pre><p><font size="4">两个工厂类：</font><br></p>
<pre><code>public class SendMailFactory implements Provider {  

    @Override  
    public Sender produce(){  
        return new MailSender();  
    }  
} 
public class SendSmsFactory implements Provider{  

    @Override  
    public Sender produce() {  
        return new SmsSender();  
    }  
}  
</code></pre><p><font size="4">再提供一个接口：</font><br></p>
<pre><code>public interface Provider {  
    public Sender produce();  
} 
</code></pre><p><font size="4">测试类：</font><br></p>
<pre><code>public class Test {  

    public static void main(String[] args) {  
        Provider provider = new SendMailFactory();  
        Sender sender = provider.produce();  
        sender.Send();  
    }  
}
</code></pre><p><font size="4">其实这个模式的好处就是，如果你现在想增加一个功能：发及时信息，则只需做一个实现类，实现Sender接口，同时做一个工厂类，实现Provider接口，就OK了，无需去改动现成的代码。这样做，拓展性较好！</font><br></p><h2>2、抽象工厂模式（Abstract Factory）</h2><font size="4">工厂方法模式和抽象工厂模式不好分清楚，可以参照<a href="http://ichennan.com/2016/08/09/DesignPattern.html" target="_blank" rel="noopener">三者间比较</a>。他们的区别如下：</font><br><br><strong><font size="4">工厂方法模式：</font></strong><br><font size="4">一个抽象产品类，可以派生出多个具体产品类。</font><br><font size="4">一个抽象工厂类，可以派生出多个具体工厂类。</font><br><font size="4">每个具体工厂类只能创建一个具体产品类的实例。</font><br><br><strong><font size="4">抽象工厂模式：</font></strong><br><font size="4">多个抽象产品类，每个抽象产品类可以派生出多个具体产品类。</font><br><font size="4">一个抽象工厂类，可以派生出多个具体工厂类。</font><br><font size="4">每个具体工厂类可以创建多个具体产品类的实例，也就是创建的是一个产品线下的多个产品。</font><br><br><strong><font size="4">区别：</font></strong><br><p></p>
<p><font size="4">工厂方法模式只有一个抽象产品类，而抽象工厂模式有多个。</font><br><font size="4">工厂方法模式的具体工厂类只能创建一个具体产品类的实例，而抽象工厂模式可以创建多个。</font><br><font size="4">工厂方法创建 “一种” 产品，他的着重点在于”怎么创建”，也就是说如果你开发，你的大量代码很可能围绕着这种产品的构造，初始化这些细节上面。也因为如此，类似的产品之间有很多可以复用的特征，所以会和模版方法相随。</font><br><font size="4">抽象工厂需要创建一些列产品，着重点在于”创建哪些”产品上，也就是说，如果你开发，你的主要任务是划分不同差异的产品线，并且尽量保持每条产品线接口一致，从而可以从同一个抽象工厂继承。</font><br><br><strong><font size="4">对于java来说，你能见到的大部分抽象工厂模式都是这样的：</font></strong><br></p>
<p><font size="4">—它的里面是一堆工厂方法，每个工厂方法返回某种类型的对象。</font><br></p>
<p><font size="4">比如说工厂可以生产鼠标和键盘。那么抽象工厂的实现类（它的某个具体子类）的对象都可以生产鼠标和键盘，但可能工厂A生产的是罗技的键盘和鼠标，工厂B是微软的。</font><br></p>
<p><font size="4">这样A和B就是工厂，对应于抽象工厂；<br>每个工厂生产的鼠标和键盘就是产品，对应于工厂方法；</font><br></p>
<p><font size="4">用了工厂方法模式，你替换生成键盘的工厂方法，就可以把键盘从罗技换到微软。但是用了抽象工厂模式，你只要换家工厂，就可以同时替换鼠标和键盘一套。如果你要的产品有几十个，当然用抽象工厂模式一次替换全部最方便（这个工厂会替你用相应的工厂方法）</font><br></p>
<p><font size="4">所以说抽象工厂就像工厂，而工厂方法则像是工厂的一种产品生产线。</font><br></p>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> technology </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式（一）]]></title>
      <url>/2018/04/26/design-patternsmd/</url>
      <content type="html"><![CDATA[<div align="center" style="display:none"><br><img src="/photo/design.jpg" height="330" width="495"><br></div>

<p><strong><font size="5">一、设计模式的分类</font></strong><br></p>
<p><font size="4">总体来说设计模式分为三大类：</font><br></p>
<p><font size="4" color="red">创建型模式（5种）：</font><font size="4">工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。</font><br><font size="4" color="red">结构型模式（7种）：</font><font size="4">适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。</font><br><font size="4" color="red">行为型模式（11种）：</font><font size="4">策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。<br></font><br></p>
<p><font size="4"> 其实还有两类：并发模式和线程池模式。用如下图来整体描述：</font><br><br><img src="/photo/picture.jpg" alt="alt text"><br><br><strong><font size="5">二、设计模式的六大原则</font></strong><br></p>
<p><font size="4" color="red">总原则：开闭原则（Open Close Principle）</font><br></p>
<p><font size="4"><br>开闭原则就是说<strong>对扩展开放，对修改关闭</strong>。在程序需要进行拓展的时候，不能去修改原有的代码，而是要扩展原有代码，实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类等，后面的具体设计中我们会提到这点。<br></font><br></p>
<p><font size="4" color="red">1、单一职责原则</font><br></p>
<p><font size="4"><br>不要存在多于一个导致类变更的原因，也就是说每个类应该实现单一的职责，如若不然，就应该把类拆分。<br></font><br></p>
<p><font size="4" color="red">2、里氏替换原则（Liskov Substitution Principle）</font><br></p>
<p><font size="4"><br>里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。 LSP是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。—— From Baidu 百科</font></p>
<p><font size="4"> 里氏替换原则中，子类对父类的方法尽量不要重写和重载。因为父类代表了定义好的结构，通过这个规范的接口与外界交互，子类不应该随便破坏它。<br></font><br></p>
<p><font size="4" color="red">3、依赖倒转原则（Dependence Inversion Principle）</font><br></p>
<p><font size="4"><br>这个是开闭原则的基础，具体内容：面向接口编程，依赖于抽象而不依赖于具体。写代码时用到具体类时，不与具体类交互，而与具体类的上层接口交互。<br></font><br></p>
<p><font size="4" color="red">4、接口隔离原则（Interface Segregation Principle）</font><br></p>
<p><font size="4"><br>这个原则的意思是：每个接口中不存在子类用不到却必须实现的方法，如果不然，就要将接口拆分。使用多个隔离的接口，比使用单个接口（多个接口方法集合到一个的接口）要好。<br></font><br></p>
<p><font size="4" color="red">5、迪米特法则（最少知道原则）（Demeter Principle）</font><br></p>
<p><font size="4"><br>就是说：一个类对自己依赖的类知道的越少越好。也就是说无论被依赖的类多么复杂，都应该将逻辑封装在方法的内部，通过public方法提供给外部。这样当被依赖的类变化时，才能最小的影响该类。</font></p>
<p>最少知道原则的另一个表达方式是：只与直接的朋友通信。类之间只要有耦合关系，就叫朋友关系。耦合分为依赖、关联、聚合、组合等。我们称出现为成员变量、方法参数、方法返回值中的类为直接朋友。局部变量、临时变量则不是直接的朋友。我们要求陌生的类不要作为局部变量出现在类中。<br><br></p>
<p><font size="4" color="red">6、合成复用原则（Composite Reuse Principle）</font><br></p>
<p><font size="4"><br>原则是尽量首先使用合成/聚合的方式，而不是使用继承。<br></font><br></p>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> technology </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[死锁]]></title>
      <url>/2018/04/15/%E6%AD%BB%E9%94%81/</url>
      <content type="html"><![CDATA[<div align="center" style="display:none"><br><img src="/photo/back.jpg" height="330" width="495"><br></div>


<font size="4"><br><strong>死锁：</strong>是指两个或两个以上的进程在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去。<br><br>（1）因为系统资源不足<br><br>（2）进程运行推进顺序不合适<br><br>（3）资源分配不当等<br><br>如果系统资源充足，进程的资源请求都能够得到满足，死锁出现的可能性就很低，否则就会因争夺有限的资源而陷入死锁。其次，进程运行推进顺序与速度不同，也可能产生死锁。<br><br><strong><font size="4" color="red">死锁的4个必要条件：</font></strong><br>（1） 互斥：一个资源每次只能被一个进程使用。<br><br>（2） 请求与保持：一个进程因请求资源而阻塞时，对已获得的资源保持不放。<br><br>（3） 不剥夺： 进程已获得的资源，在未使用完之前，不能强行剥夺。<br><br>（4） 循环等待： 若干进程之间形成一种头尾相连的循环等待资源关系。<br><br>这四个条件是死锁的必要条件，只要系统发生死锁，这些条件必然成立，而只要上述条件之一不满足，就不会发生死锁。<br></font>
]]></content>
      
        
        <tags>
            
            <tag> operating system </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[归并排序]]></title>
      <url>/2018/04/15/hello-world/</url>
      <content type="html"><![CDATA[<p><div align="center" style="display:none"><br><img src="/photo/1.png" height="330" width="495"><br></div><br>思想：分治思想</p>
<p>时间复杂度：O(nlgn)</p>
<p>稳定性：稳定</p>
<p>归并过程：<br><img src="/photo/merge.jpg" alt="alt text"></p>
<p>代码如下：</p>
<pre><code>public class MergeSort {

    public static void merge(int[] a, int low, int mid, int high) {
        int[] temp = new int[high - low + 1];
        int i = low;// 左指针
        int j = mid + 1;// 右指针
        int k = 0;
        // 把较小的数先移到新数组中
        while (i &lt;= mid &amp;&amp; j &lt;= high) {
            if (a[i] &lt; a[j]) {
                temp[k++] = a[i++];
            } else {
                temp[k++] = a[j++];
            }
        }
        // 把左边剩余的数移入数组
        while (i &lt;= mid) {
            temp[k++] = a[i++];
        }
        // 把右边边剩余的数移入数组
        while (j &lt;= high) {
            temp[k++] = a[j++];
        }
        // 把新数组中的数覆盖nums数组
        for (int k2 = 0; k2 &lt; temp.length; k2++) {
            a[k2 + low] = temp[k2];
        }
    }

    public static void mergeSort(int[] a, int low, int high) {
        int mid = (low + high) / 2;
        if (low &lt; high) {
            // 左边
            mergeSort(a, low, mid);
            // 右边
            mergeSort(a, mid + 1, high);
            // 左右归并
            merge(a, low, mid, high);
            System.out.println(Arrays.toString(a));
        }

    }

    public static void main(String[] args) {
        int a[] = { 51, 46, 20, 18, 65, 97, 82, 30, 77, 50 };
        mergeSort(a, 0, a.length - 1);
        System.out.println(&quot;排序结果：&quot; + Arrays.toString(a));
    }
}
</code></pre>]]></content>
      
        <categories>
            
            <category> 代码 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[大数相乘]]></title>
      <url>/2018/04/15/article-title/</url>
      <content type="html"><![CDATA[<p><div align="center" style="display:none"><br><img src="/photo/4.JPG" height="250" width="495"><br></div><br><strong>代码如下：</strong><br></p>
<pre><code>public class Mutiply {

    public static void main(String[] args){

        String str1 = &quot;7832974972840919321747983209327&quot;;
        String str2 = &quot;1987432091904327543957&quot;;
        System.out.println(multiply(str1,str2));

    }
    public static String multiply(String num1,String num2){

        int len1 = num1.length();
        int len2 = num2.length();
        //结果最大长度len1+len2,最小为len1+len2-1
        int[] num = new int[len1+len2]; //数组默认初始化均为0
        for(int i=0;i&lt;len2;i++){

            int n1 = num2.charAt(len2-1-i)-&apos;0&apos;;
            int tmp = 0; //表示进位
            for(int j=0;j&lt;len1;j++){
                int n2 = num1.charAt(len1-1-j)-&apos;0&apos;;
                tmp = tmp + num[i+j] + n1*n2;
                num[i+j] = tmp%10;
                tmp = tmp/10;
            }
            num[len1+i] = tmp; //下面的数与上面最高位相乘得到的那个进位

        }
        //现在数组中存的是从个位开始到高位，所以需要倒过来
        //先找到数组中从后面开始不为0的数，该数为最高位。
        int i = len1+len2-1;
        while(i&gt;=0 &amp;&amp; num[i]==0){
            i--;
        }
        String result = &quot;&quot;;
        while(i&gt;=0){
            result+=num[i--];
        }
        return result;
    }
}
</code></pre>]]></content>
      
        <categories>
            
            <category> 代码 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> programming </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[多线程编程优点]]></title>
      <url>/2018/01/04/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E5%A5%BD%E5%A4%84/</url>
      <content type="html"><![CDATA[<div align="center" style="display:none"><br><img src="/photo/3.JPG" height="330" width="495"><br></div>

<font size="4" color="red">线程：</font><font size="4">一种CPU利用的基本单元，它是形成多线程计算机的基础。线程是CPU使用的基本单元。</font><br><br><font size="4" color="red">进程：</font><font size="4">可看做是正在执行的程序。进程需要一定的资源（CPU时间、内存、文件和I/O设备）来完成其任务。</font><br><br><font size="4" color="red">【注】：</font><font size="4">进程是CPU分配资源的基本单位，线程是CPU调度的基本单位。</font>

<p><strong><font size="4" color="red"><br>多线程编程具有如下4个优点：<br></font></strong></p>
<p><strong><font size="4" color="red">①响应度高：</font></strong><font size="4">如果对一个交互程序采用多线程，那么即使其部分阻塞或执行比较冗长的操作，该程序仍能继续执行，从而增加了对用户的响应程度。例如：多线程web浏览器在用一个线程装入图像时，能通过另一个线程与用户交互。<br></font><br></p>
<p><strong><font size="4" color="red">②资源共享：</font></strong><font size="4">线程默认共享它们所属进程的内存和资源。代码和数据共享的优点是它能允许一个应用程序在同一地址空间有多个不同的活动线程。<br></font><br></p>
<p><strong><font size="4" color="red">③经济：</font></strong><font size="4">进程创建所需要的内存和资源的分配比价昂贵，由于线程能共享它们所属进程的资源，所以创建和切换线程会更加经济。实际地测量进程创建和管理与线程创建和管理的差别较为困难，但是前者通常要比后者花费更多时间。例如：对于Solaris，进程创建要比线程创建慢30倍，而进程切换要比线程切换慢5倍。<br></font><br></p>
<p><strong><font size="4" color="red">④多处理器体系结构的利用：</font></strong><font size="4">多线程的优点之一是能充分使用多处理器体系结构，以便每个进程能并行运行在不同的处理器上。不管有多少cpu，单线程进程只能运行在一个cpu上。在多cpu上使用多线程加强了并发功能。<br></font></p>
]]></content>
      
        <categories>
            
            <category> 线程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> operating system </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
