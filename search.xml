<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[java泛型内部原理]]></title>
      <url>/2018/05/01/genericity/</url>
      <content type="html"><![CDATA[<p><div align="center" style="display:none"><br><img src="/photo/5-1/2.jpg" height="330" width="495"><br></div></p>
<p></p><h1>java泛型的内部原理：类型擦除以及类型擦除带来的问题</h1><hr><p></p>
<p></p><h2>一、Java泛型的实现方法：类型擦除</h2><p></p>
<p><font size="4">Java的泛型是伪泛型。为什么说Java的泛型是伪泛型呢？因为，在编译期间，所有的泛型信息都会被擦除掉。<strong>正确理解泛型概念的首要前提是理解类型擦出（type erasure）</strong>。</font><br><br><strong><font size="4">Java中的泛型基本上都是在编译器这个层次来实现的。在生成的Java字节码中是不包含泛型中的类型信息的。使用泛型的时候加上的类型参数，会在编译器在编译的时候去掉。这个过程就称为类型擦除。</font><br></strong></p>
<p><font size="4">如在代码中定义的List&lt;<strong>Object</strong>&gt;和List&lt;<strong>String</strong>&gt;等类型，在编译后都会编程List。JVM看到的只是List，而由泛型附加的类型信息对JVM来说是不可见的。Java编译器会在编译时尽可能的发现可能出错的地方，但是仍然无法避免在运行时刻出现类型转换异常的情况。类型擦除也是Java的泛型实现方法与C++模版机制实现方式之间的重要区别。</font><br>  </p>
<p><font size="4">可以通过两个简单的例子，来证明java泛型的类型擦除。</font><br> </p>
<p><font size="4">例1、</font><br> </p>
<pre><code>public class Test {  
    public static void main(String[] args) {  
        ArrayList&lt;String&gt; arrayList1=new ArrayList&lt;String&gt;();  
        arrayList1.add(&quot;abc&quot;);  
        ArrayList&lt;Integer&gt; arrayList2=new ArrayList&lt;Integer&gt;();  
        arrayList2.add(123);  
        System.out.println(arrayList1.getClass()==arrayList2.getClass());  
    }  
}
</code></pre><p><font size="4">在这个例子中，我们定义了两个ArrayList数组，不过一个是ArrayList<string>泛型类型，只能存储字符串。一个是ArrayList<integer>泛型类型，只能存储整形。最后，我们通过arrayList1对象和arrayList2对象的getClass方法获取它们的类的信息，最后发现结果为true。说明泛型类型String和Integer都被擦除掉了，只剩下了<font color="red">原始类型。</font></integer></string></font><br> </p>
<p><font size="4">例2、</font><br> </p>
<pre><code>public class Test {  
    public static void main(String[] args) throws IllegalArgumentException, SecurityException, IllegalAccessException, InvocationTargetException, NoSuchMethodException {  
        ArrayList&lt;Integer&gt; arrayList3=new ArrayList&lt;Integer&gt;();  
        arrayList3.add(1);//这样调用add方法只能存储整形，因为泛型类型的实例为Integer  
        arrayList3.getClass().getMethod(&quot;add&quot;, Object.class).invoke(arrayList3, &quot;asd&quot;);  
        for (int i=0;i&lt;arrayList3.size();i++) {  
            System.out.println(arrayList3.get(i));  
        }  
    }  
</code></pre><p><font size="4">在程序中定义了一个ArrayList泛型类型实例化为Integer的对象，如果直接调用add方法，那么只能存储整形的数据。不过当我们利用反射调用add方法的时候，却可以存储字符串。这说明了Integer泛型实例在编译之后被擦除了，只保留了<font color="red">原始类型。</font></font><br> </p>
<p></p><h2>二、类型擦除后保留的原始类型</h2><p></p>
<p><font size="4">在上面，两次提到了原始类型，什么是原始类型？原始类型（raw type）就是擦除去了泛型信息，最后在字节码中的类型变量的真正类型。无论何时定义一个泛型类型，相应的原始类型都会被自动地提供。类型变量被擦除（crased），并使用其限定类型（无限定的变量用Object）替换。</font><br> </p>
<p><font size="4">例3：</font><br> </p>
<pre><code>class Pair&lt;T&gt; {  
    private T value;  
    public T getValue() {  
        return value;  
    }  
    public void setValue(T  value) {  
        this.value = value;  
    }  
}
</code></pre><p><font size="4">Pair<t>的原始类型为：</t></font><br> </p>
<pre><code>class Pair {  
    private Object value;  
    public Object getValue() {  
        return value;  
    }  
    public void setValue(Object  value) {  
        this.value = value;  
    }  
} 
</code></pre><p><font size="4">因为在Pair&lt;<strong>T</strong>&gt;中，T是一个无限定的类型变量，所以用Object替换。其结果就是一个普通的类，如同泛型加入java变成语言之前已经实现的那样。在程序中可以包含不同类型的Pair，如Pair&lt;<strong>String</strong>&gt;或Pair&lt;<strong>Integer</strong>&gt;，但是，擦除类型后它们就成为原始的Pair类型了，原始类型都是Object。</font><br> </p>
<p><font size="4">从上面的那个例2中，我们也可以明白ArrayList&lt;<strong>Integer</strong>&gt;被擦除类型后，原始类型也变成了Object，所以通过反射我们就可以存储字符串了。</font><br> </p>
<p><font size="4">如果类型变量有限定，那么原始类型就用第一个边界的类型变量来替换。比如Pair这样声明</font><br> </p>
<p><font size="4">例4：</font><br> </p>
<pre><code>public class Pair&lt;T extends Comparable&amp; Serializable&gt; { 
</code></pre><p><font size="4">注意：</font><br> </p>
<p><font size="4">如果Pair这样声明public class Pair<t extends="" serializable&comparable=""> ，那么原始类型就用Serializable替换，而编译器在必要的时要向Comparable插入强制类型转换。为了提高效率，应该将标签（tagging）接口（即没有方法的接口）放在边界限定列表的末尾。</t></font><br> </p>
<p><font size="4"><strong>要区分原始类型和泛型变量的类型</strong></font><br> </p>
<p><font size="4">在调用泛型方法的时候，可以指定泛型，也可以不指定泛型。</font><br> </p>
<p><font size="4">在不指定泛型的情况下，泛型变量的类型为 该方法中的几种类型的同一个父类的最小级，直到Object。</font><br> </p>
<p><font size="4">在指定泛型的时候，该方法中的几种类型必须是该泛型实例类型或者其子类。</font><br> </p>
<pre><code>public class Test{  
    public static void main(String[] args) {  
        /**不指定泛型的时候*/  
        int i=Test2.add(1, 2); //这两个参数都是Integer，所以T为Integer类型  
        Number f=Test2.add(1, 1.2);//这两个参数一个是Integer，以风格是Float，所以取同一父类的最小级，为Number  
        Object o=Test2.add(1, &quot;asd&quot;);//这两个参数一个是Integer，以风格是Float，所以取同一父类的最小级，为Object  

                /**指定泛型的时候*/  
        int a=Test2.&lt;Integer&gt;add(1, 2);//指定了Integer，所以只能为Integer类型或者其子类  
        int b=Test2.&lt;Integer&gt;add(1, 2.2);//编译错误，指定了Integer，不能为Float  
        Number c=Test2.&lt;Number&gt;add(1, 2.2); //指定为Number，所以可以为Integer和Float  
    }  

    //这是一个简单的泛型方法  
    public static &lt;T&gt; T add(T x,T y){  
        return y;  
    }  
} 
</code></pre><p><font size="4">其实在泛型类中，不指定泛型的时候，也差不多，只不过这个时候的泛型类型为Object，就比如ArrayList中，如果不指定泛型，那么这个ArrayList中可以放任意类型的对象。</font><br> </p>
<p><font size="4">举例：</font><br> </p>
<pre><code>public static void main(String[] args) {  
        ArrayList arrayList=new ArrayList();  
        arrayList.add(1);  
        arrayList.add(&quot;121&quot;);  
        arrayList.add(new Date());  
    }  
</code></pre><p></p><h2>三、类型擦除引起的问题及解决方法</h2><p></p>
<p><font size="4">因为种种原因，Java不能实现真正的泛型，只能使用类型擦除来实现伪泛型，这样虽然不会有类型膨胀的问题，但是也引起了许多新的问题。所以，Sun对这些问题作出了许多限制，避免我们犯各种错误。</font><br> </p>
<p><font size="4"><strong>1、先检查，在编译，以及检查编译的对象和引用传递的问题</strong></font><br> </p>
<p><font size="4">既然说类型变量会在编译的时候擦除掉，那为什么我们往ArrayList<string> arrayList=new ArrayList<string>();所创建的数组列表arrayList中，不能使用add方法添加整形呢？不是说泛型变量Integer会在编译时候擦除变为原始类型Object吗，为什么不能存别的类型呢？既然类型擦除了，如何保证我们只能使用泛型变量限定的类型呢？</string></string></font><br> </p>
<p><font size="4">java是如何解决这个问题的呢？java编译器是通过先检查代码中泛型的类型，然后再进行类型擦除，在进行编译的。</font><br> </p>
<p><font size="4">举个例子说明：</font><br> </p>
<pre><code>public static  void main(String[] args) {  
        ArrayList&lt;String&gt; arrayList=new ArrayList&lt;String&gt;();  
        arrayList.add(&quot;123&quot;);  
        arrayList.add(123);//编译错误  
    } 
</code></pre><p><font size="4">在上面的程序中，使用add方法添加一个整形，在eclipse中，直接就会报错，说明这就是在编译之前的检查。因为如果是在编译之后检查，类型擦除后，原始类型为Object，是应该运行任意引用类型的添加的。可实际上却不是这样，这恰恰说明了关于泛型变量的使用，是会在编译之前检查的。</font><br> </p>
<p><font size="4">那么，这么类型检查是针对谁的呢？我们先看看<strong>参数化类型与原始类型的兼容</strong></font><br> </p>
<p><font size="4">以ArrayList举例子，以前的写法：</font><br> </p>
<pre><code>ArrayList arrayList=new ArrayList(); 
</code></pre><p><font size="4">现在的写法：</font><br> </p>
<pre><code>ArrayList&lt;String&gt;  arrayList=new ArrayList&lt;String&gt;();  
</code></pre><p><font size="4">如果是与以前的代码兼容，各种引用传值之间，必然会出现如下的情况：</font><br> </p>
<pre><code>ArrayList&lt;String&gt; arrayList1=new ArrayList(); //第一种 情况  
ArrayList arrayList2=new ArrayList&lt;String&gt;();//第二种 情况  
</code></pre><p><font size="4">这样是没有错误的，不过会有个编译时警告。</font><br> </p>
<p><font size="4">不过在第一种情况，可以实现与 完全使用泛型参数一样的效果，第二种则完全没效果。</font><br> </p>
<p><font size="4">因为，本来类型检查就是编译时完成的。new ArrayList()只是在内存中开辟一个存储空间，可以存储任何的类型对象。而真正涉及类型检查的是它的引用，因为我们是使用它引用arrayList1 来调用它的方法，比如说调用add()方法。所以arrayList1引用能完成泛型类型的检查。</font><br> </p>
<p><font size="4">而引用arrayList2没有使用泛型，所以不行。</font><br> </p>
<p><font size="4">举例子：</font><br> </p>
<pre><code>public class Test {  
    public static void main(String[] args) {  

        //  
        ArrayList&lt;String&gt; arrayList1=new ArrayList();  
        arrayList1.add(&quot;1&quot;);//编译通过  
        arrayList1.add(1);//编译错误  
        String str1=arrayList1.get(0);//返回类型就是String  

        ArrayList arrayList2=new ArrayList&lt;String&gt;();  
        arrayList2.add(&quot;1&quot;);//编译通过  
        arrayList2.add(1);//编译通过  
        Object object=arrayList2.get(0);//返回类型就是Object  

        new ArrayList&lt;String&gt;().add(&quot;11&quot;);//编译通过  
        new ArrayList&lt;String&gt;().add(22);//编译错误  
        String string=new ArrayList&lt;String&gt;().get(0);//返回类型就是String  
    }  
}
</code></pre><p><font size="4">通过上面的例子，我们可以明白，类型检查就是针对引用的，谁是一个引用，用这个引用调用泛型方法，就会对这个引用调用的方法进行类型检测，而无关它真正引用的对象。</font><br> </p>
<p><font size="4"><strong>从这里，我们可以再讨论下 泛型中参数化类型为什么不考虑继承关系</strong></font><br> </p>
<p><font size="4">在Java中，像下面形式的引用传递是不允许的：</font><br> </p>
<pre><code>ArrayList&lt;String&gt; arrayList1=new ArrayList&lt;Object&gt;();//编译错误  
ArrayList&lt;Object&gt; arrayList1=new ArrayList&lt;String&gt;();//编译错误 
</code></pre><p><font size="4">我们先看第一种情况，将第一种情况拓展成下面的形式：</font><br> </p>
<pre><code>ArrayList&lt;Object&gt; arrayList1=new ArrayList&lt;Object&gt;();  
          arrayList1.add(new Object());  
          arrayList1.add(new Object());  
          ArrayList&lt;String&gt; arrayList2=arrayList1;//编译错误  
</code></pre><p><font size="4">实际上，在第4行代码的时候，就会有编译错误。那么，我们先假设它编译没错。那么当我们使用arrayList2引用用get()方法取值的时候，返回的都是String类型的对象（上面提到了，类型检测是根据引用来决定的。），可是它里面实际上已经被我们存放了Object类型的对象，这样，就会有ClassCastException了。所以为了避免这种极易出现的错误，Java不允许进行这样的引用传递。（这也是泛型出现的原因，就是为了解决类型转换的问题，我们不能违背它的初衷）。</font><br> </p>
<p><font size="4">在看第二种情况，将第二种情况拓展成下面的形式：</font><br> </p>
<pre><code>ArrayList&lt;String&gt; arrayList1=new ArrayList&lt;String&gt;();  
          arrayList1.add(new String());  
          arrayList1.add(new String());  
          ArrayList&lt;Object&gt; arrayList2=arrayList1;//编译错误  
</code></pre><p><font size="4">没错，这样的情况比第一种情况好的多，最起码，在我们用arrayList2取值的时候不会出现ClassCastException，因为是从String转换为Object。可是，这样做有什么意义呢，泛型出现的原因，就是为了解决类型转换的问题。我们使用了泛型，到头来，还是要自己强转，违背了泛型设计的初衷。所以java不允许这么干。再说，你如果又用arrayList2往里面add()新的对象，那么到时候取得时候，我怎么知道我取出来的到底是String类型的，还是Object类型的呢？</font><br> </p>
<p><font size="4" color="red">所以，要格外注意，泛型中的引用传递的问题。</font><br> </p>
<p><font size="4"><strong>2、自动类型转换</strong></font><br></p>
<p><font size="4">因为类型擦除的问题，所以所有的泛型类型变量最后都会被替换为原始类型。这样就引起了一个问题，既然都被替换为原始类型，那么为什么我们在获取的时候，不需要进行强制类型转换呢？看下ArrayList和get方法：</font><br> </p>
<pre><code>public E get(int index) {  
    RangeCheck(index);  
    return (E) elementData[index];  
    }
</code></pre><p><font size="4">看以看到，在return之前，会根据泛型变量进行强转。假设泛型类型变量为Date，虽然泛型信息会被擦除掉，但是会将(E) elementData[index]，编译为(Date)elementData[index]。所以我们不用自己进行强转。</font><br> </p>
<p><font size="4">当存取一个泛型域时也会自动插入强制类型转换。假设Pair类的value域是public的，那么，表达式：</font><br> </p>
<pre><code>Date date=pair.value 
</code></pre><p><font size="4">也会自动地在结果字节码中插入强制类型转换。</font><br> </p>
<p><font size="4"><strong>3、类型擦除与多态的冲突和解决方法</strong></font><br></p>
<p><font size="4">现在有这样一个泛型类：</font><br> </p>
<pre><code>class Pair&lt;T&gt; {  
    private T value;  
    public T getValue() {  
        return value;  
    }  
    public void setValue(T value) {  
        this.value = value;  
    }  
}  
</code></pre><p><font size="4">然后我们想要一个子类继承它</font><br> </p>
<pre><code>class DateInter extends Pair&lt;Date&gt; {  
    @Override  
    public void setValue(Date value) {  
        super.setValue(value);  
    }  
    @Override  
    public Date getValue() {  
        return super.getValue();  
    }  
}
</code></pre><p><font size="4">在这个子类中，我们设定父类的泛型类型为Pair<date>，在子类中，我们覆盖了父类的两个方法，我们的原意是这样的：<br>将父类的泛型类型限定为Date，那么父类里面的两个方法的参数都为Date类型：</date></font><br> </p>
<pre><code>public Date getValue() {  
    return value;  
}  
public void setValue(Date value) {  
    this.value = value;  
}
</code></pre><p><font size="4">所以，我们在子类中重写这两个方法一点问题也没有，实际上，从他们的@Override标签中也可以看到，一点问题也没有，实际上是这样的吗？</font><br> </p>
<p><font size="4" color="red">分析：</font><br> </p>
<p><font size="4">实际上，类型擦除后，父类的的泛型类型全部变为了原始类型Object，所以父类编译之后会变成下面的样子：</font><br> </p>
<pre><code>class Pair {  
    private Object value;  
    public Object getValue() {  
        return value;  
    }  
    public void setValue(Object  value) {  
        this.value = value;  
    }  
}
</code></pre><p><font size="4">再看子类的两个重写的方法的类型：</font><br> </p>
<pre><code>@Override  
public void setValue(Date value) {  
    super.setValue(value);  
}  
@Override  
public Date getValue() {  
    return super.getValue();  
}
</code></pre><p><font size="4">先来分析setValue方法，父类的类型是Object，而子类的类型是Date，参数类型不一样，这如果实在普通的继承关系中，根本就不会是重写，而是重载。</font><br> </p>
<p><font size="4">我们在一个main方法测试一下：</font><br> </p>
<pre><code>public static void main(String[] args) throws ClassNotFoundException {  
        DateInter dateInter=new DateInter();  
        dateInter.setValue(new Date());                  
                dateInter.setValue(new Object());//编译错误  
 } 
</code></pre><p><font size="4">如果是重载，那么子类中两个setValue方法，一个是参数Object类型，一个是Date类型，可是我们发现，根本就没有这样的一个子类继承自父类的Object类型参数的方法。所以说，却是是重写了，而不是重载了。<br></font><br> </p>
<p><font size="4">为什么会这样呢？原因是这样的，我们传入父类的泛型类型是Date，Pair<date>，我们的本意是将泛型类变为如下：</date></font><br> </p>
<pre><code>class Pair {  
    private Date value;  
    public Date getValue() {  
        return value;  
    }  
    public void setValue(Date value) {  
        this.value = value;  
    }  
} 
</code></pre><p><font size="4">然后再子类中重写参数类型为Date的那两个方法，实现继承中的多态。</font><br> </p>
<p><font size="4">可是由于种种原因，虚拟机并不能将泛型类型变为Date，只能将类型擦除掉，变为原始类型Object。这样，我们的本意是进行重写，实现多态。可是类型擦除后，只能变为了重载。这样，类型擦除就和多态有了冲突。JVM知道你的本意吗？知道！！！可是它能直接实现吗，不能！！！如果真的不能的话，那我们怎么去重写我们想要的Date类型参数的方法啊。</font><br> </p>
<p><font size="4">于是JVM采用了一个特殊的方法，来完成这项功能，那就是<font color="red">桥方法。</font></font><br> </p>
<p><font size="4">首先，我们用javap -c className的方式反编译下DateInter子类的字节码，结果如下：</font><br></p>
<pre><code>class com.tao.test.DateInter extends com.tao.test.Pair&lt;java.util.Date&gt; {  
  com.tao.test.DateInter();  
    Code:  
       0: aload_0  
       1: invokespecial #8                  // Method com/tao/test/Pair.&quot;&lt;init&gt;&quot;  
:()V  
       4: return  

  public void setValue(java.util.Date);  //我们重写的setValue方法  
    Code:  
       0: aload_0  
       1: aload_1  
       2: invokespecial #16                 // Method com/tao/test/Pair.setValue  
:(Ljava/lang/Object;)V  
       5: return  

  public java.util.Date getValue();    //我们重写的getValue方法  
    Code:  
       0: aload_0  
       1: invokespecial #23                 // Method com/tao/test/Pair.getValue  
:()Ljava/lang/Object;  
       4: checkcast     #26                 // class java/util/Date  
       7: areturn  

  public java.lang.Object getValue();     //编译时由编译器生成的巧方法  
    Code:  
       0: aload_0  
       1: invokevirtual #28                 // Method getValue:()Ljava/util/Date 去调用我们重写的getValue方法  
;  
       4: areturn  

  public void setValue(java.lang.Object);   //编译时由编译器生成的巧方法  
    Code:  
       0: aload_0  
       1: aload_1  
       2: checkcast     #26                 // class java/util/Date  
       5: invokevirtual #30                 // Method setValue:(Ljava/util/Date;   去调用我们重写的setValue方法  
)V  
       8: return  
}
</code></pre><p><font size="4">从编译的结果来看，我们本意重写setValue和getValue方法的子类，竟然有4个方法，其实不用惊奇，最后的两个方法，就是编译器自己生成的桥方法。可以看到桥方法的参数类型都是Object，也就是说，子类中真正覆盖父类两个方法的就是这两个我们看不到的桥方法。而打在我们自己定义的setvalue和getValue方法上面的@Oveerride只不过是假象。而桥方法的内部实现，就只是去调用我们自己重写的那两个方法。</font><br> </p>
<p><font size="4">所以，虚拟机巧妙的使用了巧方法，来解决了类型擦除和多态的冲突。</font><br> </p>
<p><font size="4">不过，要提到一点，这里面的setValue和getValue这两个桥方法的意义又有不同。</font><br> </p>
<p><font size="4">setValue方法是为了解决类型擦除与多态之间的冲突。</font><br> </p>
<p><font size="4">而getValue却有普遍的意义，怎么说呢，如果这是一个普通的继承关系：</font><br> </p>
<p><font size="4">那么父类的setValue方法如下：</font><br> </p>
<pre><code>public ObjectgetValue() {  
        return super.getValue();  
    } 
</code></pre><p><font size="4">而子类重写的方法是：</font><br> </p>
<pre><code>public Date getValue() {  
        return super.getValue();  
    } 
</code></pre><p><font size="4">其实这在普通的类继承中也是普遍存在的重写，这就是协变。</font><br> </p>
<p><font size="4">关于协变：。。。。。。</font><br> </p>
<p><font size="4">并且，还有一点也许会有疑问，子类中的巧方法  Object   getValue()和Date getValue()是同 时存在的，可是如果是常规的两个方法，他们的方法签名是一样的，也就是说虚拟机根本不能分别这两个方法。如果是我们自己编写Java代码，这样的代码是无法通过编译器的检查的，但是虚拟机却是允许这样做的，因为虚拟机通过参数类型和返回类型来确定一个方法，所以编译器为了实现泛型的多态允许自己做这个看起来“不合法”的事情，然后交给虚拟器去区别。<br></font><br> </p>
<p><font size="4"><strong>4、泛型类型变量不能是基本数据类型</strong></font><br></p>
<p><font size="4">不能用类型参数替换基本类型。就比如，没有ArrayList<double>，只有ArrayList<double>。因为当类型擦除后，ArrayList的原始类型变为Object，但是Object类型不能存储double值，只能引用Double的值。</double></double></font><br> </p>
<p><font size="4"><strong>5、运行时类型查询</strong></font><br></p>
<p><font size="4">举个例子:</font><br> </p>
<pre><code>ArrayList&lt;String&gt; arrayList=new ArrayList&lt;String&gt;();
</code></pre><p><font size="4">因为类型擦除之后，ArrayList<string>只剩下原始类型，泛型信息String不存在了。那么，运行时进行类型查询的时候使用下面的方法是错误的</string></font><br> </p>
<pre><code>if( arrayList instanceof ArrayList&lt;String&gt;)    
</code></pre><p><font size="4">java限定了这种类型查询的方式</font><br> </p>
<pre><code>if( arrayList instanceof ArrayList&lt;?&gt;) 
</code></pre><p><font size="4">？ 是通配符的形式 ，将在后面一篇中介绍。</font><br> </p>
<p><font size="4"><strong>6、异常中使用泛型的问题</strong></font><br></p>
<p><font size="4">(1)不能抛出也不能捕获泛型类的对象。事实上，泛型类扩展Throwable都不合法。例如：下面的定义将不会通过编译：</font><br> </p>
<pre><code>public class Problem&lt;T&gt; extends Exception{......}
</code></pre><p><font size="4">为什么不能扩展Throwable，因为异常都是在运行时捕获和抛出的，而在编译的时候，泛型信息全都会被擦除掉，那么，假设上面的编译可行，那么，在看下面的定义：</font><br> </p>
<pre><code>try{  
}catch(Problem&lt;Integer&gt; e1){  
。。  
}catch(Problem&lt;Number&gt; e2){  
...  
} 
</code></pre><p><font size="4">类型信息被擦除后，那么两个地方的catch都变为原始类型Object，那么也就是说，这两个地方的catch变的一模一样,就相当于下面的这样</font><br> </p>
<pre><code>try{  
}catch(Problem&lt;Object&gt; e1){  
。。  
}catch(Problem&lt;Object&gt; e2){  
... 
</code></pre><p><font size="4">这个当然就是不行的。就好比，catch两个一模一样的普通异常，不能通过编译一样：</font><br> </p>
<pre><code>try{  
}catch(Exception e1){  
。。  
}catch(Exception  e2){//编译错误  
...
</code></pre><p><font size="4">(2)不能再catch子句中使用泛型变量</font><br> </p>
<pre><code>public static &lt;T extends Throwable&gt; void doWork(Class&lt;T&gt; t){  
        try{  
            ...  
        }catch(T e){ //编译错误  
            ...  
        }  
   }
</code></pre><p><font size="4">因为泛型信息在编译的时候已经变味原始类型，也就是说上面的T会变为原始类型Throwable，那么如果可以再catch子句中使用泛型变量，那么，下面的定义呢：</font><br> </p>
<pre><code>public static &lt;T extends Throwable&gt; void doWork(Class&lt;T&gt; t){  
        try{  
            ...  
        }catch(T e){ //编译错误  
            ...  
        }catch(IndexOutOfBounds e){  
        }                           
 }
</code></pre><p><font size="4">根据异常捕获的原则，一定是子类在前面，父类在后面，那么上面就违背了这个原则。即使你在使用该静态方法的使用T是ArrayIndexOutofBounds，在编译之后还是会变成Throwable，ArrayIndexOutofBounds是IndexOutofBounds的子类，违背了异常捕获的原则。所以java为了避免这样的情况，禁止在catch子句中使用泛型变量。</font><br> </p>
<p><font size="4">但是在异常声明中可以使用类型变量。下面方法是合法的。</font><br> </p>
<pre><code>public static&lt;T extends Throwable&gt; void doWork(T t) throws T{  
    try{  
        ...  
    }catch(Throwable realCause){  
        t.initCause(realCause);  
        throw t;   
    } 
</code></pre><p><font size="4">上面的这样使用是没问题的。</font><br> </p>
<p><font size="4"><strong>7、数组（这个不属于类型擦除引起的问题）</strong></font><br></p>
<p><font size="4">不能声明参数化类型的数组。如：</font><br> </p>
<pre><code>Pair&lt;String&gt;[] table = newPair&lt;String&gt;(10); //ERROR 
</code></pre><p><font size="4">这是因为擦除后，table的类型变为Pair[]，可以转化成一个Object[]。</font><br> </p>
<pre><code>Object[] objarray =table; 
</code></pre><p><font size="4">数组可以记住自己的元素类型，下面的赋值会抛出一个ArrayStoreException异常。</font><br></p>
<pre><code>objarray =&quot;Hello&quot;; //ERROR 
</code></pre><p><font size="4">对于泛型而言，擦除降低了这个机制的效率。下面的赋值可以通过数组存储的检测，但仍然会导致类型错误。</font><br> </p>
<pre><code>objarray =new Pair&lt;Employee&gt;(); 
</code></pre><p><font size="4">提示：如果需要收集参数化类型对象，直接使用ArrayList：ArrayList<pair<string>&gt;最安全且有效。</pair<string></font><br> </p>
<p><font size="4"><strong>8、泛型类型的实例化</strong></font><br></p>
<p><font size="4">不能实例化泛型类型。如，</font><br> </p>
<pre><code>first = new T(); //ERROR
</code></pre><p><font size="4">是错误的，类型擦除会使这个操作做成new Object()。</font><br> </p>
<p><font size="4">不能建立一个泛型数组。</font><br> </p>
<pre><code>public&lt;T&gt; T[] minMax(T[] a){  
     T[] mm = new T[2]; //ERROR  
     ...  
}
</code></pre><p><font size="4">类似的，擦除会使这个方法总是构靠一个Object[2]数组。但是，可以用反射构造泛型对象和数组。</font><br> </p>
<p><font size="4"> 利用反射，调用Array.newInstance:</font><br> </p>
<pre><code>publicstatic &lt;T extends Comparable&gt; T[]minmax(T[] a)  

   {  

      T[] mm == (T[])Array.newInstance(a.getClass().getComponentType(),2);  

       ...  

      // 以替换掉以下代码  

      // Obeject[] mm = new Object[2];  

      // return (T[]) mm;  

   }  
</code></pre><p><font size="4"><strong>9、类型擦除后的冲突</strong></font><br></p>
<p><font size="4">(1)当泛型类型被擦除后，创建条件不能产生冲突。如果在Pair类中添加下面的equals方法：</font><br> </p>
<pre><code>class Pair&lt;T&gt;   {  
    public boolean equals(T value) {  
        return null;  
    }  

}
</code></pre><p><font size="4">考虑一个Pair<string>。从概念上，它有两个equals方法：</string></font><br> </p>
<p><font size="4">booleanequals(String); //在Pair<t>中定义</t></font><br> </p>
<p><font size="4">boolean equals(Object); //从object中继承</font><br> </p>
<p><font size="4">但是，这只是一种错觉。实际上，擦除后方法<br>boolean equals(T) 变成了方法 boolean equals(Object) 这与Object.equals方法是冲突的！当然，补救的办法是重新命名引发错误的方法。</font><br> </p>
<p><font size="4">(2)泛型规范说明提及另一个原则“要支持擦除的转换，需要强行制一个类或者类型变量不能同时成为两个接口的子类，而这两个子类是同一接品的不同参数化。</font><br> </p>
<p><font size="4">下面的代码是非法的：</font><br> </p>
<pre><code>class Calendar implements Comparable&lt;Calendar&gt;{ ... }
class GregorianCalendar extends Calendar implements Comparable&lt;GregorianCalendar&gt;{...} //ERROR   
</code></pre><p><font size="4">GregorianCalendar会实现Comparable<calender>和Compable<gregoriancalendar>，这是同一个接口的不同参数化实现。这一限制与类型擦除的关系并不很明确。非泛型版本：</gregoriancalendar></calender></font><br> </p>
<pre><code>class Calendar implements Comparable{ ... }  
class GregorianCalendar extends Calendar implements Comparable{...} //ERROR
</code></pre><p><font size="4">是合法的。</font><br> </p>
<p><font size="4"><strong>10、泛型在静态方法和静态类中的问题</strong></font><br></p>
<p><font size="4">泛型类中的静态方法和静态变量不可以使用泛型类所声明的泛型类型参数。举例说明：</font><br> </p>
<pre><code>public class Test2&lt;T&gt; {    
    public static T one;   //编译错误    
    public static  T show(T one){ //编译错误    
        return null;    
    }    
}
</code></pre><p><font size="4">因为泛型类中的泛型参数的实例化是在定义对象的时候指定的，而静态变量和静态方法不需要使用对象来调用。对象都没有创建，如何确定这个泛型参数是何种类型，所以当然是错误的。</font><br> </p>
<p><font size="4">但是要注意区分下面的一种情况：</font><br> </p>
<pre><code>public class Test2&lt;T&gt; {    

    public static &lt;T &gt;T show(T one){//这是正确的    
        return null;    
    }    
}
</code></pre><p><font size="4">因为这是一个泛型方法，在泛型方法中使用的T是自己在方法中定义的T，而不是泛型类中的T。</font><br> </p>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式(九)]]></title>
      <url>/2018/05/01/design-pattern9/</url>
      <content type="html"><![CDATA[<p><div align="center" style="display:none"><br><img src="/photo/5-1/1.jpg" height="330" width="495"><br></div></p>
<p></p><h1>9、外观模式（Facade）</h1><hr><p></p>
<p><font size="4">外观模式是为了解决类与类之家的依赖关系的，像spring一样，可以将类和类之间的关系配置到配置文件中，而外观模式就是将他们的关系放在一个Facade类中，降低了类类之间的耦合度，该模式中没有涉及到接口，看下类图：（我们以一个计算机的启动过程为例）</font><br><br><img src="/photo/5-1/c.jpg" alt="alt text"><br></p>
<p><font size="4">我们先看下实现类：</font><br> </p>
<pre><code>public class CPU {  

    public void startup(){  
        System.out.println(&quot;cpu startup!&quot;);  
    }  

    public void shutdown(){  
        System.out.println(&quot;cpu shutdown!&quot;);  
    }  
} 
</code></pre><p><br></p>
<pre><code>public class Memory {  

    public void startup(){  
        System.out.println(&quot;memory startup!&quot;);  
    }  

    public void shutdown(){  
        System.out.println(&quot;memory shutdown!&quot;);  
    }  
}  
</code></pre><p><br></p>
<pre><code>public class Disk {  

    public void startup(){  
        System.out.println(&quot;disk startup!&quot;);  
    }  

    public void shutdown(){  
        System.out.println(&quot;disk shutdown!&quot;);  
    }  
}
</code></pre><p><br></p>
<pre><code>public class Computer {  
    private CPU cpu;  
    private Memory memory;  
    private Disk disk;  

    public Computer(){  
        cpu = new CPU();  
        memory = new Memory();  
        disk = new Disk();  
    }  

    public void startup(){  
        System.out.println(&quot;start the computer!&quot;);  
        cpu.startup();  
        memory.startup();  
        disk.startup();  
        System.out.println(&quot;start computer finished!&quot;);  
    }  

    public void shutdown(){  
        System.out.println(&quot;begin to close the computer!&quot;);  
        cpu.shutdown();  
        memory.shutdown();  
        disk.shutdown();  
        System.out.println(&quot;computer closed!&quot;);  
    }  
}
</code></pre><p><font size="4">User类如下：</font><br> </p>
<pre><code>public class User {  

    public static void main(String[] args) {  
        Computer computer = new Computer();  
        computer.startup();  
        computer.shutdown();  
    }  
} 
</code></pre><p><font size="4">输出：</font><br> </p>
<p><font size="4">start the computer!</font><br> </p>
<p><font size="4">cpu startup!</font><br> </p>
<p><font size="4">memory startup!</font><br> </p>
<p><font size="4">disk startup!</font><br> </p>
<p><font size="4">start computer finished!</font><br> </p>
<p><font size="4">begin to close the computer!</font><br> </p>
<p><font size="4">cpu shutdown!</font><br> </p>
<p><font size="4">memory shutdown!</font><br> </p>
<p><font size="4">disk shutdown!</font><br> </p>
<p><font size="4">computer closed!</font><br> </p>
<p><font size="4">如果我们没有Computer类，那么，CPU、Memory、Disk他们之间将会相互持有实例，产生关系，这样会造成严重的依赖，修改一个类，可能会带来其他类的修改，这不是我们想要看到的，有了Computer类，他们之间的关系被放在了Computer类里，这样就起到了解耦的作用，这，就是外观模式！</font><br> </p>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> technology </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式(八)]]></title>
      <url>/2018/05/01/design-pattern8/</url>
      <content type="html"><![CDATA[<p><div align="center" style="display:none"><br><img src="/photo/4-28/4.jpg" height="330" width="495"><br></div></p>
<p></p><h1>8、代理模式（Proxy）</h1><hr><p></p>
<p><font size="4">其实每个模式名称就表明了该模式的作用，代理模式就是多一个代理类出来，替原对象进行一些操作，比如我们在租房子的时候回去找中介，为什么呢？因为你对该地区房屋的信息掌握的不够全面，希望找一个更熟悉的人去帮你做，此处的代理就是这个意思。再如我们有的时候打官司，我们需要请律师，因为律师在法律方面有专长，可以替我们进行操作，表达我们的想法。先来看看关系图：</font><br><br><img src="/photo/5-1/b.jpg" alt="alt text"><br></p>
<p><font size="4">根据上文的阐述，代理模式就比较容易的理解了，我们看下代码：</font><br> </p>
<pre><code>public interface Sourceable {  
    public void method();  
}  
</code></pre><p><br></p>
<pre><code>public class Source implements Sourceable {  

    @Override  
    public void method() {  
        System.out.println(&quot;the original method!&quot;);  
    }  
} 
</code></pre><p><br></p>
<pre><code>public class Proxy implements Sourceable {  

    private Source source;  
    public Proxy(){  
        super();  
        this.source = new Source();  
    }  
    @Override  
    public void method() {  
        before();  
        source.method();  
        atfer();  
    }  
    private void atfer() {  
        System.out.println(&quot;after proxy!&quot;);  
    }  
    private void before() {  
        System.out.println(&quot;before proxy!&quot;);  
    }  
} 
</code></pre><p><font size="4">测试类：</font><br> </p>
<pre><code>public class ProxyTest {  

    public static void main(String[] args) {  
        Sourceable source = new Proxy();  
        source.method();  
    }  

} 
</code></pre><p><font size="4">输出：</font><br> </p>
<p><font size="4">before proxy!</font><br> </p>
<p><font size="4">the original method!：</font><br> </p>
<p><font size="4">after proxy!</font><br> </p>
<p><font size="4">代理模式的应用场景：</font><br> </p>
<p><font size="4">如果已有的方法在使用的时候需要对原有的方法进行改进，此时有两种办法：</font><br> </p>
<p><font size="4">1、修改原有的方法来适应。这样违反了“对扩展开放，对修改关闭”的原则。</font><br> </p>
<p><font size="4">2、就是采用一个代理类调用原有的方法，且对产生的结果进行控制。这种方法就是代理模式。使用代理模式，可以将功能划分的更加清晰，有助于后期维护！</font><br> </p>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> technology </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式(七)]]></title>
      <url>/2018/05/01/design-pattern7/</url>
      <content type="html"><![CDATA[<p><div align="center" style="display:none"><br><img src="/photo/4-28/1.jpg" height="330" width="495"><br></div></p>
<p></p><h1>7、装饰模式（Decorator）</h1><hr><p></p>
<p><font size="4">顾名思义，装饰模式就是给一个对象增加一些新的功能，而且是动态的，要求装饰对象和被装饰对象实现同一个接口，装饰对象持有被装饰对象的实例，关系图如下：</font><br><br><img src="/photo/5-1/a.jpg" alt="alt text"><br></p>
<p><font size="4">Source类是被装饰类，Decorator类是一个装饰类，可以为Source类动态的添加一些功能，代码如下：</font><br> </p>
<pre><code>public interface Sourceable {  
    public void method();  
} 
</code></pre><p><br></p>
<pre><code>public class Source implements Sourceable {  

    @Override  
    public void method() {  
        System.out.println(&quot;the original method!&quot;);  
    }  
}  
</code></pre><p><br></p>
<pre><code>public class Decorator implements Sourceable {  

    private Sourceable source;  

    public Decorator(Sourceable source){  
        super();  
        this.source = source;  
    }  
    @Override  
    public void method() {  
        System.out.println(&quot;before decorator!&quot;);  
        source.method();  
        System.out.println(&quot;after decorator!&quot;);  
    }  
}  
</code></pre><p><font size="4">测试类：</font><br> </p>
<pre><code>public class DecoratorTest {  

    public static void main(String[] args) {  
        Sourceable source = new Source();  
        Sourceable obj = new Decorator(source);  
        obj.method();  
    }
</code></pre><p><font size="4">输出：</font><br> </p>
<p><font size="4">before decorator!</font><br> </p>
<p><font size="4">the original method!</font><br> </p>
<p><font size="4">after decorator!</font><br> </p>
<p><font size="4" color="red">装饰器模式的应用场景：</font><br> </p>
<p><font size="4">1、需要扩展一个类的功能。</font><br> </p>
<p><font size="4">2、动态的为一个对象增加功能，而且还能动态撤销。（继承不能做到这一点，继承的功能是静态的，不能动态增删。）</font><br> </p>
<p><font size="4">缺点：产生过多相似的对象，不易排错！</font><br> </p>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> technology </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Integer与int知多少]]></title>
      <url>/2018/04/28/Integer/</url>
      <content type="html"><![CDATA[<p><div align="center" style="display:none"><br><img src="/photo/4-28/2.png" height="330" width="495"><br></div><br><strong><font size="5">Integer与int的种种比较</font></strong><br></p>
<p><font size="4">如果面试官问Integer与int的区别：估计大多数人只会说道两点，Ingeter是int的包装类，int的初值为0，Ingeter的初值为null。但是如果面试官再问一下Integer i = 1;int ii = 1; i==ii为true还是为false？估计就有一部分人答不出来了，如果再问一下其他的，估计更多的人会头脑一片混乱。请看如下代码：</font><br></p>
<pre><code>public class TestInteger {
 8 
 9     /**
10      * @param args
11      */
12     public static void main(String[] args) {
13         int i = 128;
14         Integer i2 = 128;
15         Integer i3 = new Integer(128);
16         //Integer会自动拆箱为int，所以为true
17         System.out.println(i == i2);
18         System.out.println(i == i3);
19         System.out.println(&quot;**************&quot;);
20         Integer i5 = 127;//java在编译的时候,被翻译成-&gt; Integer i5 = Integer.valueOf(127);
21         Integer i6 = 127;
22         System.out.println(i5 == i6);//true
23         /*Integer i5 = 128;
24         Integer i6 = 128;
25         System.out.println(i5 == i6);//false
26 */        Integer ii5 = new Integer(127);
27         System.out.println(i5 == ii5); //false
28         Integer i7 = new Integer(128);
29         Integer i8 = new Integer(128);
30         System.out.println(i7 == i8);  //false
31     }
32 
33 }
</code></pre><p><font size="4">首先，17行和18行输出结果都为true,因为Integer和int比都会自动拆箱（jdk1.5以上）。</font><br><font size="4">22行的结果为true,而25行则为false,很多人都不动为什么。其实java在编译Integer i5 = 127的时候,被翻译成-&gt; Integer i5 = Integer.valueOf(127);所以关键就是看valueOf()函数了。只要看看valueOf()函数的源码就会明白了。JDK源码的valueOf函数式这样的：</font><br></p>
<pre><code>1 public static Integer valueOf(int i) {
2         assert IntegerCache.high &gt;= 127;
3         if (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)
4             return IntegerCache.cache[i + (-IntegerCache.low)];
5         return new Integer(i);
6     }
</code></pre><p><font size="4">看一下源码大家都会明白，对于-128到127之间的数，会进行缓存，Integer i5 = 127时，会将127进行缓存，下次再写Integer i6 = 127时，就会直接从缓存中取，就不会new了。所以22行的结果为true,而25行为false。</font><br></p>
<p><font size="4">对于27行和30行，因为对象不一样，所以为false。</font><br> </p>
<p><font size="4">我对于以上的情况总结如下：</font><br> </p>
<p><font size="4">①无论如何，Integer与new Integer不会相等。不会经历拆箱过程，i3的引用指向堆，而i4指向专门存放他的内存（常量池），他们的内存地址不一样，所以为false</font><br> </p>
<p><font size="4">②两个都是非new出来的Integer，如果数在-128到127之间，则是true,否则为false。java在编译Integer i2 = 128的时候,被翻译成-&gt; Integer i2 = Integer.valueOf(128);而valueOf()函数会对-128到127之间的数进行缓存</font><br> </p>
<p><font size="4">③两个都是new出来的,都为false</font><br> </p>
<p><font size="4">④int和integer(无论new否)比，都为true，因为会把Integer自动拆箱为int再去比</font><br> </p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式(六)]]></title>
      <url>/2018/04/28/design-pattern6/</url>
      <content type="html"><![CDATA[<p><div align="center" style="display:none"><br><img src="/photo/4-28/large.png" height="330" width="495"><br></div></p>
<p></p><h1>B、结构模式（7种）</h1><hr><p></p>
<p><font size="4">我们接着讨论设计模式，上篇设计模式文章讲完了5种创建型模式，这章开始，讲下7种结构型模式：适配器模式、装饰模式、代理模式、外观模式、桥接模式、组合模式、享元模式。其中对象的适配器模式是各种模式的起源，我们看下面的图：</font><br><br><img src="/photo/4-28/a.png" alt="alt text"><br></p>
<p></p><h2>6、适配器模式</h2><p></p>
<p><font size="4">适配器模式将某个类的接口转换成客户端期望的另一个接口表示，目的是消除由于接口不匹配所造成的类的兼容性问题。主要分为三类：类的适配器模式、对象的适配器模式、接口的适配器模式。</font><br><br><strong><em><h3>I.类的适配器模式</h3></em></strong><br><img src="/photo/4-28/b.jpg" alt="alt text"><br></p>
<p><font size="4">核心思想就是：有一个Source类，拥有一个方法，待适配，目标接口是Targetable，通过Adapter类，将Source的功能扩展到Targetable里，看代码：</font><br> </p>
<pre><code>public class Source {  

    public void method1() {  
        System.out.println(&quot;this is original method!&quot;);  
    }  
}  
</code></pre><p><br></p>
<pre><code>public interface Targetable {  

    /* 与原类中的方法相同 */  
    public void method1();  

    /* 新类的方法 */  
    public void method2();  
}  
</code></pre><p><br></p>
<pre><code>public class Adapter extends Source implements Targetable {  

    @Override  
    public void method2() {  
        System.out.println(&quot;this is the targetable method!&quot;);  
    }  
} 
</code></pre><p><font size="4">Adapter类继承Source类，实现Targetable接口，下面是测试类：</font><br> </p>
<pre><code>public class AdapterTest {  

    public static void main(String[] args) {  
        Targetable target = new Adapter();  
        target.method1();  
        target.method2();  
    }  
} 
</code></pre><p><font size="4">输出：</font><br> </p>
<p><font size="4">this is original method!</font><br> </p>
<p><font size="4">this is the targetable method!</font><br> </p>
<p><font size="4">这样Targetable接口的实现类就具有了Source类的功能。</font><br><br><strong><em><h3>II.对象的适配器模式</h3></em></strong></p>
<p><font size="4">基本思路和类的适配器模式相同，只是将Adapter类作修改，这次不继承Source类，而是持有Source类的实例，以达到解决兼容性的问题。看图：</font><br><br><img src="/photo/4-28/c.jpg" alt="alt text"><br></p>
<p><font size="4">只需要修改Adapter类的源码即可：</font><br> </p>
<pre><code>public class Wrapper implements Targetable {  

    private Source source;  

    public Wrapper(Source source){  
        super();  
        this.source = source;  
    }  
    @Override  
    public void method2() {  
        System.out.println(&quot;this is the targetable method!&quot;);  
    }  

    @Override  
    public void method1() {  
        source.method1();  
    }  
}  
</code></pre><p><font size="4">测试类：</font><br> </p>
<pre><code>public class AdapterTest {  

    public static void main(String[] args) {  
        Source source = new Source();  
        Targetable target = new Wrapper(source);  
        target.method1();  
        target.method2();  
    }  
}  
</code></pre><p><font size="4">输出与第一种一样，只是适配的方法不同而已。</font><br><br><strong><em><h3>III.接口的适配器模式</h3></em></strong></p>
<p><font size="4">接口的适配器是这样的：有时我们写的一个接口中有多个抽象方法，当我们写该接口的实现类时，必须实现该接口的所有方法，这明显有时比较浪费，因为并不是所有的方法都是我们需要的，有时只需要某一些，此处为了解决这个问题，我们引入了接口的适配器模式，借助于一个抽象类，该抽象类实现了该接口，实现了所有的方法，而我们不和原始的接口打交道，只和该抽象类取得联系，所以我们写一个类，继承该抽象类，重写我们需要的方法就行。看一下类图：</font><br><br><img src="/photo/4-28/d.jpg" alt="alt text"><br></p>
<p><font size="4">这个很好理解，在实际开发中，我们也常会遇到这种接口中定义了太多的方法，以致于有时我们在一些实现类中并不是都需要。看代码：</font><br> </p>
<pre><code>public interface Sourceable {  

    public void method1();  
    public void method2();  
}  
</code></pre><p><font size="4">抽象类Wrapper2：</font><br> </p>
<pre><code>public abstract class Wrapper2 implements Sourceable{  

    public void method1(){}  
    public void method2(){}  
}  
</code></pre><p><br></p>
<pre><code>public class SourceSub1 extends Wrapper2 {  
    public void method1(){  
        System.out.println(&quot;the sourceable interface&apos;s first Sub1!&quot;);  
    }  
} 
</code></pre><p><br></p>
<pre><code>public class SourceSub2 extends Wrapper2 {  
    public void method2(){  
        System.out.println(&quot;the sourceable interface&apos;s second Sub2!&quot;);  
    }  
}  
</code></pre><p><br></p>
<pre><code>public class WrapperTest {  

    public static void main(String[] args) {  
        Sourceable source1 = new SourceSub1();  
        Sourceable source2 = new SourceSub2();  

        source1.method1();  
        source1.method2();  
        source2.method1();  
        source2.method2();  
    }  
}  
</code></pre><p><font size="4">测试输出：</font><br> </p>
<p><font size="4">the sourceable interface’s first Sub1!</font><br> </p>
<p><font size="4">the sourceable interface’s second Sub2!</font><br> </p>
<p><font size="4">总结一下三种适配器模式的应用场景：</font><br></p>
<p><font size="4">类的适配器模式：当希望将一个类转换成满足另一个新接口的类时，可以使用类的适配器模式，创建一个新类，继承原有的类，实现新的接口即可。</font><br> </p>
<p><font size="4">对象的适配器模式：当希望将一个对象转换成满足另一个新接口的对象时，可以创建一个Wrapper类，持有原类的一个实例，在Wrapper类的方法中，调用实例的方法就行。</font><br> </p>
<p><font size="4">接口的适配器模式：当不希望实现一个接口中所有的方法时，可以创建一个抽象类Wrapper，实现所有方法，我们写别的类的时候，继承抽象类即可。</font><br> </p>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> technology </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[serialVersionUID的作用]]></title>
      <url>/2018/04/27/SerialVersionId/</url>
      <content type="html"><![CDATA[<p><div align="center" style="display:none"><br><img src="/photo/4-26/uid.jpg" height="330" width="495"><br></div><br><strong><font size="5">java类中serialversionuid 作用</font></strong><br></p>
<p><font size="4">serialVersionUID适用于Java的序列化机制。简单来说，Java的序列化机制是通过判断类的serialVersionUID来验证版本一致性的。在进行反序列化时，JVM会把传来的字节流中的serialVersionUID与本地相应实体类的serialVersionUID进行比较，如果相同就认为是一致的，可以进行反序列化，否则就会出现序列化版本不一致的异常，即是InvalidCastException。</font><br><br><strong><font size="4">具体的序列化过程是这样的：</font><br></strong><font size="4">序列化操作的时候系统会把当前类的serialVersionUID写入到序列化文件中，当反序列化时系统会去检测文件中的serialVersionUID，判断它是否与当前类的serialVersionUID一致，如果一致就说明序列化类的版本与当前类版本是一样的，可以反序列化成功，否则失败。</font><br>  </p>
<p><font size="4" color="red">serialVersionUID有两种显示的生成方式：</font><br> </p>
<p><font size="4">一是默认的1L，比如：private static final long serialVersionUID = 1L; </font><br> </p>
<p><font size="4">二是根据类名、接口名、成员方法及属性等来生成一个64位的哈希字段，比如：<br>private static final  long   serialVersionUID = xxxxL; </font><br> </p>
<p><font size="4">当一个类实现了Serializable接口，如果没有显示的定义serialVersionUID，Eclipse会提供相应的提醒。面对这种情况，我们只需要在Eclipse中点击类中warning图标一下，Eclipse就会      自动给定两种生成的方式。如果不想定义，在Eclipse的设置中也可以把它关掉的，设置如下：<br>Window ==&gt; Preferences ==&gt; Java ==&gt; Compiler ==&gt; Error/Warnings ==&gt; Potential programming problems.将Serializable class without serialVersionUID的warning改成ignore即可。</font><br> </p>
<p><font size="4">当实现java.io.Serializable接口的类没有显式地定义一个serialVersionUID变量时候，Java序列化机制会根据编译的Class自动生成一个serialVersionUID作序列化版本比较用，这种情况下，如果Class文件(类名，方法明等)没有发生变化(增加空格，换行，增加注释等等)，就算再编译多次，serialVersionUID也不会变化的。</font><br> </p>
<p><font size="4">如果我们不希望通过编译来强制划分软件版本，即实现序列化接口的实体能够兼容先前版本，就需要显式地定义一个名为serialVersionUID，类型为long的变量，不修改这个变量值的序列化实体都可以相互进行串行化和反串行化。</font><br> </p>
<p><font size="4">下面用代码说明一下serialVersionUID在应用中常见的几种情况。</font><br> </p>
<p><font size="4">（1）序列化实体类:</font><br> </p>
<pre><code>import java.io.Serializable;

public class Person implements Serializable {
    private static final long serialVersionUID = 123456789L;
    public int id;
    public String name;

    public Person(int id, String name) {
        this.id = id;
        this.name = name;
    }

    public String toString() {
        return &quot;Person: &quot; + id + &quot; &quot; + name;
    }
}
</code></pre><p><font size="4">（2）序列化功能:</font><br> </p>
<pre><code>import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;

public class SerialTest {

    public static void main(String[] args) throws IOException {
        Person person = new Person(1234, &quot;wang&quot;);
        System.out.println(&quot;Person Serial&quot; + person);
        FileOutputStream fos = new FileOutputStream(&quot;Person.txt&quot;);
        ObjectOutputStream oos = new ObjectOutputStream(fos);
        oos.writeObject(person);
        oos.flush();
        oos.close();
    }
}
</code></pre><p><font size="4">（3）反序列化功能:</font><br> </p>
<pre><code>import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;

public class DeserialTest {
    public static void main(String[] args) throws IOException, ClassNotFoundException {
        Person person;

        FileInputStream fis = new FileInputStream(&quot;Person.txt&quot;);
        ObjectInputStream ois = new ObjectInputStream(fis);
        person = (Person) ois.readObject();
        ois.close();
        System.out.println(&quot;Person Deserial&quot; + person);
    }

}
</code></pre><p><font size="4" color="red">情况一：假设Person类序列化之后，从A端传输到B端,【这里用A端表示进行序列化操作，B端为反序列化操作】，然后在B端进行反序列化。在序列化Person和反序列化Person的时候，A端和B端都需要存在一个相同的类。如果两处的serialVersionUID不一致，会产生什么错误呢?</font><br> </p>
<p><font size="4">【答案】可以利用上面的代码做个试验来验证：先执行测试类SerialTest，生成序列化文件，代表A端序列化后的文件，然后修改serialVersion值，再执行测试类DeserialTest，代表B端使用不同serialVersion的类去反序列化，结果报错:</font><br> </p>
<pre><code>Exception in thread &quot;main&quot; java.io.InvalidClassException: com.sf.code.serial.Person; local class incompatible: stream classdesc serialVersionUID = 1234567890, local class serialVersionUID = 123456789
    at java.io.ObjectStreamClass.initNonProxy(ObjectStreamClass.java:621)
    at java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:1623)
    at java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1518)
    at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1774)
    at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1351)
    at java.io.ObjectInputStream.readObject(ObjectInputStream.java:371)
    at com.sf.code.serial.DeserialTest.main(DeserialTest.java:13)
</code></pre><p><font size="4" color="red">情况二：假设两处serialVersionUID一致，如果A端增加一个字段，然后序列化，而B端不变,(指在序列化之前增加一个字段，在反序列化前再把它去掉)，然后反序列化，会是什么情况呢?</font><br> </p>
<pre><code>package com.sf.code.serial;

import java.io.Serializable;

public class Person implements Serializable {
    private static final long serialVersionUID = 1234567890L;
    public int id;
    public String name;
    public int age;

    public Person(int id, String name) {
        this.id = id;
        this.name = name;
    }

    public Person(int id, String name, int age) {
        this.id = id;
        this.name = name;
        this.age = age;
    }

    public String toString() {
        return &quot;Person: &quot; + id 
                + &quot;,name:&quot; + name 
                + &quot;,age:&quot; + age;
    }

} 
</code></pre><p><br></p>
<pre><code>public class SerialTest {

    public static void main(String[] args) throws IOException {
        Person person = new Person(1234, &quot;wang&quot;, 100);
        System.out.println(&quot;Person Serial&quot; + person);
        FileOutputStream fos = new FileOutputStream(&quot;Person.txt&quot;);
        ObjectOutputStream oos = new ObjectOutputStream(fos);
        oos.writeObject(person);
        oos.flush();
        oos.close();
    }
}
</code></pre><p><font size="4">Person DeserialPerson: 1234,name:wang</font><br> </p>
<p><font size="4">【答案】新增 public int age; 执行SerialTest，生成序列化文件，代表A端。删除 public int age，反序列化，代表B端，最后的结果为：执行序列化，反序列化正常，但是A端增加的字段丢失(被B端忽略)。</font><br> </p>
<p><font size="4" color="red">情况三：假设两处serialVersionUID一致，如果B端减少一个字段(即反序列化之前注释掉某字段)，A端不变，会是什么情况呢??</font><br> </p>
<pre><code>import java.io.Serializable;

public class Person implements Serializable {
    private static final long serialVersionUID = 1234567890L;
    public int id;
    //public String name;

    public int age;

    public Person(int id, String name) {
        this.id = id;
        //this.name = name;
    }

    public String toString() {
        return &quot;Person: &quot; + id 
                //+ &quot;,name:&quot; + name 
                + &quot;,age:&quot; + age;
    }
}
</code></pre><p><font size="4">Person DeserialPerson: 1234,age:0</font><br> </p>
<p><font size="4">【答案】序列化，反序列化正常，B端字段少于A端，A端多的字段值丢失(被B端忽略)。</font><br> </p>
<p><font size="4" color="red">情况四：假设两处serialVersionUID一致，如果B端增加一个字段，A端不变，会是什么情况呢?验证过程如下：</font><br> </p>
<p><font size="4">先执行SerialTest，然后在实体类Person增加一个字段age，如下所示，再执行测试类DeserialTest.</font><br> </p>
<pre><code>import java.io.Serializable;

public class Person implements Serializable {
    private static final long serialVersionUID = 1234567890L;
    public int id;
    public String name;
    public int age;

    public Person(int id, String name) {
        this.id = id;
        this.name = name;
    }

    /*public Person(int id, String name, int age) {
        this.id = id;
        this.name = name;
        this.age = age;
    }*/

    public String toString() {
        return &quot;Person: &quot; + id 
                + &quot;,name:&quot; + name 
                + &quot;,age:&quot; + age;
    }
}
</code></pre><p><font size="4">结果：Person DeserialPerson: 1234,name:wang,age:0</font><br> </p>
<p><font size="4">说明序列化，反序列化正常，B端新增加的int字段被赋予了默认值0。</font><br> </p>
<p><font size="5" color="red">静态变量序列化</font><br> </p>
<p><font size="4">情境：查看如下代码。</font><br> </p>
<pre><code>public class Test implements Serializable {

    private static final long serialVersionUID = 1L;

    public static int staticVar = 5;

    public static void main(String[] args) {
        try {
            //初始时staticVar为5
            ObjectOutputStream out = new ObjectOutputStream(
                    new FileOutputStream(&quot;result.obj&quot;));
            out.writeObject(new Test());
            out.close();

            //序列化后修改为10
            Test.staticVar = 10;

            ObjectInputStream oin = new ObjectInputStream(new FileInputStream(
                    &quot;result.obj&quot;));
            Test t = (Test) oin.readObject();
            oin.close();

            //再读取，通过t.staticVar打印新的值
            System.out.println(t.staticVar);

        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
    }
}
</code></pre><p><font size="4">在main 方法中将对象序列化后，修改静态变量的数值，再将序列化对象读取出来，然后通过读取出来的对象获得静态变量的数值并打印出来。依照清单 2，这个 System.out.println(t.staticVar) 语句输出的是 10 还是 5 呢？</font><br> </p>
<p><font size="4">最后的输出是 10，对于无法理解的读者认为，打印的 staticVar 是从读取的对象里获得的，应该是保存时的状态才对。之所以打印 10 的原因在于序列化时，并不保存静态变量，这其实比较容易理解，序列化保存的是对象的状态，静态变量属于类的状态，因此 序列化并不保存静态变量。</font><br> </p>
<p><font size="5" color="red">父类的序列化与 Transient 关键字</font><br></p>
<p><font size="4">情境：一个子类实现了 Serializable 接口，它的父类都没有实现 Serializable 接口，序列化该子类对象，然后反序列化后输出父类定义的某变量的数值，该变量数值与序列化时的数值不同。</font><br>  </p>
<p><font size="4">解决：要想将父类对象也序列化，就需要让父类也实现Serializable 接口。如果父类不实现的话的，就需要有默认的无参的构造函数。在父类没有实现 Serializable 接口时，虚拟机是不会序列化父对象的，而一个 Java 对象的构造必先有父对象，才有子对象，反序列化也不例外。所以反序列化时，为了构造父对象，只能调用父类的无参构造函数作为默认的父对象。因此当我们取父对象的变量值时，它的值是调用父类无参构造函数后的值。如果你考虑到这种序列化的情况，在父类无参构造函数中对变量进行初始化，否则的话，父类变量值都是默认声明的值，如 int 型的默认是 0，string 型的默认是 null。</font><br> </p>
<p><font size="4">Transient 关键字的作用是控制变量的序列化，在变量声明前加上该关键字，可以阻止该变量被序列化到文件中，在被反序列化后，transient 变量的值被设为初始值，如 int 型的是 0，对象型的是 null。</font><br></p>
<p><font size="4">特性使用案例：</font><br> <font size="4">我们熟悉使用 Transient 关键字可以使得字段不被序列化，那么还有别的方法吗？根据父类对象序列化的规则，我们可以将不需要被序列化的字段抽取出来放到父类中，子类实现 Serializable 接口，父类不实现，根据父类序列化规则，父类的字段数据将不被序列化，形成类图如下所示。</font><br><br><img src="/photo/4-26/b.jpg" alt="alt text"><br><font size="4">上图中可以看出，attr1、attr2、attr3、attr5 都不会被序列化，放在父类中的好处在于当有另外一个 Child 类时，attr1、attr2、attr3 依然不会被序列化，不用重复抒写 transient，代码简洁。</font><br> </p>
<p><font size="5" color="red">static final 修饰的serialVersionUID 如何被写入到序列化文件中的?</font><br></p>
<p><font size="4">看下面的源码。序列化写入时的ObjectStreamClass.java中，</font><br> </p>
<pre><code>void writeNonProxy(ObjectOutputStream out) throws IOException {
        out.writeUTF(name);
        out.writeLong(getSerialVersionUID());

        byte flags = 0;
        ...
</code></pre><p><font size="4">其中，getSerialVersionUID()函数如下：</font><br> </p>
<pre><code>public long getSerialVersionUID() {
        // REMIND: synchronize instead of relying on volatile?
        if (suid == null) {
            suid = AccessController.doPrivileged(
                new PrivilegedAction&lt;Long&gt;() {
                    public Long run() {
                        return computeDefaultSUID(cl);
                    }
                }
            );
        }
        return suid.longValue();
    }
</code></pre><p><img src="/photo/4-26/uid1.png" alt="alt text"><br><br><img src="/photo/4-26/uid2.png" alt="alt text"><br><br><img src="/photo/4-26/uid3.png" alt="alt text"><br></p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java Object对象之clone方法]]></title>
      <url>/2018/04/27/clone/</url>
      <content type="html"><![CDATA[<p><div align="center" style="display:none"><br><img src="/photo/4-26/a.jpg" height="330" width="495"><br></div><br><strong><font size="5">Object对象之clone方法</font></strong><br></p>
<p><font size="4" color="red">克隆的目的：</font><font size="4">快速创建一个已有对象的副本。</font><br> </p>
<p><font size="4" color="red">克隆的步骤：</font><br></p>
<p><font size="4">1.创建一个对象</font><br> </p>
<p><font size="4">2.将原有对象的数据导入到新创建的数据中</font><br></p>
<p><font size="4" color="red">1. Object的clone()源代码简介</font><br></p>
<pre><code>/** 
 * Creates and returns a copy of this {@code Object}. The default 
 * implementation returns a so-called &quot;shallow&quot; copy: It creates a new 
 * instance of the same class and then copies the field values (including 
 * object references) from this instance to the new instance. A &quot;deep&quot; copy, 
 * in contrast, would also recursively clone nested objects. A subclass that 
 * needs to implement this kind of cloning should call {@code super.clone()} 
 * to create the new instance and then create deep copies of the nested, 
 * mutable objects. 
 * 
 * @return a copy of this object. 
 * @throws CloneNotSupportedException 
 *             if this object&apos;s class does not implement the {@code 
 *             Cloneable} interface. 
 */  
protected Object clone() throws CloneNotSupportedException {  
    if (!(this instanceof Cloneable)) {  
        throw new CloneNotSupportedException(&quot;Class doesn&apos;t implement Cloneable&quot;);  
    }  

    return internalClone((Cloneable) this);  
}  

/* 
 * Native helper method for cloning. 
 */  
private native Object internalClone(Cloneable o); 
</code></pre><p><font size="4">clone方法首先会判对象是否实现了Cloneable接口，若无则抛出CloneNotSupportedException, 最后会调用internalClone. intervalClone是一个native方法，一般来说native方法的执行效率高于非native方法。</font><br><font size="4">当某个类要复写clone方法时，要继承Cloneable接口。通常的克隆对象都是通过super.clone()方法来克隆对象。</font><br></p>
<p><font size="4" color="red">2.浅克隆(shallow clone)</font><br></p>
<p><font size="4">克隆就是复制一个对象的复本.若只需要复制对象的字段值（对于基本数据类型,如:int,long,float等，则复制值；对于复合数据类型仅复制该字段值，如数组变量则复制地址，对于对象变量则复制对象的reference。例子：</font><br> </p>
<pre><code>public class ShallowClone implements Cloneable{  

    private int a;   // 基本类型  
    private int[] b; // 非基本类型  
    // 重写Object.clone()方法,并把protected改为public  
    @Override  
    public Object clone(){  
        ShallowClone sc = null;  
        try  
        {  
            sc = (ShallowClone) super.clone();  
        } catch (CloneNotSupportedException e){  
            e.printStackTrace();  
        }  
        return sc;  
    }  
    public int getA()  
    {  
        return a;  
    }  
    public void setA(int a)  
    {  
        this.a = a;  
    }  
    public int[] getB() {  
    return b;  
    }  
    public void setB(int[] b) {  
    this.b = b;  
    }    
} 
</code></pre><p><font size="4">然后进行测试：</font><br> </p>
<pre><code>public class Test{  
    public static void main(String[] args) throws CloneNotSupportedException{  
        ShallowClone c1 = new SlladowClone();  
        //对c1赋值  
        c1.setA(100) ;  
        c1.setB(new int[]{1000}) ;  

        System.out.println(&quot;克隆前c1:  a=&quot;+c1.getA()+&quot; b=&quot;+c1.getB()[0]);  
        //克隆出对象c2,并对c2的属性A,B,C进行修改  
        ShallowClone c2 = (ShallowClone) c1.clone();  
        //对c2进行修改  
        c2.setA(50) ;  
        int []a = c2.getB() ;  
        a[0]=5 ;  
        c2.setB(a);  
        System.out.println(&quot;克隆前c1:  a=&quot;+c1.getA()+&quot; b=&quot;+c1.getB()[0]);  
        System.out.println(&quot;克隆后c2:  a=&quot;+c2.getA()+ &quot; b[0]=&quot;+c2.getB()[0]);  
    }  
}
</code></pre><p><font size="4">结果为：</font><br> </p>
<p><font size="4">克隆前c1:  a=100 b=1000</font><br> <font size="4">克隆前c1:  a=100 b=5</font><br><font size="4">克隆后c2:  a=50 b[0]=5</font><br> <font size="4">c1和c2的对象模型：</font><br><br><img src="/photo/4-26/clone1.png" alt="alt text"><br></p>
<p><font size="4">可看出，基本类型可以使用浅克隆，而对于引用类型，由于引用的是内容相同，所以改变c2实例对象中的属性就会影响到c1。所以引用类型需要使用深克隆。另外，在开发一个不可变类的时候，如果这个不可变类中成员有引用类型，则就需要通过深克隆来达到不可变的目的。</font><br> <font size="4" color="red">深克隆(deep clone)</font><br><font size="4">深克隆与浅克隆的区别在于对复合数据类型的复制。若对象中的某个字段为复合类型，在克隆对象的时候，需要为该字段重新创建一个对象。例子：</font><br> </p>
<pre><code>public class DeepClone implements Cloneable {  

    private int a;   // 基本类型  
    private int[] b; // 非基本类型  
    // 重写Object.clone()方法,并把protected改为public  
    @Override  
    public Object clone(){  
        DeepClone sc = null;  
        try  
        {  
            sc = (DeepClone) super.clone();  
            int[] t = sc.getB();  
            int[] b1 = new int[t.length];  
            for (int i = 0; i &lt; b1.length; i++) {  
                b1[i] = t[i];  
            }  
            sc.setB(b1);  
        } catch (CloneNotSupportedException e){  
            e.printStackTrace();  
        }  
        return sc;  
    }  
    public int getA()  
    {  
        return a;  
    }  
    public void setA(int a)  
    {  
        this.a = a;  
    }  
    public int[] getB() {  
        return b;  
    }  
    public void setB(int[] b) {  
        this.b = b;  
    }  
} 
</code></pre><p><font size="4">结果为：</font><br></p>
<p><font size="4">克隆前c1:  a=100 b=1000</font><br> <font size="4">克隆前c1:  a=100 b=1000</font><br> <font size="4">克隆后c2:  a=50 b[0]=5</font><br> <font size="4">c1和c2的对象模型：</font><br><br><img src="/photo/4-26/clone2.png" alt="alt text"><br></p>
<p><font size="4" color="red">4、总结：</font><br><font size="4"></font></p>
<p><font size="4">1.克隆方法用于创建对象的拷贝，为了使用clone方法，类必须实现java.lang.Cloneable接口重写protected方法clone，如果没有实现Clonebale接口会抛出CloneNotSupportedException.</font><br> </p>
<p><font size="4">2.在克隆java对象的时候不会调用构造器</font><br> </p>
<p><font size="4">3.java提供一种叫浅拷贝（shallow copy）的默认方式实现clone，创建好对象的副本后然后通过赋值拷贝内容，意味着如果你的类包含引用类型，那么原始对象和克隆都将指向相同的引用内容，这是很危险的，因为发生在可变的字段上任何改变将反应到他们所引用的共同内容上。为了避免这种情况，需要对引用的内容进行深度克隆。</font><br> </p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式（五）]]></title>
      <url>/2018/04/27/design-pattern5/</url>
      <content type="html"><![CDATA[<p><div align="center" style="display:none"><br><img src="/photo/4-26/4.jpg" height="330" width="495"><br></div><br><strong><font size="5">5、原型模式（Prototype）</font></strong><br></p>
<p><font size="4">原型模式虽然是创建型的模式，但是与工程模式没有关系，从名字即可看出，该模式的思想就是将一个对象作为原型，对其进行复制、克隆，产生一个和原对象类似的新对象。本小结会通过对象的复制，进行讲解。在Java中，复制对象是通过clone()实现的，先创建一个原型类：</font><br> </p>
<pre><code>public class Prototype implements Cloneable {  

    public Object clone() throws CloneNotSupportedException {  
        Prototype proto = (Prototype) super.clone();  
        return proto;  
    }  
}  
</code></pre><p><font size="4">很简单，一个原型类，只需要实现Cloneable接口，覆写clone方法，此处clone方法可以改成任意的名称，因为Cloneable接口是个空接口，你可以任意定义实现类的方法名，如cloneA或者cloneB，因为此处的重点是super.clone()这句话，super.clone()调用的是Object的clone()方法，而在Object类中，clone()是native的，具体怎么实现，我会在另一篇文章中，关于解读Java中本地方法的调用，此处不再深究。在这儿，我将结合对象的浅复制和深复制来说一下，首先需要了解对象深、浅复制的概念：</font><br> <font size="4">浅复制：将一个对象复制后，基本数据类型的变量都会重新创建，而引用类型，指向的还是原对象所指向的。</font><br> <font size="4">深复制：将一个对象复制后，不论是基本数据类型还有引用类型，都是重新创建的。简单来说，就是深复制进行了完全彻底的复制，而浅复制不彻底。</font><br> <font size="4">此处，写一个深浅复制的例子：</font><br> </p>
<pre><code>public class Prototype implements Cloneable, Serializable {  

    private static final long serialVersionUID = 1L;  
    private String string;  

    private SerializableObject obj;  

    /* 浅复制 */  
    public Object clone() throws CloneNotSupportedException {  
        Prototype proto = (Prototype) super.clone();  
        return proto;  
    }  

    /* 深复制 */  
    public Object deepClone() throws IOException, ClassNotFoundException {  

        /* 写入当前对象的二进制流 */  
        ByteArrayOutputStream bos = new ByteArrayOutputStream();  
        ObjectOutputStream oos = new ObjectOutputStream(bos);  
        oos.writeObject(this);  

        /* 读出二进制流产生的新对象 */  
        ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());  
        ObjectInputStream ois = new ObjectInputStream(bis);  
        return ois.readObject();  
    }  

    public String getString() {  
        return string;  
    }  

    public void setString(String string) {  
        this.string = string;  
    }  

    public SerializableObject getObj() {  
        return obj;  
    }  

    public void setObj(SerializableObject obj) {  
        this.obj = obj;  
    }  

}  

class SerializableObject implements Serializable {  
    private static final long serialVersionUID = 1L;  
}  
</code></pre><p><font size="4">要实现深复制，需要采用流的形式读入当前对象的二进制输入，再写出二进制数据对应的对象。</font><br> </p>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> technology </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式（四）]]></title>
      <url>/2018/04/27/design-pattern4/</url>
      <content type="html"><![CDATA[<p><div align="center" style="display:none"><br><img src="/photo/4-26/5.jpg" height="330" width="495"><br></div><br><strong><font size="5">4、建造者模式（Builder）</font></strong><br></p>
<p><font size="4">工厂类模式提供的是创建单个类的模式，而建造者模式则是将各种产品集中起来进行管理，用来创建复合对象，所谓复合对象就是指某个类具有不同的属性，其实建造者模式就是前面抽象工厂模式和最后的Test结合起来得到的。我们看一下代码：</font><br> </p>
<p><font size="4" color="red">我觉得建造者模式具体可参照<a href="https://blog.csdn.net/carson_ho/article/details/54910597" target="_blank" rel="noopener">此处</a>，其中个人觉得可以参照抽象工厂模式，类比Builder是抽象工厂，ConcreteBuilder是具体工厂比如dell工厂等。</font><br></p>
<p><font size="4"><strong>下面的建造者模式例子不妥当仅供参考，以上面链接为准，下面摘自其原文。</strong>还和前面一样，一个Sender接口，两个实现类MailSender和SmsSender。最后，建造者类如下：</font><br> </p>
<pre><code>public class Builder {  

    private List&lt;Sender&gt; list = new ArrayList&lt;Sender&gt;();  

    public void produceMailSender(int count){  
        for(int i=0; i&lt;count; i++){  
            list.add(new MailSender());  
        }  
    }  

    public void produceSmsSender(int count){  
        for(int i=0; i&lt;count; i++){  
            list.add(new SmsSender());  
        }  
    }  
} 
</code></pre><p><font size="4">测试类：</font><br></p>
<pre><code>public class Test {  

    public static void main(String[] args) {  
        Builder builder = new Builder();  
        builder.produceMailSender(10);  
    }  
}
</code></pre><p><font size="4">从这点看出，建造者模式将很多功能集成到一个类里，这个类可以创造出比较复杂的东西。所以与工程模式的区别就是：工厂模式关注的是创建单个产品，而建造者模式则关注创建符合对象，多个部分。因此，是选择工厂模式还是建造者模式，依实际情况而定。</font><br>  </p>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> technology </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式（三）]]></title>
      <url>/2018/04/26/design-pattern3/</url>
      <content type="html"><![CDATA[<p><div align="center" style="display:none"><br><img src="/photo/4-26/8.jpg" height="330" width="495"><br></div><br><strong><font size="5">3、单例模式（Singleton）</font></strong><br></p>
<p><font size="4">单例对象（Singleton）是一种常用的设计模式。在Java应用中，单例对象能保证在一个JVM中，该对象只有一个实例存在。这样的模式有几个<strong>好处</strong>：</font><br></p>
<p><font size="4">1、某些类创建比较频繁，对于一些大型的对象，这是一笔很大的系统开销。</font><br></p>
<p><font size="4">2、省去了new操作符，降低了系统内存的使用频率，减轻GC压力。</font><br></p>
<p><font size="4">3、有些类如交易所的核心交易引擎，控制着交易流程，如果该类可以创建多个的话，系统完全乱了。（比如一个军队出现了多个司令员同时指挥，肯定会乱成一团），所以只有使用单例模式，才能保证核心交易服务器独立控制整个流程。</font><br></p>
<p><font size="4" color="red">实现单例模式的思路：</font><br> </p>
<p><font size="4">1.外界不能造对象  –把无参构造方法私有。</font><br> </p>
<p><font size="4">2.类本身要造一个  –调用构造方法即可</font><br> </p>
<p><font size="4">3.通过公共的方式对外提供</font><br> </p>
<p><font size="4">–该方法通过public修饰</font><br> </p>
<p><font size="4">–又由于无参构造私有，所以要用static修饰符修饰该方法</font><br> </p>
<p><font size="4">–为了保证静态方法只能访问静态成员，所以这个对象也要用static修饰</font><br> </p>
<p><font size="4"> 如果这样…     static Student s = new Student();</font><br> </p>
<p><font size="4"> 那么外界可以这样…   Student.s = null使用为null的对象可能出现空指针异常错误</font><br> <font size="4"> –所以要加private修饰该对象</font><br> </p>
<p><font size="4">首先我们写一个简单的单例类：</font><br> </p>
<pre><code>public class Singleton {  

    /* 持有私有静态实例，防止被引用，此处赋值为null，目的是实现延迟加载 */  
    private static Singleton instance = null;  

    /* 私有构造方法，防止被实例化 */  
    private Singleton() {  
    }  

    /* 静态工程方法，创建实例 */  
    public static Singleton getInstance() {  
        if (instance == null) {  
            instance = new Singleton();  
        }  
        return instance;  
    }  

    /* 如果该对象被用于序列化，可以保证对象在序列化前后保持一致 */  
    public Object readResolve() {  
        return instance;  
    }  
}  
</code></pre><p><font size="4">这个类(懒汉式)可以满足基本要求，但是，像这样毫无线程安全保护的类，如果我们把它放入多线程的环境下，肯定就会出现问题了，如何解决？我们首先会想到对getInstance方法加synchronized关键字，如下：</font><br></p>
<pre><code>public static synchronized Singleton getInstance() {  
        if (instance == null) {  
            instance = new Singleton();  
        }  
        return instance;  
    }   
</code></pre><p><font size="4">但是，synchronized关键字锁住的是这个对象，这样的用法，在性能上会有所下降，因为每次调用getInstance()，都要对对象上锁，事实上，只有在第一次创建对象的时候需要加锁，之后就不需要了，所以，这个地方需要改进。我们改成下面这个：</font><br></p>
<pre><code>public static Singleton getInstance() {  
        if (instance == null) {  
            synchronized (instance) {  
                if (instance == null) {  
                    instance = new Singleton();  
                }  
            }  
        }  
        return instance;  
    }  
</code></pre><p><font size="4">似乎解决了之前提到的问题，将synchronized关键字加在了内部，也就是说当调用的时候是不需要加锁的，只有在instance为null，并创建对象的时候才需要加锁，性能有一定的提升。但是，这样的情况，还是有可能有问题的，看下面的情况：在Java指令中创建对象和赋值操作是分开进行的，也就是说instance = new Singleton();语句是分两步执行的。但是JVM并不保证这两个操作的先后顺序，也就是说有可能JVM会为新的Singleton实例分配空间，然后直接赋值给instance成员，然后再去初始化这个Singleton实例。这样就可能出错了，我们以A、B两个线程为例：</font><br></p>
<p><font size="4">①A、B线程同时进入了第一个if判断</font><br> </p>
<p><font size="4">②A首先进入synchronized块，由于instance为null，所以它执行instance = new Singleton();</font><br></p>
<p><font size="4">③由于JVM内部的优化机制，JVM先画出了一些分配给Singleton实例的空白内存，并赋值给instance成员（注意此时JVM没有开始初始化这个实例），然后A离开了synchronized块。</font><br></p>
<p><font size="4">④B进入synchronized块，由于instance此时不是null，因此它马上离开了synchronized块并将结果返回给调用该方法的程序。</font><br></p>
<p><font size="4">⑤此时B线程打算使用Singleton实例，却发现它没有被初始化，于是错误发生了。</font><br></p>
<p><font size="4">所以程序还是有可能发生错误，其实程序在运行过程是很复杂的，从这点我们就可以看出，尤其是在写多线程环境下的程序更有难度，有挑战性。我们对该程序做进一步优化：</font><br> </p>
<pre><code>private static class SingletonFactory{           
        private static Singleton instance = new Singleton();           
    }           
    public static Singleton getInstance(){           
        return SingletonFactory.instance;           
    } 
</code></pre><p><font size="4">实际情况是，单例模式使用内部类来维护单例的实现，JVM内部的机制能够保证当一个类被加载的时候，这个类的加载过程是线程互斥的。这样当我们第一次调用getInstance的时候，JVM能够帮我们保证instance只被创建一次，并且会保证把赋值给instance的内存初始化完毕，这样我们就不用担心上面的问题。同时该方法也只会在第一次调用的时候使用互斥机制，这样就解决了低性能问题。这样我们暂时总结一个完美的单例模式：</font><br> </p>
<pre><code>public class Singleton {  

    /* 私有构造方法，防止被实例化 */  
    private Singleton() {  
    }  

    /* 此处使用一个内部类来维护单例 */  
    private static class SingletonFactory {  
        private static Singleton instance = new Singleton();  
    }  

    /* 获取实例 */  
    public static Singleton getInstance() {  
        return SingletonFactory.instance;  
    }  

    /* 如果该对象被用于序列化，可以保证对象在序列化前后保持一致 */  
    public Object readResolve() {  
        return getInstance();  
    }  
}
</code></pre><p><font size="4">其实说它完美，也不一定，如果在构造函数中抛出异常，实例将永远得不到创建，也会出错。所以说，十分完美的东西是没有的，我们只能根据实际情况，选择最适合自己应用场景的实现方法。也有人这样实现：因为我们只需要在创建类的时候进行同步，所以只要将创建和getInstance()分开，单独为创建加synchronized关键字，也是可以的：</font><br></p>
<pre><code>public class SingletonTest {  

    private static SingletonTest instance = null;  

    private SingletonTest() {  
    }  

    private static synchronized void syncInit() {  
        if (instance == null) {  
            instance = new SingletonTest();  
        }  
    }  

    public static SingletonTest getInstance() {  
        if (instance == null) {  
            syncInit();  
        }  
        return instance;  
    }  
}  
</code></pre><p><font size="4">考虑性能的话，整个程序只需创建一次实例，所以性能也不会有什么影响。</font><br> </p>
<p><font size="4">饿汉式（static final field）另一种较为直接的写法如下：</font><br> </p>
<pre><code>public class Singleton{  
    //类加载时就初始化  
    private static final Singleton instance = new Singleton();  

    private Singleton(){}  

    public static Singleton getInstance(){  
        return instance;  
    }  
}  
</code></pre><p><font size="4">这种方法非常简单，因为单例的实例被声明成 static和 final变量了，在第一次加载类到内存中时就会初始化，所以创建实例本身是线程安全的。缺点是它不是一种懒加载模式（lazy initialization），单例会在加载类后一开始就被初始化，即使客户端没有调用 getInstance()方法。饿汉式的创建方式在一些场景中将无法使用：譬如 Singleton 实例的创建是依赖参数或者配置文件的，在 getInstance()之前必须调用某个方法设置参数给它，那样这种单例写法就无法使用了。</font><br> </p>
<p><font size="4" color="red">懒汉式、饿汉式在spring IOC中的应用：</font><br> <font size="4">在spring IOC中，bean在xml中可以配置为singleton，而且有一个lazy-init属性</font><br> <font size="4">lazy-init=true,设置延迟初始化， 在创建容器之后，在第一次从容器获取对象的时候创建单例的对象</font><br><font size="4">如果没有配置或延迟初始化为默认值, 单例的对象会在创建容器的时候创建对象</font><br></p>
<p><font size="4" color="red">通过单例模式的学习告诉我们：</font><br></p>
<p><font size="4">1、单例模式理解起来简单，但是具体实现起来还是有一定的难度。</font><br></p>
<p><font size="4">2、synchronized关键字锁定的是对象，在用的时候，一定要在恰当的地方使用（注意需要使用锁的对象和过程，可能有的时候并不是整个对象及整个过程都需要锁）。</font><br><strong><font size="4">到这儿，单例模式基本已经讲完了，结尾处，笔者突然想到另一个问题，就是采用类的静态方法，实现单例模式的效果，也是可行的，此处二者有什么不同？</font><br></strong><font size="4">首先，静态类不能实现接口。（从类的角度说是可以的，但是那样就破坏了静态了。因为接口中不允许有static修饰的方法，所以即使实现了也是非静态的）</font><br> <font size="4">其次，单例可以被延迟初始化，静态类一般在第一次加载是初始化。之所以延迟加载，是因为有些类比较庞大，所以延迟加载有助于提升性能。</font><br> <font size="4">再次，单例类可以被继承，他的方法可以被覆写。但是静态类内部方法都是static，无法被覆写。</font><br> <font size="4">最后一点，单例类比较灵活，毕竟从实现上只是一个普通的Java类，只要满足单例的基本需求，你可以在里面随心所欲的实现一些其它功能，但是静态类不行。从上面这些概括中，基本可以看出二者的区别，但是，从另一方面讲，我们上面实现的那个单例模式，内部就是用一个静态类来实现的，所以，二者有很大的关联，只是我们考虑问题的层面不同罢了。两种思想的结合，才能造就出完美的解决方案，就像HashMap采用数组+链表来实现一样，其实生活中很多事情都是这样，单用不同的方法来处理问题，总是有优点也有缺点，最完美的方法是，结合各个方法的优点，才能最好的解决问题！</font><br> </p>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> technology </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式（二）]]></title>
      <url>/2018/04/26/design-patterns2/</url>
      <content type="html"><![CDATA[<p><div align="center" style="display:none"><br><img src="/photo/4-28/3.jpg" height="330" width="495"><br></div><br><strong><font size="5">三、Java的23种设计模式</font></strong><br></p>
<p></p><h1>A、创建模式</h1><hr><p></p>
<p></p><p><font size="4"><br>从这一块开始，我们详细介绍Java中23种设计模式的概念，应用场景等情况，并结合他们的特点及设计模式的原则进行分析。<br>首先，简单工厂模式不属于23种设计模式，简单工厂一般分为：普通简单工厂、多方法简单工厂、静态方法简单工厂。<br></font><br></p><p></p>
<p></p><h2>0、简单工厂模式</h2><font size="4">简单工厂模式分为三种：</font><br><strong><em><h3>I.普通简单工厂模式</h3></em></strong><font size="4">就是建立一个工厂类，对实现了同一接口的一些类进行实例的创建。首先看关系图：</font><br><br><img src="/photo/4-26/1.png" alt="alt text"><br><p></p>
<p><font size="4">举例如下：（我们举一个发送邮件和短信的例子,可以考虑生产鼠标等，包括dell、hp）</font></p>
<p><font size="4">首先，创建二者的共同接口：</font><br></p>
<pre><code>public interface Sender {  
    public void Send();  
}  
</code></pre><p><font size="4">其次，创建实现类：</font><br></p>
<pre><code>public class MailSender implements Sender {  
    @Override  
    public void Send() {  
        System.out.println(&quot;this is mailsender!&quot;);  
    }  
}

public class SmsSender implements Sender {  
    @Override  
    public void Send() {  
        System.out.println(&quot;this is sms sender!&quot;);  
    }  
} 
</code></pre><p><font size="4">最后，建工厂类：</font><br> </p>
<pre><code>public class SendFactory {  

    public Sender produce(String type) {  
        if (&quot;mail&quot;.equals(type)) {  
            return new MailSender();  
        } else if (&quot;sms&quot;.equals(type)) {  
            return new SmsSender();  
        } else {  
            System.out.println(&quot;请输入正确的类型!&quot;);  
            return null;  
        }  
    }  
}
</code></pre><p><font size="4">我们来测试下：</font><br> </p>
<pre><code>public class FactoryTest {  

    public static void main(String[] args) {  
        SendFactory factory = new SendFactory();  
        Sender sender = factory.produce(&quot;sms&quot;);  
        sender.Send();  
    }  
}
</code></pre><p><font size="4">输出：this is sms sender!</font><br><br><strong><em><h3>II.多方法简单工厂模式（多方法）</h3></em></strong><font size="4">是对普通工厂方法模式的改进，在普通工厂方法模式中，如果传递的字符串出错，则不能正确创建对象，而多个工厂方法模式是提供多个工厂方法，分别创建对象。关系图：</font><br><br><img src="/photo/4-26/2.jpg" alt="alt text"><br></p>
<p><font size="4">将上面的代码做下修改，改动下SendFactory类就行，如下：</font><br> </p>
<pre><code>public class SendFactory {  

    public Sender produceMail(){  
        return new MailSender();  
    }  

    public Sender produceSms(){  
        return new SmsSender();  
    }  
} 
</code></pre><p><font size="4">测试类如下：</font><br>  </p>
<pre><code>public class FactoryTest {  

    public static void main(String[] args) {  
        SendFactory factory = new SendFactory();  
        Sender sender = factory.produceMail();  
        sender.Send();  
    }  
} 
</code></pre><p><font size="4">输出：this is mailsender!</font><br><br><strong><em><h3>III.静态方法简单工厂模式（多个静态方法）</h3></em></strong>  <font size="4">将上面的多个工厂方法模式里的方法置为静态的，不需要创建实例，直接调用即可。</font><br></p>
<pre><code>public class SendFactory {  

    public static Sender produceMail(){  
        return new MailSender();  
    }  

    public static Sender produceSms(){  
        return new SmsSender();  
    }  
}  
public class FactoryTest {  

    public static void main(String[] args) {      
        Sender sender = SendFactory.produceMail();  
        sender.Send();  
    }  
}  
</code></pre><p><font size="4">输出：this is mailsender!</font><br></p>
<p><font size="4">总体来说，工厂模式适合：凡是出现了大量的产品需要创建，并且具有共同的接口时，可以通过工厂方法模式进行创建。在以上的三种模式中，第一种如果传入的字符串有误，不能正确创建对象，第三种相对于第二种，不需要实例化工厂类，所以，大多数情况下，我们会选用第三种——静态工厂方法模式。</font><br></p><h2>1、工厂方法模式（Factory Method）</h2><p></p>
<p><font size="4">简单工厂模式有一个问题就是，类的创建依赖工厂类，也就是说，如果想要拓展程序，必须对工厂类进行修改，这违背了闭包原则，所以，从设计角度考虑，有一定的问题，如何解决？就用到工厂方法模式，创建多个工厂类，这样一旦需要增加新的功能，直接增加新的工厂类就可以了，不需要修改之前的代码。因为工厂方法不太好理解，我们先看看图，然后就和代码，就比较容易理解。</font><br><br><img src="/photo/4-26/3.jpg" alt="alt text"><br></p>
<p><font size="4">请看例子：</font><br></p>
<pre><code>public interface Sender {  
    public void Send();  
}  
</code></pre><p><font size="4">两个实现类：</font><br></p>
<pre><code>public class MailSender implements Sender {  
    @Override  
    public void Send() {  
        System.out.println(&quot;this is mailsender!&quot;);  
    }  
} 
public class SmsSender implements Sender {  

    @Override  
    public void Send() {  
        System.out.println(&quot;this is sms sender!&quot;);  
    }  
} 
</code></pre><p><font size="4">两个工厂类：</font><br></p>
<pre><code>public class SendMailFactory implements Provider {  

    @Override  
    public Sender produce(){  
        return new MailSender();  
    }  
} 
public class SendSmsFactory implements Provider{  

    @Override  
    public Sender produce() {  
        return new SmsSender();  
    }  
}  
</code></pre><p><font size="4">再提供一个接口：</font><br></p>
<pre><code>public interface Provider {  
    public Sender produce();  
} 
</code></pre><p><font size="4">测试类：</font><br></p>
<pre><code>public class Test {  

    public static void main(String[] args) {  
        Provider provider = new SendMailFactory();  
        Sender sender = provider.produce();  
        sender.Send();  
    }  
}
</code></pre><p><font size="4">其实这个模式的好处就是，如果你现在想增加一个功能：发及时信息，则只需做一个实现类，实现Sender接口，同时做一个工厂类，实现Provider接口，就OK了，无需去改动现成的代码。这样做，拓展性较好！</font><br></p><h2>2、抽象工厂模式（Abstract Factory）</h2><font size="4">工厂方法模式和抽象工厂模式不好分清楚，可以参照<a href="http://ichennan.com/2016/08/09/DesignPattern.html" target="_blank" rel="noopener">三者间比较</a>。他们的区别如下：</font><br><br><strong><font size="4">工厂方法模式：</font></strong><br><font size="4">一个抽象产品类，可以派生出多个具体产品类。</font><br><font size="4">一个抽象工厂类，可以派生出多个具体工厂类。</font><br><font size="4">每个具体工厂类只能创建一个具体产品类的实例。</font><br><br><strong><font size="4">抽象工厂模式：</font></strong><br><font size="4">多个抽象产品类，每个抽象产品类可以派生出多个具体产品类。</font><br><font size="4">一个抽象工厂类，可以派生出多个具体工厂类。</font><br><font size="4">每个具体工厂类可以创建多个具体产品类的实例，也就是创建的是一个产品线下的多个产品。</font><br><br><strong><font size="4">区别：</font></strong><br><p></p>
<p><font size="4">工厂方法模式只有一个抽象产品类，而抽象工厂模式有多个。</font><br><font size="4">工厂方法模式的具体工厂类只能创建一个具体产品类的实例，而抽象工厂模式可以创建多个。</font><br><font size="4">工厂方法创建 “一种” 产品，他的着重点在于”怎么创建”，也就是说如果你开发，你的大量代码很可能围绕着这种产品的构造，初始化这些细节上面。也因为如此，类似的产品之间有很多可以复用的特征，所以会和模版方法相随。</font><br><font size="4">抽象工厂需要创建一些列产品，着重点在于”创建哪些”产品上，也就是说，如果你开发，你的主要任务是划分不同差异的产品线，并且尽量保持每条产品线接口一致，从而可以从同一个抽象工厂继承。</font><br><br><strong><font size="4">对于java来说，你能见到的大部分抽象工厂模式都是这样的：</font></strong><br></p>
<p><font size="4">—它的里面是一堆工厂方法，每个工厂方法返回某种类型的对象。</font><br></p>
<p><font size="4">比如说工厂可以生产鼠标和键盘。那么抽象工厂的实现类（它的某个具体子类）的对象都可以生产鼠标和键盘，但可能工厂A生产的是罗技的键盘和鼠标，工厂B是微软的。</font><br></p>
<p><font size="4">这样A和B就是工厂，对应于抽象工厂；<br>每个工厂生产的鼠标和键盘就是产品，对应于工厂方法；</font><br></p>
<p><font size="4">用了工厂方法模式，你替换生成键盘的工厂方法，就可以把键盘从罗技换到微软。但是用了抽象工厂模式，你只要换家工厂，就可以同时替换鼠标和键盘一套。如果你要的产品有几十个，当然用抽象工厂模式一次替换全部最方便（这个工厂会替你用相应的工厂方法）</font><br></p>
<p><font size="4">所以说抽象工厂就像工厂，而工厂方法则像是工厂的一种产品生产线。</font><br></p>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> technology </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式（一）]]></title>
      <url>/2018/04/26/design-patternsmd/</url>
      <content type="html"><![CDATA[<div align="center" style="display:none"><br><img src="/photo/design.jpg" height="330" width="495"><br></div>

<p><strong><font size="5">一、设计模式的分类</font></strong><br></p>
<p><font size="4">总体来说设计模式分为三大类：</font><br></p>
<p><font size="4" color="red">创建型模式（5种）：</font><font size="4">工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。</font><br><font size="4" color="red">结构型模式（7种）：</font><font size="4">适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。</font><br><font size="4" color="red">行为型模式（11种）：</font><font size="4">策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。<br></font><br></p>
<p><font size="4"> 其实还有两类：并发模式和线程池模式。用如下图来整体描述：</font><br><br><img src="/photo/picture.jpg" alt="alt text"><br><br><strong><font size="5">二、设计模式的六大原则</font></strong><br></p>
<p><font size="4" color="red">总原则：开闭原则（Open Close Principle）</font><br></p>
<p><font size="4"><br>开闭原则就是说<strong>对扩展开放，对修改关闭</strong>。在程序需要进行拓展的时候，不能去修改原有的代码，而是要扩展原有代码，实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类等，后面的具体设计中我们会提到这点。<br></font><br></p>
<p><font size="4" color="red">1、单一职责原则</font><br></p>
<p><font size="4"><br>不要存在多于一个导致类变更的原因，也就是说每个类应该实现单一的职责，如若不然，就应该把类拆分。<br></font><br></p>
<p><font size="4" color="red">2、里氏替换原则（Liskov Substitution Principle）</font><br></p>
<p><font size="4"><br>里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。 LSP是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。—— From Baidu 百科</font></p>
<p><font size="4"> 里氏替换原则中，子类对父类的方法尽量不要重写和重载。因为父类代表了定义好的结构，通过这个规范的接口与外界交互，子类不应该随便破坏它。<br></font><br></p>
<p><font size="4" color="red">3、依赖倒转原则（Dependence Inversion Principle）</font><br></p>
<p><font size="4"><br>这个是开闭原则的基础，具体内容：面向接口编程，依赖于抽象而不依赖于具体。写代码时用到具体类时，不与具体类交互，而与具体类的上层接口交互。<br></font><br></p>
<p><font size="4" color="red">4、接口隔离原则（Interface Segregation Principle）</font><br></p>
<p><font size="4"><br>这个原则的意思是：每个接口中不存在子类用不到却必须实现的方法，如果不然，就要将接口拆分。使用多个隔离的接口，比使用单个接口（多个接口方法集合到一个的接口）要好。<br></font><br></p>
<p><font size="4" color="red">5、迪米特法则（最少知道原则）（Demeter Principle）</font><br></p>
<p><font size="4"><br>就是说：一个类对自己依赖的类知道的越少越好。也就是说无论被依赖的类多么复杂，都应该将逻辑封装在方法的内部，通过public方法提供给外部。这样当被依赖的类变化时，才能最小的影响该类。</font></p>
<p>最少知道原则的另一个表达方式是：只与直接的朋友通信。类之间只要有耦合关系，就叫朋友关系。耦合分为依赖、关联、聚合、组合等。我们称出现为成员变量、方法参数、方法返回值中的类为直接朋友。局部变量、临时变量则不是直接的朋友。我们要求陌生的类不要作为局部变量出现在类中。<br><br></p>
<p><font size="4" color="red">6、合成复用原则（Composite Reuse Principle）</font><br></p>
<p><font size="4"><br>原则是尽量首先使用合成/聚合的方式，而不是使用继承。<br></font><br></p>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> technology </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[死锁]]></title>
      <url>/2018/04/15/%E6%AD%BB%E9%94%81/</url>
      <content type="html"><![CDATA[<div align="center" style="display:none"><br><img src="/photo/back.jpg" height="330" width="495"><br></div>


<font size="4"><br><strong>死锁：</strong>是指两个或两个以上的进程在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去。<br><br>（1）因为系统资源不足<br><br>（2）进程运行推进顺序不合适<br><br>（3）资源分配不当等<br><br>如果系统资源充足，进程的资源请求都能够得到满足，死锁出现的可能性就很低，否则就会因争夺有限的资源而陷入死锁。其次，进程运行推进顺序与速度不同，也可能产生死锁。<br><br><strong><font size="4" color="red">死锁的4个必要条件：</font></strong><br>（1） 互斥：一个资源每次只能被一个进程使用。<br><br>（2） 请求与保持：一个进程因请求资源而阻塞时，对已获得的资源保持不放。<br><br>（3） 不剥夺： 进程已获得的资源，在未使用完之前，不能强行剥夺。<br><br>（4） 循环等待： 若干进程之间形成一种头尾相连的循环等待资源关系。<br><br>这四个条件是死锁的必要条件，只要系统发生死锁，这些条件必然成立，而只要上述条件之一不满足，就不会发生死锁。<br></font>
]]></content>
      
        
        <tags>
            
            <tag> operating system </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[归并排序]]></title>
      <url>/2018/04/15/hello-world/</url>
      <content type="html"><![CDATA[<p><div align="center" style="display:none"><br><img src="/photo/1.png" height="330" width="495"><br></div><br>思想：分治思想</p>
<p>时间复杂度：O(nlgn)</p>
<p>稳定性：稳定</p>
<p>归并过程：<br><img src="/photo/merge.jpg" alt="alt text"></p>
<p>代码如下：</p>
<pre><code>public class MergeSort {

    public static void merge(int[] a, int low, int mid, int high) {
        int[] temp = new int[high - low + 1];
        int i = low;// 左指针
        int j = mid + 1;// 右指针
        int k = 0;
        // 把较小的数先移到新数组中
        while (i &lt;= mid &amp;&amp; j &lt;= high) {
            if (a[i] &lt; a[j]) {
                temp[k++] = a[i++];
            } else {
                temp[k++] = a[j++];
            }
        }
        // 把左边剩余的数移入数组
        while (i &lt;= mid) {
            temp[k++] = a[i++];
        }
        // 把右边边剩余的数移入数组
        while (j &lt;= high) {
            temp[k++] = a[j++];
        }
        // 把新数组中的数覆盖nums数组
        for (int k2 = 0; k2 &lt; temp.length; k2++) {
            a[k2 + low] = temp[k2];
        }
    }

    public static void mergeSort(int[] a, int low, int high) {
        int mid = (low + high) / 2;
        if (low &lt; high) {
            // 左边
            mergeSort(a, low, mid);
            // 右边
            mergeSort(a, mid + 1, high);
            // 左右归并
            merge(a, low, mid, high);
            System.out.println(Arrays.toString(a));
        }

    }

    public static void main(String[] args) {
        int a[] = { 51, 46, 20, 18, 65, 97, 82, 30, 77, 50 };
        mergeSort(a, 0, a.length - 1);
        System.out.println(&quot;排序结果：&quot; + Arrays.toString(a));
    }
}
</code></pre>]]></content>
      
        <categories>
            
            <category> 代码 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[大数相乘]]></title>
      <url>/2018/04/15/article-title/</url>
      <content type="html"><![CDATA[<p><div align="center" style="display:none"><br><img src="/photo/4.JPG" height="250" width="495"><br></div><br><strong>代码如下：</strong><br></p>
<pre><code>public class Mutiply {

    public static void main(String[] args){

        String str1 = &quot;7832974972840919321747983209327&quot;;
        String str2 = &quot;1987432091904327543957&quot;;
        System.out.println(multiply(str1,str2));

    }
    public static String multiply(String num1,String num2){

        int len1 = num1.length();
        int len2 = num2.length();
        //结果最大长度len1+len2,最小为len1+len2-1
        int[] num = new int[len1+len2]; //数组默认初始化均为0
        for(int i=0;i&lt;len2;i++){

            int n1 = num2.charAt(len2-1-i)-&apos;0&apos;;
            int tmp = 0; //表示进位
            for(int j=0;j&lt;len1;j++){
                int n2 = num1.charAt(len1-1-j)-&apos;0&apos;;
                tmp = tmp + num[i+j] + n1*n2;
                num[i+j] = tmp%10;
                tmp = tmp/10;
            }
            num[len1+i] = tmp; //下面的数与上面最高位相乘得到的那个进位

        }
        //现在数组中存的是从个位开始到高位，所以需要倒过来
        //先找到数组中从后面开始不为0的数，该数为最高位。
        int i = len1+len2-1;
        while(i&gt;=0 &amp;&amp; num[i]==0){
            i--;
        }
        String result = &quot;&quot;;
        while(i&gt;=0){
            result+=num[i--];
        }
        return result;
    }
}
</code></pre>]]></content>
      
        <categories>
            
            <category> 代码 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> programming </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[多线程编程优点]]></title>
      <url>/2018/01/04/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E5%A5%BD%E5%A4%84/</url>
      <content type="html"><![CDATA[<div align="center" style="display:none"><br><img src="/photo/3.JPG" height="330" width="495"><br></div>

<font size="4" color="red">线程：</font><font size="4">一种CPU利用的基本单元，它是形成多线程计算机的基础。线程是CPU使用的基本单元。</font><br><br><font size="4" color="red">进程：</font><font size="4">可看做是正在执行的程序。进程需要一定的资源（CPU时间、内存、文件和I/O设备）来完成其任务。</font><br><br><font size="4" color="red">【注】：</font><font size="4">进程是CPU分配资源的基本单位，线程是CPU调度的基本单位。</font>

<p><strong><font size="4" color="red"><br>多线程编程具有如下4个优点：<br></font></strong></p>
<p><strong><font size="4" color="red">①响应度高：</font></strong><font size="4">如果对一个交互程序采用多线程，那么即使其部分阻塞或执行比较冗长的操作，该程序仍能继续执行，从而增加了对用户的响应程度。例如：多线程web浏览器在用一个线程装入图像时，能通过另一个线程与用户交互。<br></font><br></p>
<p><strong><font size="4" color="red">②资源共享：</font></strong><font size="4">线程默认共享它们所属进程的内存和资源。代码和数据共享的优点是它能允许一个应用程序在同一地址空间有多个不同的活动线程。<br></font><br></p>
<p><strong><font size="4" color="red">③经济：</font></strong><font size="4">进程创建所需要的内存和资源的分配比价昂贵，由于线程能共享它们所属进程的资源，所以创建和切换线程会更加经济。实际地测量进程创建和管理与线程创建和管理的差别较为困难，但是前者通常要比后者花费更多时间。例如：对于Solaris，进程创建要比线程创建慢30倍，而进程切换要比线程切换慢5倍。<br></font><br></p>
<p><strong><font size="4" color="red">④多处理器体系结构的利用：</font></strong><font size="4">多线程的优点之一是能充分使用多处理器体系结构，以便每个进程能并行运行在不同的处理器上。不管有多少cpu，单线程进程只能运行在一个cpu上。在多cpu上使用多线程加强了并发功能。<br></font></p>
]]></content>
      
        <categories>
            
            <category> 线程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> operating system </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
