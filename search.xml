<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[死锁]]></title>
      <url>/2018/04/15/%E6%AD%BB%E9%94%81/</url>
      <content type="html"><![CDATA[<div align="center" style="display:none"><br><img src="/photo/back.jpg" height="330" width="495"><br></div>


<font size="4"><br><strong>死锁：</strong>是指两个或两个以上的进程在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去。<br><br>（1）因为系统资源不足<br><br>（2）进程运行推进顺序不合适<br><br>（3）资源分配不当等<br><br>如果系统资源充足，进程的资源请求都能够得到满足，死锁出现的可能性就很低，否则就会因争夺有限的资源而陷入死锁。其次，进程运行推进顺序与速度不同，也可能产生死锁。<br><br><strong><font size="4" color="red">死锁的4个必要条件：</font></strong><br>（1） 互斥：一个资源每次只能被一个进程使用。<br><br>（2） 请求与保持：一个进程因请求资源而阻塞时，对已获得的资源保持不放。<br><br>（3） 不剥夺： 进程已获得的资源，在未使用完之前，不能强行剥夺。<br><br>（4） 循环等待： 若干进程之间形成一种头尾相连的循环等待资源关系。<br><br>这四个条件是死锁的必要条件，只要系统发生死锁，这些条件必然成立，而只要上述条件之一不满足，就不会发生死锁。<br></font>
]]></content>
      
        
        <tags>
            
            <tag> operating system </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[归并排序]]></title>
      <url>/2018/04/15/hello-world/</url>
      <content type="html"><![CDATA[<p><div align="center" style="display:none"><br><img src="/photo/1.png" height="330" width="495"><br></div><br>思想：分治思想</p>
<p>时间复杂度：O(nlgn)</p>
<p>稳定性：稳定</p>
<p>归并过程：<br><img src="/photo/merge.jpg" alt="alt text"></p>
<p>代码如下：</p>
<pre><code>public class MergeSort {

    public static void merge(int[] a, int low, int mid, int high) {
        int[] temp = new int[high - low + 1];
        int i = low;// 左指针
        int j = mid + 1;// 右指针
        int k = 0;
        // 把较小的数先移到新数组中
        while (i &lt;= mid &amp;&amp; j &lt;= high) {
            if (a[i] &lt; a[j]) {
                temp[k++] = a[i++];
            } else {
                temp[k++] = a[j++];
            }
        }
        // 把左边剩余的数移入数组
        while (i &lt;= mid) {
            temp[k++] = a[i++];
        }
        // 把右边边剩余的数移入数组
        while (j &lt;= high) {
            temp[k++] = a[j++];
        }
        // 把新数组中的数覆盖nums数组
        for (int k2 = 0; k2 &lt; temp.length; k2++) {
            a[k2 + low] = temp[k2];
        }
    }

    public static void mergeSort(int[] a, int low, int high) {
        int mid = (low + high) / 2;
        if (low &lt; high) {
            // 左边
            mergeSort(a, low, mid);
            // 右边
            mergeSort(a, mid + 1, high);
            // 左右归并
            merge(a, low, mid, high);
            System.out.println(Arrays.toString(a));
        }

    }

    public static void main(String[] args) {
        int a[] = { 51, 46, 20, 18, 65, 97, 82, 30, 77, 50 };
        mergeSort(a, 0, a.length - 1);
        System.out.println(&quot;排序结果：&quot; + Arrays.toString(a));
    }
}
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[my first log]]></title>
      <url>/2018/04/15/article-title/</url>
      <content type="html"><![CDATA[<h2 id="tags"><a href="#tags" class="headerlink" title="tags:"></a>tags:</h2><p><img src="/photo/2.JPG" alt="Alt text"><br><strong><em>this is my first blog</em></strong><br><br><strong>hello world!</strong></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
